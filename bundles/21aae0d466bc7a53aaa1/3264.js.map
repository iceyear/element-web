{"version":3,"file":"bundles/21aae0d466bc7a53aaa1/3264.js","mappings":"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","sources":["webpack://element-web/./src/async-components/views/dialogs/security/CreateSecretStorageDialog.tsx","webpack://element-web/./src/components/views/auth/PassphraseConfirmField.tsx","webpack://element-web/./src/components/views/auth/PassphraseField.tsx","webpack://element-web/./src/utils/device/dehydration.ts","webpack://element-web/./node_modules/file-saver/dist/FileSaver.min.js"],"sourcesContent":["/*\nCopyright 2024 New Vector Ltd.\nCopyright 2019, 2020 , 2023 The Matrix.org Foundation C.I.C.\nCopyright 2018, 2019 New Vector Ltd\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport React, { createRef } from \"react\";\nimport FileSaver from \"file-saver\";\nimport { logger } from \"matrix-js-sdk/src/logger\";\nimport { AuthDict, CrossSigningKeys, MatrixError, UIAFlow, UIAResponse } from \"matrix-js-sdk/src/matrix\";\nimport { GeneratedSecretStorageKey } from \"matrix-js-sdk/src/crypto-api\";\nimport classNames from \"classnames\";\nimport CheckmarkIcon from \"@vector-im/compound-design-tokens/assets/web/icons/check\";\n\nimport { MatrixClientPeg } from \"../../../../MatrixClientPeg\";\nimport { _t, _td } from \"../../../../languageHandler\";\nimport Modal from \"../../../../Modal\";\nimport { copyNode } from \"../../../../utils/strings\";\nimport { SSOAuthEntry } from \"../../../../components/views/auth/InteractiveAuthEntryComponents\";\nimport PassphraseField from \"../../../../components/views/auth/PassphraseField\";\nimport StyledRadioButton from \"../../../../components/views/elements/StyledRadioButton\";\nimport AccessibleButton from \"../../../../components/views/elements/AccessibleButton\";\nimport DialogButtons from \"../../../../components/views/elements/DialogButtons\";\nimport InlineSpinner from \"../../../../components/views/elements/InlineSpinner\";\nimport {\n    getSecureBackupSetupMethods,\n    isSecureBackupRequired,\n    SecureBackupSetupMethod,\n} from \"../../../../utils/WellKnownUtils\";\nimport { ModuleRunner } from \"../../../../modules/ModuleRunner\";\nimport Field from \"../../../../components/views/elements/Field\";\nimport BaseDialog from \"../../../../components/views/dialogs/BaseDialog\";\nimport Spinner from \"../../../../components/views/elements/Spinner\";\nimport InteractiveAuthDialog from \"../../../../components/views/dialogs/InteractiveAuthDialog\";\nimport { IValidationResult } from \"../../../../components/views/elements/Validation\";\nimport PassphraseConfirmField from \"../../../../components/views/auth/PassphraseConfirmField\";\nimport { initialiseDehydration } from \"../../../../utils/device/dehydration\";\n\n// I made a mistake while converting this and it has to be fixed!\nenum Phase {\n    Loading = \"loading\",\n    LoadError = \"load_error\",\n    ChooseKeyPassphrase = \"choose_key_passphrase\",\n    Passphrase = \"passphrase\",\n    PassphraseConfirm = \"passphrase_confirm\",\n    ShowKey = \"show_key\",\n    Storing = \"storing\",\n    Stored = \"stored\",\n    ConfirmSkip = \"confirm_skip\",\n}\n\nconst PASSWORD_MIN_SCORE = 4; // So secure, many characters, much complex, wow, etc, etc.\n\ninterface IProps {\n    hasCancel?: boolean;\n    accountPassword?: string;\n    forceReset?: boolean;\n    resetCrossSigning?: boolean;\n    onFinished(ok?: boolean): void;\n}\n\ninterface IState {\n    phase: Phase;\n    passPhrase: string;\n    passPhraseValid: boolean;\n    passPhraseConfirm: string;\n    copied: boolean;\n    downloaded: boolean;\n    setPassphrase: boolean;\n\n    // does the server offer a UI auth flow with just m.login.password\n    // for /keys/device_signing/upload?\n    canUploadKeysWithPasswordOnly: boolean | null;\n    accountPassword: string;\n    accountPasswordCorrect: boolean | null;\n    canSkip: boolean;\n    passPhraseKeySelected: string;\n    error?: boolean;\n}\n\n/**\n * Walks the user through the process of creating a 4S passphrase and bootstrapping secret storage.\n *\n * If the user already has a key backup, follows a \"migration\" flow (aka \"Upgrade your encryption\") which\n * prompts the user to enter their backup decryption password (a Curve25519 private key, possibly derived\n * from a passphrase), and uses that as the (AES) 4S encryption key.\n */\nexport default class CreateSecretStorageDialog extends React.PureComponent<IProps, IState> {\n    public static defaultProps: Partial<IProps> = {\n        hasCancel: true,\n        forceReset: false,\n        resetCrossSigning: false,\n    };\n    private recoveryKey?: GeneratedSecretStorageKey;\n    private recoveryKeyNode = createRef<HTMLElement>();\n    private passphraseField = createRef<Field>();\n\n    public constructor(props: IProps) {\n        super(props);\n\n        const cli = MatrixClientPeg.safeGet();\n\n        let passPhraseKeySelected: SecureBackupSetupMethod;\n        const setupMethods = getSecureBackupSetupMethods(cli);\n        if (setupMethods.includes(SecureBackupSetupMethod.Key)) {\n            passPhraseKeySelected = SecureBackupSetupMethod.Key;\n        } else {\n            passPhraseKeySelected = SecureBackupSetupMethod.Passphrase;\n        }\n\n        const accountPassword = props.accountPassword || \"\";\n        let canUploadKeysWithPasswordOnly: boolean | null = null;\n        if (accountPassword) {\n            // If we have an account password in memory, let's simplify and\n            // assume it means password auth is also supported for device\n            // signing key upload as well. This avoids hitting the server to\n            // test auth flows, which may be slow under high load.\n            canUploadKeysWithPasswordOnly = true;\n        }\n\n        const keyFromCustomisations = ModuleRunner.instance.extensions.cryptoSetup.createSecretStorageKey();\n        const phase = keyFromCustomisations ? Phase.Loading : Phase.ChooseKeyPassphrase;\n\n        this.state = {\n            phase,\n            passPhrase: \"\",\n            passPhraseValid: false,\n            passPhraseConfirm: \"\",\n            copied: false,\n            downloaded: false,\n            setPassphrase: false,\n            // does the server offer a UI auth flow with just m.login.password\n            // for /keys/device_signing/upload?\n            accountPasswordCorrect: null,\n            canSkip: !isSecureBackupRequired(cli),\n            canUploadKeysWithPasswordOnly,\n            passPhraseKeySelected,\n            accountPassword,\n        };\n    }\n\n    public componentDidMount(): void {\n        const keyFromCustomisations = ModuleRunner.instance.extensions.cryptoSetup.createSecretStorageKey();\n        if (keyFromCustomisations) this.initExtension(keyFromCustomisations);\n\n        if (this.state.canUploadKeysWithPasswordOnly === null) {\n            this.queryKeyUploadAuth();\n        }\n    }\n\n    private initExtension(keyFromCustomisations: Uint8Array): void {\n        logger.log(\"CryptoSetupExtension: Created key via extension, jumping to bootstrap step\");\n        this.recoveryKey = {\n            privateKey: keyFromCustomisations,\n        };\n        this.bootstrapSecretStorage();\n    }\n\n    private async queryKeyUploadAuth(): Promise<void> {\n        try {\n            await MatrixClientPeg.safeGet().uploadDeviceSigningKeys(undefined, {} as CrossSigningKeys);\n            // We should never get here: the server should always require\n            // UI auth to upload device signing keys. If we do, we upload\n            // no keys which would be a no-op.\n            logger.log(\"uploadDeviceSigningKeys unexpectedly succeeded without UI auth!\");\n        } catch (error) {\n            if (!(error instanceof MatrixError) || !error.data || !error.data.flows) {\n                logger.log(\"uploadDeviceSigningKeys advertised no flows!\");\n                return;\n            }\n            const canUploadKeysWithPasswordOnly = error.data.flows.some((f: UIAFlow) => {\n                return f.stages.length === 1 && f.stages[0] === \"m.login.password\";\n            });\n            this.setState({\n                canUploadKeysWithPasswordOnly,\n            });\n        }\n    }\n\n    private onKeyPassphraseChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            passPhraseKeySelected: e.target.value,\n        });\n    };\n\n    private onChooseKeyPassphraseFormSubmit = async (): Promise<void> => {\n        if (this.state.passPhraseKeySelected === SecureBackupSetupMethod.Key) {\n            this.recoveryKey = await MatrixClientPeg.safeGet().getCrypto()!.createRecoveryKeyFromPassphrase();\n            this.setState({\n                copied: false,\n                downloaded: false,\n                setPassphrase: false,\n                phase: Phase.ShowKey,\n            });\n        } else {\n            this.setState({\n                copied: false,\n                downloaded: false,\n                phase: Phase.Passphrase,\n            });\n        }\n    };\n\n    private onCopyClick = (): void => {\n        const successful = copyNode(this.recoveryKeyNode.current);\n        if (successful) {\n            this.setState({\n                copied: true,\n            });\n        }\n    };\n\n    private onDownloadClick = (): void => {\n        if (!this.recoveryKey) return;\n        const blob = new Blob([this.recoveryKey.encodedPrivateKey!], {\n            type: \"text/plain;charset=us-ascii\",\n        });\n        FileSaver.saveAs(blob, \"security-key.txt\");\n\n        this.setState({\n            downloaded: true,\n        });\n    };\n\n    private doBootstrapUIAuth = async (\n        makeRequest: (authData: AuthDict) => Promise<UIAResponse<void>>,\n    ): Promise<void> => {\n        if (this.state.canUploadKeysWithPasswordOnly && this.state.accountPassword) {\n            await makeRequest({\n                type: \"m.login.password\",\n                identifier: {\n                    type: \"m.id.user\",\n                    user: MatrixClientPeg.safeGet().getSafeUserId(),\n                },\n                password: this.state.accountPassword,\n            });\n        } else {\n            const dialogAesthetics = {\n                [SSOAuthEntry.PHASE_PREAUTH]: {\n                    title: _t(\"auth|uia|sso_title\"),\n                    body: _t(\"auth|uia|sso_preauth_body\"),\n                    continueText: _t(\"auth|sso\"),\n                    continueKind: \"primary\",\n                },\n                [SSOAuthEntry.PHASE_POSTAUTH]: {\n                    title: _t(\"encryption|confirm_encryption_setup_title\"),\n                    body: _t(\"encryption|confirm_encryption_setup_body\"),\n                    continueText: _t(\"action|confirm\"),\n                    continueKind: \"primary\",\n                },\n            };\n\n            const { finished } = Modal.createDialog(InteractiveAuthDialog, {\n                title: _t(\"encryption|bootstrap_title\"),\n                matrixClient: MatrixClientPeg.safeGet(),\n                makeRequest,\n                aestheticsForStagePhases: {\n                    [SSOAuthEntry.LOGIN_TYPE]: dialogAesthetics,\n                    [SSOAuthEntry.UNSTABLE_LOGIN_TYPE]: dialogAesthetics,\n                },\n            });\n            const [confirmed] = await finished;\n            if (!confirmed) {\n                throw new Error(\"Cross-signing key upload auth canceled\");\n            }\n        }\n    };\n\n    private bootstrapSecretStorage = async (): Promise<void> => {\n        const cli = MatrixClientPeg.safeGet();\n        const crypto = cli.getCrypto()!;\n        const { forceReset, resetCrossSigning } = this.props;\n\n        let backupInfo;\n        // First, unless we know we want to do a reset, we see if there is an existing key backup\n        if (!forceReset) {\n            try {\n                this.setState({ phase: Phase.Loading });\n                backupInfo = await crypto.getKeyBackupInfo();\n            } catch (e) {\n                logger.error(\"Error fetching backup data from server\", e);\n                this.setState({ phase: Phase.LoadError });\n                return;\n            }\n        }\n\n        this.setState({\n            phase: Phase.Storing,\n            error: undefined,\n        });\n\n        try {\n            if (forceReset) {\n                /* Resetting cross-signing requires secret storage to be reset\n                 * (otherwise it will try to store the cross-signing keys in the\n                 * old secret storage, and may prompt for the old key, which is\n                 * probably not available), and resetting key backup requires\n                 * cross-signing to be reset (so that the new backup can be\n                 * signed by the new cross-signing key).  So we reset secret\n                 * storage first, then cross-signing, then key backup.\n                 */\n                logger.log(\"Forcing secret storage reset\");\n                await crypto.bootstrapSecretStorage({\n                    createSecretStorageKey: async () => this.recoveryKey!,\n                    setupNewSecretStorage: true,\n                });\n                if (resetCrossSigning) {\n                    logger.log(\"Resetting cross signing\");\n                    await crypto.bootstrapCrossSigning({\n                        authUploadDeviceSigningKeys: this.doBootstrapUIAuth,\n                        setupNewCrossSigning: true,\n                    });\n                }\n                logger.log(\"Resetting key backup\");\n                await crypto.resetKeyBackup();\n            } else {\n                // For password authentication users after 2020-09, this cross-signing\n                // step will be a no-op since it is now setup during registration or login\n                // when needed. We should keep this here to cover other cases such as:\n                //   * Users with existing sessions prior to 2020-09 changes\n                //   * SSO authentication users which require interactive auth to upload\n                //     keys (and also happen to skip all post-authentication flows at the\n                //     moment via token login)\n                await crypto.bootstrapCrossSigning({\n                    authUploadDeviceSigningKeys: this.doBootstrapUIAuth,\n                });\n                await crypto.bootstrapSecretStorage({\n                    createSecretStorageKey: async () => this.recoveryKey!,\n                    setupNewKeyBackup: !backupInfo,\n                });\n            }\n            await initialiseDehydration(true);\n\n            this.setState({\n                phase: Phase.Stored,\n            });\n        } catch (e) {\n            this.setState({ error: true });\n            logger.error(\"Error bootstrapping secret storage\", e);\n        }\n    };\n\n    private onCancel = (): void => {\n        this.props.onFinished(false);\n    };\n\n    private onLoadRetryClick = (): void => {\n        this.bootstrapSecretStorage();\n    };\n\n    private onShowKeyContinueClick = (): void => {\n        this.bootstrapSecretStorage();\n    };\n\n    private onCancelClick = (): void => {\n        this.setState({ phase: Phase.ConfirmSkip });\n    };\n\n    private onGoBackClick = (): void => {\n        this.setState({ phase: Phase.ChooseKeyPassphrase });\n    };\n\n    private onPassPhraseNextClick = async (e: React.FormEvent): Promise<void> => {\n        e.preventDefault();\n        if (!this.passphraseField.current) return; // unmounting\n\n        await this.passphraseField.current.validate({ allowEmpty: false });\n        if (!this.passphraseField.current.state.valid) {\n            this.passphraseField.current.focus();\n            this.passphraseField.current.validate({ allowEmpty: false, focused: true });\n            return;\n        }\n\n        this.setState({ phase: Phase.PassphraseConfirm });\n    };\n\n    private onPassPhraseConfirmNextClick = async (e: React.FormEvent): Promise<void> => {\n        e.preventDefault();\n\n        if (this.state.passPhrase !== this.state.passPhraseConfirm) return;\n\n        this.recoveryKey = await MatrixClientPeg.safeGet()\n            .getCrypto()!\n            .createRecoveryKeyFromPassphrase(this.state.passPhrase);\n        this.setState({\n            copied: false,\n            downloaded: false,\n            setPassphrase: true,\n            phase: Phase.ShowKey,\n        });\n    };\n\n    private onSetAgainClick = (): void => {\n        this.setState({\n            passPhrase: \"\",\n            passPhraseValid: false,\n            passPhraseConfirm: \"\",\n            phase: Phase.Passphrase,\n        });\n    };\n\n    private onPassPhraseValidate = (result: IValidationResult): void => {\n        this.setState({\n            passPhraseValid: !!result.valid,\n        });\n    };\n\n    private onPassPhraseChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            passPhrase: e.target.value,\n        });\n    };\n\n    private onPassPhraseConfirmChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            passPhraseConfirm: e.target.value,\n        });\n    };\n\n    private renderOptionKey(): JSX.Element {\n        return (\n            <StyledRadioButton\n                key={SecureBackupSetupMethod.Key}\n                value={SecureBackupSetupMethod.Key}\n                name=\"keyPassphrase\"\n                checked={this.state.passPhraseKeySelected === SecureBackupSetupMethod.Key}\n                onChange={this.onKeyPassphraseChange}\n                outlined\n            >\n                <div className=\"mx_CreateSecretStorageDialog_optionTitle\">\n                    <span className=\"mx_CreateSecretStorageDialog_optionIcon mx_CreateSecretStorageDialog_optionIcon_secureBackup\" />\n                    {_t(\"settings|key_backup|setup_secure_backup|generate_security_key_title\")}\n                </div>\n                <div>{_t(\"settings|key_backup|setup_secure_backup|generate_security_key_description\")}</div>\n            </StyledRadioButton>\n        );\n    }\n\n    private renderOptionPassphrase(): JSX.Element {\n        return (\n            <StyledRadioButton\n                key={SecureBackupSetupMethod.Passphrase}\n                value={SecureBackupSetupMethod.Passphrase}\n                name=\"keyPassphrase\"\n                checked={this.state.passPhraseKeySelected === SecureBackupSetupMethod.Passphrase}\n                onChange={this.onKeyPassphraseChange}\n                outlined\n            >\n                <div className=\"mx_CreateSecretStorageDialog_optionTitle\">\n                    <span className=\"mx_CreateSecretStorageDialog_optionIcon mx_CreateSecretStorageDialog_optionIcon_securePhrase\" />\n                    {_t(\"settings|key_backup|setup_secure_backup|enter_phrase_title\")}\n                </div>\n                <div>{_t(\"settings|key_backup|setup_secure_backup|use_phrase_only_you_know\")}</div>\n            </StyledRadioButton>\n        );\n    }\n\n    private renderPhaseChooseKeyPassphrase(): JSX.Element {\n        const setupMethods = getSecureBackupSetupMethods(MatrixClientPeg.safeGet());\n        const optionKey = setupMethods.includes(SecureBackupSetupMethod.Key) ? this.renderOptionKey() : null;\n        const optionPassphrase = setupMethods.includes(SecureBackupSetupMethod.Passphrase)\n            ? this.renderOptionPassphrase()\n            : null;\n\n        return (\n            <form onSubmit={this.onChooseKeyPassphraseFormSubmit}>\n                <p className=\"mx_CreateSecretStorageDialog_centeredBody\">\n                    {_t(\"settings|key_backup|setup_secure_backup|description\")}\n                </p>\n                <div className=\"mx_CreateSecretStorageDialog_primaryContainer\" role=\"radiogroup\">\n                    {optionKey}\n                    {optionPassphrase}\n                </div>\n                <DialogButtons\n                    primaryButton={_t(\"action|continue\")}\n                    onPrimaryButtonClick={this.onChooseKeyPassphraseFormSubmit}\n                    onCancel={this.onCancelClick}\n                    hasCancel={this.state.canSkip}\n                />\n            </form>\n        );\n    }\n\n    private renderPhasePassPhrase(): JSX.Element {\n        return (\n            <form onSubmit={this.onPassPhraseNextClick}>\n                <p>{_t(\"settings|key_backup|setup_secure_backup|enter_phrase_description\")}</p>\n\n                <div className=\"mx_CreateSecretStorageDialog_passPhraseContainer\">\n                    <PassphraseField\n                        id=\"mx_passPhraseInput\"\n                        className=\"mx_CreateSecretStorageDialog_passPhraseField\"\n                        onChange={this.onPassPhraseChange}\n                        minScore={PASSWORD_MIN_SCORE}\n                        value={this.state.passPhrase}\n                        onValidate={this.onPassPhraseValidate}\n                        fieldRef={this.passphraseField}\n                        autoFocus={true}\n                        label={_td(\"settings|key_backup|setup_secure_backup|enter_phrase_title\")}\n                        labelEnterPassword={_td(\"settings|key_backup|setup_secure_backup|enter_phrase_title\")}\n                        labelStrongPassword={_td(\"settings|key_backup|setup_secure_backup|phrase_strong_enough\")}\n                        labelAllowedButUnsafe={_td(\"settings|key_backup|setup_secure_backup|phrase_strong_enough\")}\n                    />\n                </div>\n\n                <DialogButtons\n                    primaryButton={_t(\"action|continue\")}\n                    onPrimaryButtonClick={this.onPassPhraseNextClick}\n                    hasCancel={false}\n                    disabled={!this.state.passPhraseValid}\n                >\n                    <button type=\"button\" onClick={this.onCancelClick} className=\"danger\">\n                        {_t(\"action|cancel\")}\n                    </button>\n                </DialogButtons>\n            </form>\n        );\n    }\n\n    private renderPhasePassPhraseConfirm(): JSX.Element {\n        let matchText;\n        let changeText;\n        if (this.state.passPhraseConfirm === this.state.passPhrase) {\n            matchText = _t(\"settings|key_backup|setup_secure_backup|pass_phrase_match_success\");\n            changeText = _t(\"settings|key_backup|setup_secure_backup|use_different_passphrase\");\n        } else if (!this.state.passPhrase.startsWith(this.state.passPhraseConfirm)) {\n            // only tell them they're wrong if they've actually gone wrong.\n            // Security conscious readers will note that if you left element-web unattended\n            // on this screen, this would make it easy for a malicious person to guess\n            // your passphrase one letter at a time, but they could get this faster by\n            // just opening the browser's developer tools and reading it.\n            // Note that not having typed anything at all will not hit this clause and\n            // fall through so empty box === no hint.\n            matchText = _t(\"settings|key_backup|setup_secure_backup|pass_phrase_match_failed\");\n            changeText = _t(\"settings|key_backup|setup_secure_backup|set_phrase_again\");\n        }\n\n        let passPhraseMatch: JSX.Element | undefined;\n        if (matchText) {\n            passPhraseMatch = (\n                <div>\n                    <div>{matchText}</div>\n                    <AccessibleButton kind=\"link\" onClick={this.onSetAgainClick}>\n                        {changeText}\n                    </AccessibleButton>\n                </div>\n            );\n        }\n        return (\n            <form onSubmit={this.onPassPhraseConfirmNextClick}>\n                <p>{_t(\"settings|key_backup|setup_secure_backup|enter_phrase_to_confirm\")}</p>\n                <div className=\"mx_CreateSecretStorageDialog_passPhraseContainer\">\n                    <PassphraseConfirmField\n                        id=\"mx_passPhraseInput\"\n                        onChange={this.onPassPhraseConfirmChange}\n                        value={this.state.passPhraseConfirm}\n                        className=\"mx_CreateSecretStorageDialog_passPhraseField\"\n                        label={_td(\"settings|key_backup|setup_secure_backup|confirm_security_phrase\")}\n                        labelRequired={_td(\"settings|key_backup|setup_secure_backup|confirm_security_phrase\")}\n                        labelInvalid={_td(\"settings|key_backup|setup_secure_backup|pass_phrase_match_failed\")}\n                        autoFocus={true}\n                        password={this.state.passPhrase}\n                    />\n                    <div className=\"mx_CreateSecretStorageDialog_passPhraseMatch\">{passPhraseMatch}</div>\n                </div>\n                <DialogButtons\n                    primaryButton={_t(\"action|continue\")}\n                    onPrimaryButtonClick={this.onPassPhraseConfirmNextClick}\n                    hasCancel={false}\n                    disabled={this.state.passPhrase !== this.state.passPhraseConfirm}\n                >\n                    <button type=\"button\" onClick={this.onCancelClick} className=\"danger\">\n                        {_t(\"action|skip\")}\n                    </button>\n                </DialogButtons>\n            </form>\n        );\n    }\n\n    private renderPhaseShowKey(): JSX.Element {\n        let continueButton: JSX.Element;\n        if (this.state.phase === Phase.ShowKey) {\n            continueButton = (\n                <DialogButtons\n                    primaryButton={_t(\"action|continue\")}\n                    disabled={!this.state.downloaded && !this.state.copied && !this.state.setPassphrase}\n                    onPrimaryButtonClick={this.onShowKeyContinueClick}\n                    hasCancel={false}\n                />\n            );\n        } else {\n            continueButton = (\n                <div className=\"mx_CreateSecretStorageDialog_continueSpinner\">\n                    <InlineSpinner />\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <p>{_t(\"settings|key_backup|setup_secure_backup|security_key_safety_reminder\")}</p>\n                <div className=\"mx_CreateSecretStorageDialog_primaryContainer mx_CreateSecretStorageDialog_recoveryKeyPrimarycontainer\">\n                    <div className=\"mx_CreateSecretStorageDialog_recoveryKeyContainer\">\n                        <div className=\"mx_CreateSecretStorageDialog_recoveryKey\">\n                            <code ref={this.recoveryKeyNode}>{this.recoveryKey?.encodedPrivateKey}</code>\n                        </div>\n                        <div className=\"mx_CreateSecretStorageDialog_recoveryKeyButtons\">\n                            <AccessibleButton\n                                kind=\"primary\"\n                                className=\"mx_Dialog_primary\"\n                                onClick={this.onDownloadClick}\n                                disabled={this.state.phase === Phase.Storing}\n                            >\n                                {_t(\"action|download\")}\n                            </AccessibleButton>\n                            <span>\n                                {_t(\"settings|key_backup|setup_secure_backup|download_or_copy\", {\n                                    downloadButton: \"\",\n                                    copyButton: \"\",\n                                })}\n                            </span>\n                            <AccessibleButton\n                                kind=\"primary\"\n                                className=\"mx_Dialog_primary mx_CreateSecretStorageDialog_recoveryKeyButtons_copyBtn\"\n                                onClick={this.onCopyClick}\n                                disabled={this.state.phase === Phase.Storing}\n                            >\n                                {this.state.copied ? _t(\"common|copied\") : _t(\"action|copy\")}\n                            </AccessibleButton>\n                        </div>\n                    </div>\n                </div>\n                {continueButton}\n            </div>\n        );\n    }\n\n    private renderBusyPhase(): JSX.Element {\n        return (\n            <div>\n                <Spinner />\n            </div>\n        );\n    }\n\n    private renderStoredPhase(): JSX.Element {\n        return (\n            <>\n                <p className=\"mx_Dialog_content\">\n                    {_t(\"settings|key_backup|setup_secure_backup|backup_setup_success_description\")}\n                </p>\n                <DialogButtons\n                    primaryButton={_t(\"action|done\")}\n                    onPrimaryButtonClick={() => this.props.onFinished(true)}\n                    hasCancel={false}\n                />\n            </>\n        );\n    }\n\n    private renderPhaseLoadError(): JSX.Element {\n        return (\n            <div>\n                <p>{_t(\"settings|key_backup|setup_secure_backup|secret_storage_query_failure\")}</p>\n                <div className=\"mx_Dialog_buttons\">\n                    <DialogButtons\n                        primaryButton={_t(\"action|retry\")}\n                        onPrimaryButtonClick={this.onLoadRetryClick}\n                        hasCancel={this.state.canSkip}\n                        onCancel={this.onCancel}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    private renderPhaseSkipConfirm(): JSX.Element {\n        return (\n            <div>\n                <p>{_t(\"settings|key_backup|setup_secure_backup|cancel_warning\")}</p>\n                <p>{_t(\"settings|key_backup|setup_secure_backup|settings_reminder\")}</p>\n                <DialogButtons\n                    primaryButton={_t(\"action|go_back\")}\n                    onPrimaryButtonClick={this.onGoBackClick}\n                    hasCancel={false}\n                >\n                    <button type=\"button\" className=\"danger\" onClick={this.onCancel}>\n                        {_t(\"action|cancel\")}\n                    </button>\n                </DialogButtons>\n            </div>\n        );\n    }\n\n    private titleForPhase(phase: Phase): string {\n        switch (phase) {\n            case Phase.ChooseKeyPassphrase:\n                return _t(\"encryption|set_up_toast_title\");\n            case Phase.Passphrase:\n                return _t(\"settings|key_backup|setup_secure_backup|title_set_phrase\");\n            case Phase.PassphraseConfirm:\n                return _t(\"settings|key_backup|setup_secure_backup|title_confirm_phrase\");\n            case Phase.ConfirmSkip:\n                return _t(\"common|are_you_sure\");\n            case Phase.ShowKey:\n                return _t(\"settings|key_backup|setup_secure_backup|title_save_key\");\n            case Phase.Storing:\n                return _t(\"encryption|bootstrap_title\");\n            case Phase.Stored:\n                return _t(\"settings|key_backup|setup_secure_backup|backup_setup_success_title\");\n            default:\n                return \"\";\n        }\n    }\n\n    private get topComponent(): React.ReactNode | null {\n        if (this.state.phase === Phase.Stored) {\n            return <CheckmarkIcon className=\"mx_Icon mx_Icon_circle-40 mx_Icon_accent mx_Icon_bg-accent-light\" />;\n        }\n\n        return null;\n    }\n\n    private get classNames(): string {\n        return classNames(\"mx_CreateSecretStorageDialog\", {\n            mx_SuccessDialog: this.state.phase === Phase.Stored,\n        });\n    }\n\n    public render(): React.ReactNode {\n        let content;\n        if (this.state.error) {\n            content = (\n                <div>\n                    <p>{_t(\"settings|key_backup|setup_secure_backup|unable_to_setup\")}</p>\n                    <div className=\"mx_Dialog_buttons\">\n                        <DialogButtons\n                            primaryButton={_t(\"action|retry\")}\n                            onPrimaryButtonClick={this.bootstrapSecretStorage}\n                            hasCancel={this.state.canSkip}\n                            onCancel={this.onCancel}\n                        />\n                    </div>\n                </div>\n            );\n        } else {\n            switch (this.state.phase) {\n                case Phase.Loading:\n                    content = this.renderBusyPhase();\n                    break;\n                case Phase.LoadError:\n                    content = this.renderPhaseLoadError();\n                    break;\n                case Phase.ChooseKeyPassphrase:\n                    content = this.renderPhaseChooseKeyPassphrase();\n                    break;\n                case Phase.Passphrase:\n                    content = this.renderPhasePassPhrase();\n                    break;\n                case Phase.PassphraseConfirm:\n                    content = this.renderPhasePassPhraseConfirm();\n                    break;\n                case Phase.ShowKey:\n                    content = this.renderPhaseShowKey();\n                    break;\n                case Phase.Storing:\n                    content = this.renderBusyPhase();\n                    break;\n                case Phase.Stored:\n                    content = this.renderStoredPhase();\n                    break;\n                case Phase.ConfirmSkip:\n                    content = this.renderPhaseSkipConfirm();\n                    break;\n            }\n        }\n\n        let titleClass: string | string[] | undefined;\n        switch (this.state.phase) {\n            case Phase.Passphrase:\n            case Phase.PassphraseConfirm:\n                titleClass = [\n                    \"mx_CreateSecretStorageDialog_titleWithIcon\",\n                    \"mx_CreateSecretStorageDialog_securePhraseTitle\",\n                ];\n                break;\n            case Phase.ShowKey:\n                titleClass = [\n                    \"mx_CreateSecretStorageDialog_titleWithIcon\",\n                    \"mx_CreateSecretStorageDialog_secureBackupTitle\",\n                ];\n                break;\n            case Phase.ChooseKeyPassphrase:\n                titleClass = \"mx_CreateSecretStorageDialog_centeredTitle\";\n                break;\n        }\n\n        return (\n            <BaseDialog\n                className={this.classNames}\n                onFinished={this.props.onFinished}\n                top={this.topComponent}\n                title={this.titleForPhase(this.state.phase)}\n                titleClass={titleClass}\n                hasCancel={this.props.hasCancel && [Phase.Passphrase].includes(this.state.phase)}\n                fixedWidth={false}\n            >\n                <div>{content}</div>\n            </BaseDialog>\n        );\n    }\n}\n","/*\nCopyright 2024 New Vector Ltd.\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport React, { ComponentProps, PureComponent, RefCallback, RefObject } from \"react\";\n\nimport Field, { IInputProps } from \"../elements/Field\";\nimport withValidation, { IFieldState, IValidationResult } from \"../elements/Validation\";\nimport { _t, _td, TranslationKey } from \"../../../languageHandler\";\n\ninterface IProps extends Omit<IInputProps, \"onValidate\" | \"label\" | \"element\"> {\n    id?: string;\n    fieldRef?: RefCallback<Field> | RefObject<Field>;\n    autoComplete?: string;\n    value: string;\n    password: string; // The password we're confirming\n\n    label: TranslationKey;\n    labelRequired: TranslationKey;\n    labelInvalid: TranslationKey;\n    tooltipAlignment?: ComponentProps<typeof Field>[\"tooltipAlignment\"];\n    onChange(ev: React.FormEvent<HTMLElement>): void;\n    onValidate?(result: IValidationResult): void;\n}\n\nclass PassphraseConfirmField extends PureComponent<IProps> {\n    public static defaultProps = {\n        label: _td(\"auth|change_password_confirm_label\"),\n        labelRequired: _td(\"auth|change_password_confirm_label\"),\n        labelInvalid: _td(\"auth|change_password_confirm_invalid\"),\n    };\n\n    private validate = withValidation({\n        rules: [\n            {\n                key: \"required\",\n                test: ({ value, allowEmpty }) => allowEmpty || !!value,\n                invalid: () => _t(this.props.labelRequired),\n            },\n            {\n                key: \"match\",\n                test: ({ value }) => !value || value === this.props.password,\n                invalid: () => _t(this.props.labelInvalid),\n            },\n        ],\n    });\n\n    private onValidate = async (fieldState: IFieldState): Promise<IValidationResult> => {\n        const result = await this.validate(fieldState);\n        if (this.props.onValidate) {\n            this.props.onValidate(result);\n        }\n\n        return result;\n    };\n\n    public render(): React.ReactNode {\n        return (\n            <Field\n                id={this.props.id}\n                ref={this.props.fieldRef}\n                type=\"password\"\n                label={_t(this.props.label)}\n                autoComplete={this.props.autoComplete}\n                value={this.props.value}\n                onChange={this.props.onChange}\n                onValidate={this.onValidate}\n                autoFocus={this.props.autoFocus}\n                tooltipAlignment={this.props.tooltipAlignment}\n            />\n        );\n    }\n}\n\nexport default PassphraseConfirmField;\n","/*\nCopyright 2024 New Vector Ltd.\nCopyright 2020 The Matrix.org Foundation C.I.C.\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport React, { ComponentProps, PureComponent, RefCallback, RefObject } from \"react\";\nimport classNames from \"classnames\";\n\nimport type { ZxcvbnResult } from \"@zxcvbn-ts/core\";\nimport SdkConfig from \"../../../SdkConfig\";\nimport withValidation, { IFieldState, IValidationResult } from \"../elements/Validation\";\nimport { _t, _td, TranslationKey } from \"../../../languageHandler\";\nimport Field, { IInputProps } from \"../elements/Field\";\nimport { MatrixClientPeg } from \"../../../MatrixClientPeg\";\n\ninterface IProps extends Omit<IInputProps, \"onValidate\" | \"element\"> {\n    autoFocus?: boolean;\n    id?: string;\n    className?: string;\n    minScore: 0 | 1 | 2 | 3 | 4;\n    value: string;\n    fieldRef?: RefCallback<Field> | RefObject<Field>;\n    // Additional strings such as a username used to catch bad passwords\n    userInputs?: string[];\n\n    label: TranslationKey;\n    labelEnterPassword: TranslationKey;\n    labelStrongPassword: TranslationKey;\n    labelAllowedButUnsafe: TranslationKey;\n    tooltipAlignment?: ComponentProps<typeof Field>[\"tooltipAlignment\"];\n\n    onChange(ev: React.FormEvent<HTMLElement>): void;\n    onValidate?(result: IValidationResult): void;\n}\n\nclass PassphraseField extends PureComponent<IProps> {\n    public static defaultProps = {\n        label: _td(\"common|password\"),\n        labelEnterPassword: _td(\"auth|password_field_label\"),\n        labelStrongPassword: _td(\"auth|password_field_strong_label\"),\n        labelAllowedButUnsafe: _td(\"auth|password_field_weak_label\"),\n    };\n\n    public readonly validate = withValidation<this, ZxcvbnResult | null>({\n        description: function (complexity) {\n            const score = complexity ? complexity.score : 0;\n            return <progress className=\"mx_PassphraseField_progress\" max={4} value={score} />;\n        },\n        deriveData: async ({ value }): Promise<ZxcvbnResult | null> => {\n            if (!value) return null;\n            const { scorePassword } = await import(\"../../../utils/PasswordScorer\");\n            return scorePassword(MatrixClientPeg.get(), value, this.props.userInputs);\n        },\n        rules: [\n            {\n                key: \"required\",\n                test: ({ value, allowEmpty }) => allowEmpty || !!value,\n                invalid: () => _t(this.props.labelEnterPassword),\n            },\n            {\n                key: \"complexity\",\n                test: async function ({ value }, complexity): Promise<boolean> {\n                    if (!value || !complexity) {\n                        return false;\n                    }\n                    const safe = complexity.score >= this.props.minScore;\n                    const allowUnsafe = SdkConfig.get(\"dangerously_allow_unsafe_and_insecure_passwords\");\n                    return allowUnsafe || safe;\n                },\n                valid: function (complexity) {\n                    // Unsafe passwords that are valid are only possible through a\n                    // configuration flag. We'll print some helper text to signal\n                    // to the user that their password is allowed, but unsafe.\n                    if (complexity && complexity.score >= this.props.minScore) {\n                        return _t(this.props.labelStrongPassword);\n                    }\n                    return _t(this.props.labelAllowedButUnsafe);\n                },\n                invalid: function (complexity) {\n                    if (!complexity) {\n                        return null;\n                    }\n                    const { feedback } = complexity;\n                    return feedback.warning || feedback.suggestions[0] || _t(\"auth|password_field_keep_going_prompt\");\n                },\n            },\n        ],\n        memoize: true,\n    });\n\n    public onValidate = async (fieldState: IFieldState): Promise<IValidationResult> => {\n        const result = await this.validate(fieldState);\n        if (this.props.onValidate) {\n            this.props.onValidate(result);\n        }\n        return result;\n    };\n\n    public render(): React.ReactNode {\n        return (\n            <Field\n                id={this.props.id}\n                autoFocus={this.props.autoFocus}\n                className={classNames(\"mx_PassphraseField\", this.props.className)}\n                ref={this.props.fieldRef}\n                type=\"password\"\n                autoComplete=\"new-password\"\n                label={_t(this.props.label)}\n                value={this.props.value}\n                onChange={this.props.onChange}\n                onValidate={this.onValidate}\n                tooltipAlignment={this.props.tooltipAlignment}\n            />\n        );\n    }\n}\n\nexport default PassphraseField;\n","/*\nCopyright 2024 New Vector Ltd.\nCopyright 2024 The Matrix.org Foundation C.I.C.\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport { logger } from \"matrix-js-sdk/src/logger\";\nimport { Crypto } from \"matrix-js-sdk/src/matrix\";\n\nimport { MatrixClientPeg } from \"../../MatrixClientPeg\";\n\n/**\n * Check if device dehydration is enabled.\n *\n * Note that this doesn't necessarily mean that device dehydration has been initialised\n * (yet) on this client; rather, it means that the server supports it, the crypto backend\n * supports it, and the application configuration suggests that it *should* be\n * initialised on this device.\n *\n * Dehydration can currently only be enabled by setting a flag in the .well-known file.\n */\nasync function deviceDehydrationEnabled(crypto: Crypto.CryptoApi | undefined): Promise<boolean> {\n    if (!crypto) {\n        return false;\n    }\n    if (!(await crypto.isDehydrationSupported())) {\n        return false;\n    }\n    const wellknown = await MatrixClientPeg.safeGet().waitForClientWellKnown();\n    return !!wellknown?.[\"org.matrix.msc3814\"];\n}\n\n/**\n * If dehydration is enabled (i.e., it is supported by the server and enabled in\n * the configuration), rehydrate a device (if available) and create\n * a new dehydrated device.\n *\n * @param createNewKey: force a new dehydration key to be created, even if one\n *   already exists.  This is used when we reset secret storage.\n */\nexport async function initialiseDehydration(createNewKey: boolean = false): Promise<void> {\n    const crypto = MatrixClientPeg.safeGet().getCrypto();\n    if (await deviceDehydrationEnabled(crypto)) {\n        logger.log(\"Device dehydration enabled\");\n        await crypto!.startDehydration(createNewKey);\n    }\n}\n","(function(a,b){if(\"function\"==typeof define&&define.amd)define([],b);else if(\"undefined\"!=typeof exports)b();else{b(),a.FileSaver={exports:{}}.exports}})(this,function(){\"use strict\";function b(a,b){return\"undefined\"==typeof b?b={autoBom:!1}:\"object\"!=typeof b&&(console.warn(\"Deprecated: Expected third argument to be a object\"),b={autoBom:!b}),b.autoBom&&/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(a.type)?new Blob([\"\\uFEFF\",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open(\"GET\",a),d.responseType=\"blob\",d.onload=function(){g(d.response,b,c)},d.onerror=function(){console.error(\"could not download file\")},d.send()}function d(a){var b=new XMLHttpRequest;b.open(\"HEAD\",a,!1);try{b.send()}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent(\"click\"))}catch(c){var b=document.createEvent(\"MouseEvents\");b.initMouseEvent(\"click\",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f=\"object\"==typeof window&&window.window===window?window:\"object\"==typeof self&&self.self===self?self:\"object\"==typeof global&&global.global===global?global:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||(\"object\"!=typeof window||window!==f?function(){}:\"download\"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement(\"a\");g=g||b.name||\"download\",j.download=g,j.rel=\"noopener\",\"string\"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target=\"_blank\")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:\"msSaveOrOpenBlob\"in navigator?function(f,g,h){if(g=g||f.name||\"download\",\"string\"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement(\"a\");i.href=f,i.target=\"_blank\",setTimeout(function(){e(i)})}}:function(b,d,e,g){if(g=g||open(\"\",\"_blank\"),g&&(g.document.title=g.document.body.innerText=\"downloading...\"),\"string\"==typeof b)return c(b,d,e);var h=\"application/octet-stream\"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\\/[\\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&\"undefined\"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,\"data:attachment/file;\"),g?g.location.href=a:location=a,g=null},k.readAsDataURL(b)}else{var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m)},4E4)}});f.saveAs=g.saveAs=g,\"undefined\"!=typeof module&&(module.exports=g)});\n\n//# sourceMappingURL=FileSaver.min.js.map"],"names":["Phase","CreateSecretStorageDialog","React","constructor","props","super","_defineProperty","createRef","e","this","setState","passPhraseKeySelected","target","value","async","state","SecureBackupSetupMethod","Key","recoveryKey","MatrixClientPeg","safeGet","getCrypto","createRecoveryKeyFromPassphrase","copied","downloaded","setPassphrase","phase","ShowKey","Passphrase","copyNode","recoveryKeyNode","current","blob","Blob","encodedPrivateKey","type","FileSaver","canUploadKeysWithPasswordOnly","accountPassword","makeRequest","identifier","user","getSafeUserId","password","dialogAesthetics","SSOAuthEntry","PHASE_PREAUTH","title","_t","body","continueText","continueKind","PHASE_POSTAUTH","finished","Modal","createDialog","InteractiveAuthDialog","matrixClient","aestheticsForStagePhases","LOGIN_TYPE","UNSTABLE_LOGIN_TYPE","confirmed","Error","crypto","forceReset","resetCrossSigning","backupInfo","Loading","getKeyBackupInfo","logger","error","LoadError","Storing","undefined","log","bootstrapSecretStorage","createSecretStorageKey","setupNewSecretStorage","bootstrapCrossSigning","authUploadDeviceSigningKeys","doBootstrapUIAuth","setupNewCrossSigning","resetKeyBackup","setupNewKeyBackup","initialiseDehydration","Stored","onFinished","ConfirmSkip","ChooseKeyPassphrase","preventDefault","passphraseField","validate","allowEmpty","valid","focus","focused","PassphraseConfirm","passPhrase","passPhraseConfirm","passPhraseValid","result","cli","getSecureBackupSetupMethods","includes","ModuleRunner","instance","extensions","cryptoSetup","accountPasswordCorrect","canSkip","isSecureBackupRequired","componentDidMount","keyFromCustomisations","initExtension","queryKeyUploadAuth","privateKey","uploadDeviceSigningKeys","MatrixError","data","flows","some","f","stages","length","renderOptionKey","StyledRadioButton","key","name","checked","onChange","onKeyPassphraseChange","outlined","className","renderOptionPassphrase","renderPhaseChooseKeyPassphrase","setupMethods","optionKey","optionPassphrase","onSubmit","onChooseKeyPassphraseFormSubmit","role","DialogButtons","primaryButton","onPrimaryButtonClick","onCancel","onCancelClick","hasCancel","renderPhasePassPhrase","onPassPhraseNextClick","PassphraseField","id","onPassPhraseChange","minScore","onValidate","onPassPhraseValidate","fieldRef","autoFocus","label","_td","labelEnterPassword","labelStrongPassword","labelAllowedButUnsafe","disabled","onClick","renderPhasePassPhraseConfirm","matchText","changeText","passPhraseMatch","startsWith","AccessibleButton","kind","onSetAgainClick","onPassPhraseConfirmNextClick","PassphraseConfirmField","onPassPhraseConfirmChange","labelRequired","labelInvalid","renderPhaseShowKey","_this$recoveryKey","continueButton","onShowKeyContinueClick","InlineSpinner","ref","onDownloadClick","downloadButton","copyButton","onCopyClick","renderBusyPhase","Spinner","renderStoredPhase","renderPhaseLoadError","onLoadRetryClick","renderPhaseSkipConfirm","onGoBackClick","titleForPhase","topComponent","CheckmarkIcon","classNames","mx_SuccessDialog","render","content","titleClass","BaseDialog","top","fixedWidth","PureComponent","args","withValidation","rules","test","invalid","fieldState","Field","autoComplete","tooltipAlignment","description","complexity","score","max","deriveData","scorePassword","get","userInputs","safe","SdkConfig","feedback","warning","suggestions","memoize","createNewKey","isDehydrationSupported","wellknown","waitForClientWellKnown","deviceDehydrationEnabled","startDehydration","b","a","autoBom","console","warn","c","d","XMLHttpRequest","open","responseType","onload","g","response","onerror","send","status","dispatchEvent","MouseEvent","document","createEvent","initMouseEvent","window","self","global","navigator","userAgent","saveAs","HTMLAnchorElement","prototype","h","i","URL","webkitURL","j","createElement","download","rel","href","origin","location","createObjectURL","setTimeout","revokeObjectURL","msSaveOrOpenBlob","innerText","HTMLElement","safari","FileReader","k","onloadend","replace","readAsDataURL","l","m","module","exports"],"sourceRoot":""}