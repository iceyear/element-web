{"version":3,"file":"bundles/21aae0d466bc7a53aaa1/7020.js","mappings":"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","sources":["webpack://element-web/./src/components/views/auth/LoginWithQRFlow.tsx","webpack://element-web/./src/components/views/auth/LoginWithQR.tsx"],"sourcesContent":["/*\nCopyright 2024 New Vector Ltd.\nCopyright 2022-2024 The Matrix.org Foundation C.I.C.\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport React, { createRef, ReactNode } from \"react\";\nimport { ClientRendezvousFailureReason, MSC4108FailureReason } from \"matrix-js-sdk/src/rendezvous\";\nimport ChevronLeftIcon from \"@vector-im/compound-design-tokens/assets/web/icons/chevron-left\";\nimport CheckCircleSolidIcon from \"@vector-im/compound-design-tokens/assets/web/icons/check-circle-solid\";\nimport ErrorIcon from \"@vector-im/compound-design-tokens/assets/web/icons/error\";\nimport { Heading, MFAInput, Text } from \"@vector-im/compound-web\";\nimport classNames from \"classnames\";\nimport { QrCodeIcon } from \"@vector-im/compound-design-tokens/assets/web/icons\";\n\nimport { _t } from \"../../../languageHandler\";\nimport AccessibleButton from \"../elements/AccessibleButton\";\nimport QRCode from \"../elements/QRCode\";\nimport Spinner from \"../elements/Spinner\";\nimport { Click, Phase } from \"./LoginWithQR-types\";\nimport SdkConfig from \"../../../SdkConfig\";\nimport { FailureReason, LoginWithQRFailureReason } from \"./LoginWithQR\";\nimport { ErrorMessage } from \"../../structures/ErrorMessage\";\n\ninterface Props {\n    phase: Phase;\n    code?: Uint8Array;\n    onClick(type: Click, checkCodeEntered?: string): Promise<void>;\n    failureReason?: FailureReason;\n    userCode?: string;\n    checkCode?: string;\n}\n\n/**\n * A component that implements the UI for sign in and E2EE set up with a QR code.\n *\n * This supports the unstable features of MSC4108\n */\nexport default class LoginWithQRFlow extends React.Component<Props> {\n    private checkCodeInput = createRef<HTMLInputElement>();\n\n    private handleClick = (type: Click): ((e: React.FormEvent) => Promise<void>) => {\n        return async (e: React.FormEvent): Promise<void> => {\n            e.preventDefault();\n            await this.props.onClick(type, type === Click.Approve ? this.checkCodeInput.current?.value : undefined);\n        };\n    };\n\n    private cancelButton = (): JSX.Element => (\n        <AccessibleButton data-testid=\"cancel-button\" kind=\"primary_outline\" onClick={this.handleClick(Click.Cancel)}>\n            {_t(\"action|cancel\")}\n        </AccessibleButton>\n    );\n\n    private simpleSpinner = (description?: string): JSX.Element => {\n        return (\n            <div className=\"mx_LoginWithQR_spinner\">\n                <div>\n                    <Spinner />\n                    {description && <p>{description}</p>}\n                </div>\n            </div>\n        );\n    };\n\n    public render(): React.ReactNode {\n        let main: JSX.Element | undefined;\n        let buttons: JSX.Element | undefined;\n        let backButton = true;\n        let className = \"\";\n\n        switch (this.props.phase) {\n            case Phase.Error: {\n                backButton = false;\n\n                let Icon = ErrorIcon;\n                let success: boolean | null = false;\n                let title: string | undefined;\n                let message: ReactNode | undefined;\n\n                switch (this.props.failureReason) {\n                    case MSC4108FailureReason.UnsupportedProtocol:\n                        title = _t(\"auth|qr_code_login|error_unsupported_protocol_title\");\n                        message = _t(\"auth|qr_code_login|error_unsupported_protocol\");\n                        break;\n\n                    case MSC4108FailureReason.UserCancelled:\n                        title = _t(\"auth|qr_code_login|error_user_cancelled_title\");\n                        message = _t(\"auth|qr_code_login|error_user_cancelled\");\n                        break;\n\n                    case MSC4108FailureReason.AuthorizationExpired:\n                    case ClientRendezvousFailureReason.Expired:\n                        title = _t(\"auth|qr_code_login|error_expired_title\");\n                        message = _t(\"auth|qr_code_login|error_expired\");\n                        break;\n\n                    case ClientRendezvousFailureReason.InsecureChannelDetected:\n                        title = _t(\"auth|qr_code_login|error_insecure_channel_detected_title\");\n                        message = (\n                            <>\n                                {_t(\"auth|qr_code_login|error_insecure_channel_detected\")}\n\n                                <Text as=\"h2\" size=\"lg\" weight=\"semibold\" data-testid=\"cancellation-message\">\n                                    {_t(\"auth|qr_code_login|error_insecure_channel_detected_instructions\")}\n                                </Text>\n                                <ol>\n                                    <li>{_t(\"auth|qr_code_login|error_insecure_channel_detected_instructions_1\")}</li>\n                                    <li>{_t(\"auth|qr_code_login|error_insecure_channel_detected_instructions_2\")}</li>\n                                    <li>{_t(\"auth|qr_code_login|error_insecure_channel_detected_instructions_3\")}</li>\n                                </ol>\n                            </>\n                        );\n                        break;\n\n                    case ClientRendezvousFailureReason.OtherDeviceAlreadySignedIn:\n                        success = true;\n                        Icon = CheckCircleSolidIcon;\n                        title = _t(\"auth|qr_code_login|error_other_device_already_signed_in_title\");\n                        message = _t(\"auth|qr_code_login|error_other_device_already_signed_in\");\n                        break;\n\n                    case ClientRendezvousFailureReason.UserDeclined:\n                        title = _t(\"auth|qr_code_login|error_user_declined_title\");\n                        message = _t(\"auth|qr_code_login|error_user_declined\");\n                        break;\n\n                    case LoginWithQRFailureReason.RateLimited:\n                        title = _t(\"error|something_went_wrong\");\n                        message = _t(\"auth|qr_code_login|error_rate_limited\");\n                        break;\n\n                    case ClientRendezvousFailureReason.ETagMissing:\n                        title = _t(\"error|something_went_wrong\");\n                        message = _t(\"auth|qr_code_login|error_etag_missing\");\n                        break;\n\n                    case ClientRendezvousFailureReason.HomeserverLacksSupport:\n                        success = null;\n                        Icon = QrCodeIcon;\n                        backButton = true;\n                        title = _t(\"auth|qr_code_login|unsupported_heading\");\n                        message = _t(\"auth|qr_code_login|unsupported_explainer\");\n                        break;\n\n                    case MSC4108FailureReason.DeviceAlreadyExists:\n                    case MSC4108FailureReason.DeviceNotFound:\n                    case MSC4108FailureReason.UnexpectedMessageReceived:\n                    case ClientRendezvousFailureReason.OtherDeviceNotSignedIn:\n                    case ClientRendezvousFailureReason.Unknown:\n                    default:\n                        title = _t(\"error|something_went_wrong\");\n                        message = _t(\"auth|qr_code_login|error_unexpected\");\n                        break;\n                }\n                className = \"mx_LoginWithQR_error\";\n                main = (\n                    <>\n                        <div\n                            className={classNames(\"mx_LoginWithQR_icon\", {\n                                \"mx_LoginWithQR_icon--critical\": success === false,\n                                \"mx_LoginWithQR_icon--success\": success === true,\n                            })}\n                        >\n                            <Icon width=\"32px\" height=\"32px\" />\n                        </div>\n                        <Heading as=\"h1\" size=\"sm\" weight=\"semibold\">\n                            {title}\n                        </Heading>\n                        {typeof message === \"object\" ? message : <p data-testid=\"cancellation-message\">{message}</p>}\n                    </>\n                );\n                break;\n            }\n            case Phase.OutOfBandConfirmation:\n                backButton = false;\n                main = (\n                    <>\n                        <Heading as=\"h1\" size=\"sm\" weight=\"semibold\">\n                            {_t(\"auth|qr_code_login|check_code_heading\")}\n                        </Heading>\n                        <Text size=\"md\">{_t(\"auth|qr_code_login|check_code_explainer\")}</Text>\n                        <label htmlFor=\"mx_LoginWithQR_checkCode\">\n                            {_t(\"auth|qr_code_login|check_code_input_label\")}\n                        </label>\n                        <MFAInput\n                            className=\"mx_LoginWithQR_checkCode_input mx_no_textinput\"\n                            ref={this.checkCodeInput}\n                            length={2}\n                            autoFocus\n                            id=\"mx_LoginWithQR_checkCode\"\n                            data-invalid={\n                                this.props.failureReason === LoginWithQRFailureReason.CheckCodeMismatch\n                                    ? true\n                                    : undefined\n                            }\n                        />\n                        <ErrorMessage\n                            message={\n                                this.props.failureReason === LoginWithQRFailureReason.CheckCodeMismatch\n                                    ? _t(\"auth|qr_code_login|check_code_mismatch\")\n                                    : null\n                            }\n                        />\n                    </>\n                );\n\n                buttons = (\n                    <>\n                        <AccessibleButton\n                            data-testid=\"approve-login-button\"\n                            kind=\"primary\"\n                            onClick={this.handleClick(Click.Approve)}\n                        >\n                            {_t(\"action|continue\")}\n                        </AccessibleButton>\n                        <AccessibleButton\n                            data-testid=\"decline-login-button\"\n                            kind=\"primary_outline\"\n                            onClick={this.handleClick(Click.Decline)}\n                        >\n                            {_t(\"action|cancel\")}\n                        </AccessibleButton>\n                    </>\n                );\n                break;\n            case Phase.ShowingQR:\n                if (this.props.code) {\n                    const data = this.props.code;\n\n                    main = (\n                        <>\n                            <Heading as=\"h1\" size=\"sm\" weight=\"semibold\">\n                                {_t(\"auth|qr_code_login|scan_code_instruction\")}\n                            </Heading>\n                            <div className=\"mx_LoginWithQR_qrWrapper\">\n                                <QRCode data={[{ data, mode: \"byte\" }]} className=\"mx_QRCode\" />\n                            </div>\n                            <ol>\n                                <li>\n                                    {_t(\"auth|qr_code_login|open_element_other_device\", {\n                                        brand: SdkConfig.get().brand,\n                                    })}\n                                </li>\n                                <li>\n                                    {_t(\"auth|qr_code_login|select_qr_code\", {\n                                        scanQRCode: <strong>{_t(\"auth|qr_code_login|scan_qr_code\")}</strong>,\n                                    })}\n                                </li>\n                                <li>{_t(\"auth|qr_code_login|point_the_camera\")}</li>\n                                <li>{_t(\"auth|qr_code_login|follow_remaining_instructions\")}</li>\n                            </ol>\n                        </>\n                    );\n                } else {\n                    main = this.simpleSpinner();\n                    buttons = this.cancelButton();\n                }\n                break;\n            case Phase.Loading:\n                main = this.simpleSpinner();\n                break;\n            case Phase.WaitingForDevice:\n                main = (\n                    <>\n                        {this.simpleSpinner(_t(\"auth|qr_code_login|waiting_for_device\"))}\n                        {this.props.userCode ? (\n                            <div>\n                                <p>{_t(\"auth|qr_code_login|security_code\")}</p>\n                                <p>{_t(\"auth|qr_code_login|security_code_prompt\")}</p>\n                                <p>{this.props.userCode}</p>\n                            </div>\n                        ) : null}\n                    </>\n                );\n                buttons = this.cancelButton();\n                break;\n            case Phase.Verifying:\n                main = this.simpleSpinner(_t(\"auth|qr_code_login|completing_setup\"));\n                break;\n        }\n\n        return (\n            <div data-testid=\"login-with-qr\" className={classNames(\"mx_LoginWithQR\", className)}>\n                {backButton ? (\n                    <div className=\"mx_LoginWithQR_heading\">\n                        <AccessibleButton\n                            data-testid=\"back-button\"\n                            className=\"mx_LoginWithQR_BackButton\"\n                            onClick={this.handleClick(Click.Back)}\n                            title=\"Back\"\n                        >\n                            <ChevronLeftIcon />\n                        </AccessibleButton>\n                        <div className=\"mx_LoginWithQR_breadcrumbs\">\n                            {_t(\"settings|sessions|title\")} / {_t(\"settings|sessions|sign_in_with_qr\")}\n                        </div>\n                    </div>\n                ) : null}\n                <div className=\"mx_LoginWithQR_main\">{main}</div>\n                <div className=\"mx_LoginWithQR_buttons\">{buttons}</div>\n            </div>\n        );\n    }\n}\n","/*\nCopyright 2024 New Vector Ltd.\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport React from \"react\";\nimport {\n    ClientRendezvousFailureReason,\n    MSC4108FailureReason,\n    MSC4108RendezvousSession,\n    MSC4108SecureChannel,\n    MSC4108SignInWithQR,\n    RendezvousError,\n    RendezvousFailureReason,\n    RendezvousIntent,\n} from \"matrix-js-sdk/src/rendezvous\";\nimport { logger } from \"matrix-js-sdk/src/logger\";\nimport { MatrixClient } from \"matrix-js-sdk/src/matrix\";\n\nimport { Click, Mode, Phase } from \"./LoginWithQR-types\";\nimport LoginWithQRFlow from \"./LoginWithQRFlow\";\n\ninterface IProps {\n    client: MatrixClient;\n    mode: Mode;\n    onFinished(...args: any): void;\n}\n\ninterface IState {\n    phase: Phase;\n    rendezvous?: MSC4108SignInWithQR;\n    mediaPermissionError?: boolean;\n    verificationUri?: string;\n    userCode?: string;\n    checkCode?: string;\n    failureReason?: FailureReason;\n    lastScannedCode?: Buffer;\n}\n\nexport enum LoginWithQRFailureReason {\n    RateLimited = \"rate_limited\",\n    CheckCodeMismatch = \"check_code_mismatch\",\n}\n\nexport type FailureReason = RendezvousFailureReason | LoginWithQRFailureReason;\n\n/**\n * A component that allows sign in and E2EE set up with a QR code.\n *\n * It implements `login.reciprocate` capabilities and showing QR codes.\n *\n * This uses the unstable feature of MSC4108: https://github.com/matrix-org/matrix-spec-proposals/pull/4108\n */\nexport default class LoginWithQR extends React.Component<IProps, IState> {\n    private finished = false;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            phase: Phase.Loading,\n        };\n    }\n\n    private get ourIntent(): RendezvousIntent {\n        return RendezvousIntent.RECIPROCATE_LOGIN_ON_EXISTING_DEVICE;\n    }\n\n    public componentDidMount(): void {\n        this.updateMode(this.props.mode).then(() => {});\n    }\n\n    public componentDidUpdate(prevProps: Readonly<IProps>): void {\n        if (prevProps.mode !== this.props.mode) {\n            this.updateMode(this.props.mode).then(() => {});\n        }\n    }\n\n    private async updateMode(mode: Mode): Promise<void> {\n        this.setState({ phase: Phase.Loading });\n        if (this.state.rendezvous) {\n            const rendezvous = this.state.rendezvous;\n            rendezvous.onFailure = undefined;\n            this.setState({ rendezvous: undefined });\n        }\n        if (mode === Mode.Show) {\n            await this.generateAndShowCode();\n        }\n    }\n\n    public componentWillUnmount(): void {\n        if (this.state.rendezvous && !this.finished) {\n            // eslint-disable-next-line react/no-direct-mutation-state\n            this.state.rendezvous.onFailure = undefined;\n            // calling cancel will call close() as well to clean up the resources\n            this.state.rendezvous.cancel(MSC4108FailureReason.UserCancelled);\n        }\n    }\n\n    private onFinished(success: boolean): void {\n        this.finished = true;\n        this.props.onFinished(success);\n    }\n\n    private generateAndShowCode = async (): Promise<void> => {\n        let rendezvous: MSC4108SignInWithQR;\n        try {\n            const fallbackRzServer = this.props.client?.getClientWellKnown()?.[\"io.element.rendezvous\"]?.server;\n\n            const transport = new MSC4108RendezvousSession({\n                onFailure: this.onFailure,\n                client: this.props.client,\n                fallbackRzServer,\n            });\n            await transport.send(\"\");\n            const channel = new MSC4108SecureChannel(transport, undefined, this.onFailure);\n            rendezvous = new MSC4108SignInWithQR(channel, false, this.props.client, this.onFailure);\n\n            await rendezvous.generateCode();\n            this.setState({\n                phase: Phase.ShowingQR,\n                rendezvous,\n                failureReason: undefined,\n            });\n        } catch (e) {\n            logger.error(\"Error whilst generating QR code\", e);\n            this.setState({ phase: Phase.Error, failureReason: ClientRendezvousFailureReason.HomeserverLacksSupport });\n            return;\n        }\n\n        try {\n            if (this.ourIntent === RendezvousIntent.RECIPROCATE_LOGIN_ON_EXISTING_DEVICE) {\n                // MSC4108-Flow: NewScanned\n                await rendezvous.negotiateProtocols();\n                const { verificationUri } = await rendezvous.deviceAuthorizationGrant();\n                this.setState({\n                    phase: Phase.OutOfBandConfirmation,\n                    verificationUri,\n                });\n            }\n\n            // we ask the user to confirm that the channel is secure\n        } catch (e: RendezvousError | unknown) {\n            logger.error(\"Error whilst approving login\", e);\n            await rendezvous?.cancel(\n                e instanceof RendezvousError ? (e.code as MSC4108FailureReason) : ClientRendezvousFailureReason.Unknown,\n            );\n        }\n    };\n\n    private approveLogin = async (checkCode: string | undefined): Promise<void> => {\n        if (!(this.state.rendezvous instanceof MSC4108SignInWithQR)) {\n            this.setState({ phase: Phase.Error, failureReason: ClientRendezvousFailureReason.Unknown });\n            throw new Error(\"Rendezvous not found\");\n        }\n\n        if (!this.state.lastScannedCode && this.state.rendezvous?.checkCode !== checkCode) {\n            this.setState({ failureReason: LoginWithQRFailureReason.CheckCodeMismatch });\n            return;\n        }\n\n        try {\n            if (this.ourIntent === RendezvousIntent.RECIPROCATE_LOGIN_ON_EXISTING_DEVICE) {\n                // MSC4108-Flow: NewScanned\n                this.setState({ phase: Phase.Loading });\n\n                if (this.state.verificationUri) {\n                    window.open(this.state.verificationUri, \"_blank\");\n                }\n\n                this.setState({ phase: Phase.WaitingForDevice });\n\n                // send secrets\n                await this.state.rendezvous.shareSecrets();\n\n                // done\n                this.onFinished(true);\n            } else {\n                this.setState({ phase: Phase.Error, failureReason: ClientRendezvousFailureReason.Unknown });\n                throw new Error(\"New device flows around OIDC are not yet implemented\");\n            }\n        } catch (e: RendezvousError | unknown) {\n            logger.error(\"Error whilst approving sign in\", e);\n            this.setState({\n                phase: Phase.Error,\n                failureReason: e instanceof RendezvousError ? e.code : ClientRendezvousFailureReason.Unknown,\n            });\n        }\n    };\n\n    private onFailure = (reason: RendezvousFailureReason): void => {\n        if (this.state.phase === Phase.Error) return; // Already in failed state\n        logger.info(`Rendezvous failed: ${reason}`);\n        this.setState({ phase: Phase.Error, failureReason: reason });\n    };\n\n    public reset(): void {\n        this.setState({\n            rendezvous: undefined,\n            verificationUri: undefined,\n            failureReason: undefined,\n            userCode: undefined,\n            checkCode: undefined,\n            lastScannedCode: undefined,\n            mediaPermissionError: false,\n        });\n    }\n\n    private onClick = async (type: Click, checkCode?: string): Promise<void> => {\n        switch (type) {\n            case Click.Cancel:\n                await this.state.rendezvous?.cancel(MSC4108FailureReason.UserCancelled);\n                this.reset();\n                this.onFinished(false);\n                break;\n            case Click.Approve:\n                await this.approveLogin(checkCode);\n                break;\n            case Click.Decline:\n                await this.state.rendezvous?.declineLoginOnExistingDevice();\n                this.reset();\n                this.onFinished(false);\n                break;\n            case Click.Back:\n                await this.state.rendezvous?.cancel(MSC4108FailureReason.UserCancelled);\n                this.onFinished(false);\n                break;\n            case Click.ShowQr:\n                await this.updateMode(Mode.Show);\n                break;\n        }\n    };\n\n    public render(): React.ReactNode {\n        return (\n            <LoginWithQRFlow\n                onClick={this.onClick}\n                phase={this.state.phase}\n                code={this.state.phase === Phase.ShowingQR ? this.state.rendezvous?.code : undefined}\n                failureReason={this.state.failureReason}\n                userCode={this.state.userCode}\n                checkCode={this.state.checkCode}\n            />\n        );\n    }\n}\n"],"names":["LoginWithQRFlow","React","constructor","args","_defineProperty","createRef","type","async","_this$checkCodeInput$","e","preventDefault","this","props","onClick","Click","Approve","checkCodeInput","current","value","undefined","AccessibleButton","kind","handleClick","Cancel","_t","description","className","Spinner","render","main","buttons","backButton","phase","Phase","Error","title","message","Icon","ErrorIcon","success","failureReason","MSC4108FailureReason","UnsupportedProtocol","UserCancelled","AuthorizationExpired","ClientRendezvousFailureReason","Expired","InsecureChannelDetected","Text","as","size","weight","OtherDeviceAlreadySignedIn","CheckCircleSolidIcon","UserDeclined","LoginWithQRFailureReason","RateLimited","ETagMissing","HomeserverLacksSupport","QrCodeIcon","DeviceAlreadyExists","DeviceNotFound","UnexpectedMessageReceived","OtherDeviceNotSignedIn","Unknown","classNames","width","height","Heading","OutOfBandConfirmation","htmlFor","MFAInput","ref","length","autoFocus","id","CheckCodeMismatch","ErrorMessage","Decline","ShowingQR","code","data","QRCode","mode","brand","SdkConfig","get","scanQRCode","simpleSpinner","cancelButton","Loading","WaitingForDevice","userCode","Verifying","Back","ChevronLeftIcon","LoginWithQR","super","rendezvous","_this$props$client","fallbackRzServer","client","getClientWellKnown","server","transport","MSC4108RendezvousSession","onFailure","send","channel","MSC4108SecureChannel","MSC4108SignInWithQR","generateCode","setState","logger","error","ourIntent","RendezvousIntent","RECIPROCATE_LOGIN_ON_EXISTING_DEVICE","negotiateProtocols","verificationUri","deviceAuthorizationGrant","_rendezvous","cancel","RendezvousError","_this$state$rendezvou","state","lastScannedCode","checkCode","window","open","shareSecrets","onFinished","reason","info","_this$state$rendezvou2","_this$state$rendezvou3","_this$state$rendezvou4","reset","approveLogin","declineLoginOnExistingDevice","ShowQr","updateMode","Mode","Show","componentDidMount","then","componentDidUpdate","prevProps","generateAndShowCode","componentWillUnmount","finished","mediaPermissionError","_this$state$rendezvou5"],"sourceRoot":""}