{"version":3,"file":"bundles/21aae0d466bc7a53aaa1/5484.js","mappings":"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","sources":["webpack://element-web/./node_modules/matrix-js-sdk/src/rust-crypto/RoomEncryptor.ts","webpack://element-web/./node_modules/matrix-js-sdk/src/rust-crypto/DehydratedDeviceManager.ts","webpack://element-web/./node_modules/matrix-js-sdk/src/rust-crypto/OutgoingRequestProcessor.ts","webpack://element-web/./node_modules/matrix-js-sdk/src/rust-crypto/KeyClaimManager.ts","webpack://element-web/./node_modules/matrix-js-sdk/src/rust-crypto/device-converter.ts","webpack://element-web/./node_modules/matrix-js-sdk/src/rust-crypto/CrossSigningIdentity.ts","webpack://element-web/./node_modules/matrix-js-sdk/src/rust-crypto/secret-storage.ts","webpack://element-web/./node_modules/matrix-js-sdk/src/rust-crypto/verification.ts","webpack://element-web/./node_modules/matrix-js-sdk/src/rust-crypto/backup.ts","webpack://element-web/./node_modules/matrix-js-sdk/src/rust-crypto/OutgoingRequestsManager.ts","webpack://element-web/./node_modules/matrix-js-sdk/src/rust-crypto/PerSessionKeyBackupDownloader.ts","webpack://element-web/./node_modules/matrix-js-sdk/src/rust-crypto/rust-crypto.ts","webpack://element-web/./node_modules/matrix-js-sdk/src/rust-crypto/libolm_migration.ts","webpack://element-web/./node_modules/matrix-js-sdk/src/rust-crypto/index.ts"],"sourcesContent":["/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport {\n    CollectStrategy,\n    EncryptionAlgorithm,\n    EncryptionSettings,\n    HistoryVisibility as RustHistoryVisibility,\n    OlmMachine,\n    RoomId,\n    ToDeviceRequest,\n    UserId,\n} from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport { EventType } from \"../@types/event.ts\";\nimport { IContent, MatrixEvent } from \"../models/event.ts\";\nimport { Room } from \"../models/room.ts\";\nimport { Logger, logger, LogSpan } from \"../logger.ts\";\nimport { KeyClaimManager } from \"./KeyClaimManager.ts\";\nimport { RoomMember } from \"../models/room-member.ts\";\nimport { HistoryVisibility } from \"../@types/partials.ts\";\nimport { OutgoingRequestsManager } from \"./OutgoingRequestsManager.ts\";\nimport { logDuration } from \"../utils.ts\";\nimport { KnownMembership } from \"../@types/membership.ts\";\nimport { DeviceIsolationMode, DeviceIsolationModeKind } from \"../crypto-api/index.ts\";\n\n/**\n * RoomEncryptor: responsible for encrypting messages to a given room\n *\n * @internal\n */\nexport class RoomEncryptor {\n    private readonly prefixedLogger: Logger;\n\n    /** whether the room members have been loaded and tracked for the first time */\n    private lazyLoadedMembersResolved = false;\n\n    /**\n     * Ensures that there is only one encryption operation at a time for that room.\n     *\n     * An encryption operation is either a {@link prepareForEncryption} or an {@link encryptEvent} call.\n     */\n    private currentEncryptionPromise: Promise<void> = Promise.resolve();\n\n    /**\n     * @param olmMachine - The rust-sdk's OlmMachine\n     * @param keyClaimManager - Our KeyClaimManager, which manages the queue of one-time-key claim requests\n     * @param outgoingRequestManager - The OutgoingRequestManager, which manages the queue of outgoing requests.\n     * @param room - The room we want to encrypt for\n     * @param encryptionSettings - body of the m.room.encryption event currently in force in this room\n     */\n    public constructor(\n        private readonly olmMachine: OlmMachine,\n        private readonly keyClaimManager: KeyClaimManager,\n        private readonly outgoingRequestManager: OutgoingRequestsManager,\n        private readonly room: Room,\n        private encryptionSettings: IContent,\n    ) {\n        this.prefixedLogger = logger.getChild(`[${room.roomId} encryption]`);\n\n        // start tracking devices for any users already known to be in this room.\n        // Do not load members here, would defeat lazy loading.\n        const members = room.getJoinedMembers();\n\n        // At this point just mark the known members as tracked, it might not be the full list of members\n        // because of lazy loading. This is fine, because we will get a member list update when sending a message for\n        // the first time, see `RoomEncryptor#ensureEncryptionSession`\n        this.olmMachine\n            .updateTrackedUsers(members.map((u) => new RustSdkCryptoJs.UserId(u.userId)))\n            .catch((e) => this.prefixedLogger.error(\"Error initializing tracked users\", e));\n    }\n\n    /**\n     * Handle a new `m.room.encryption` event in this room\n     *\n     * @param config - The content of the encryption event\n     */\n    public onCryptoEvent(config: IContent): void {\n        if (JSON.stringify(this.encryptionSettings) != JSON.stringify(config)) {\n            // This should currently be unreachable, since the Rust SDK will reject any attempts to change config.\n            throw new Error(\"Cannot reconfigure an active RoomEncryptor\");\n        }\n    }\n\n    /**\n     * Handle a new `m.room.member` event in this room\n     *\n     * @param member - new membership state\n     */\n    public onRoomMembership(member: RoomMember): void {\n        if (\n            member.membership == KnownMembership.Join ||\n            (member.membership == KnownMembership.Invite && this.room.shouldEncryptForInvitedMembers())\n        ) {\n            // make sure we are tracking the deviceList for this user\n            this.olmMachine.updateTrackedUsers([new UserId(member.userId)]).catch((e) => {\n                this.prefixedLogger.error(\"Unable to update tracked users\", e);\n            });\n        }\n\n        // TODO: handle leaves (including our own)\n    }\n\n    /**\n     * Prepare to encrypt events in this room.\n     *\n     * This ensures that we have a megolm session ready to use and that we have shared its key with all the devices\n     * in the room.\n     * @param globalBlacklistUnverifiedDevices - When `true`, and `deviceIsolationMode` is `AllDevicesIsolationMode`,\n     * will not send encrypted messages to unverified devices.\n     * Ignored when `deviceIsolationMode` is `OnlySignedDevicesIsolationMode`.\n     * @param deviceIsolationMode - The device isolation mode. See {@link DeviceIsolationMode}.\n     */\n    public async prepareForEncryption(\n        globalBlacklistUnverifiedDevices: boolean,\n        deviceIsolationMode: DeviceIsolationMode,\n    ): Promise<void> {\n        // We consider a prepareForEncryption as an encryption promise as it will potentially share keys\n        // even if it doesn't send an event.\n        // Usually this is called when the user starts typing, so we want to make sure we have keys ready when the\n        // message is finally sent.\n        // If `encryptEvent` is invoked before `prepareForEncryption` has completed, the `encryptEvent` call will wait for\n        // `prepareForEncryption` to complete before executing.\n        // The part where `encryptEvent` shares the room key will then usually be a no-op as it was already performed by `prepareForEncryption`.\n        await this.encryptEvent(null, globalBlacklistUnverifiedDevices, deviceIsolationMode);\n    }\n\n    /**\n     * Encrypt an event for this room, or prepare for encryption.\n     *\n     * This will ensure that we have a megolm session for this room, share it with the devices in the room, and\n     * then, if an event is provided, encrypt it using the session.\n     *\n     * @param event - Event to be encrypted, or null if only preparing for encryption (in which case we will pre-share the room key).\n     * @param globalBlacklistUnverifiedDevices - When `true`, and `deviceIsolationMode` is `AllDevicesIsolationMode`,\n     * will not send encrypted messages to unverified devices.\n     * Ignored when `deviceIsolationMode` is `OnlySignedDevicesIsolationMode`.\n     * @param deviceIsolationMode - The device isolation mode. See {@link DeviceIsolationMode}.\n     */\n    public encryptEvent(\n        event: MatrixEvent | null,\n        globalBlacklistUnverifiedDevices: boolean,\n        deviceIsolationMode: DeviceIsolationMode,\n    ): Promise<void> {\n        const logger = new LogSpan(this.prefixedLogger, event ? (event.getTxnId() ?? \"\") : \"prepareForEncryption\");\n        // Ensure order of encryption to avoid message ordering issues, as the scheduler only ensures\n        // events order after they have been encrypted.\n        const prom = this.currentEncryptionPromise\n            .catch(() => {\n                // Any errors in the previous call will have been reported already, so there is nothing to do here.\n                // we just throw away the error and start anew.\n            })\n            .then(async () => {\n                await logDuration(logger, \"ensureEncryptionSession\", async () => {\n                    await this.ensureEncryptionSession(logger, globalBlacklistUnverifiedDevices, deviceIsolationMode);\n                });\n                if (event) {\n                    await logDuration(logger, \"encryptEventInner\", async () => {\n                        await this.encryptEventInner(logger, event);\n                    });\n                }\n            });\n\n        this.currentEncryptionPromise = prom;\n        return prom;\n    }\n\n    /**\n     * Prepare to encrypt events in this room.\n     *\n     * This ensures that we have a megolm session ready to use and that we have shared its key with all the devices\n     * in the room.\n     *\n     * @param logger - a place to write diagnostics to\n     * @param globalBlacklistUnverifiedDevices - When `true`, and `deviceIsolationMode` is `AllDevicesIsolationMode`,\n     * will not send encrypted messages to unverified devices.\n     * Ignored when `deviceIsolationMode` is `OnlySignedDevicesIsolationMode`.\n     * @param deviceIsolationMode - The device isolation mode. See {@link DeviceIsolationMode}.\n     */\n    private async ensureEncryptionSession(\n        logger: LogSpan,\n        globalBlacklistUnverifiedDevices: boolean,\n        deviceIsolationMode: DeviceIsolationMode,\n    ): Promise<void> {\n        if (this.encryptionSettings.algorithm !== \"m.megolm.v1.aes-sha2\") {\n            throw new Error(\n                `Cannot encrypt in ${this.room.roomId} for unsupported algorithm '${this.encryptionSettings.algorithm}'`,\n            );\n        }\n        logger.debug(\"Starting encryption\");\n\n        const members = await this.room.getEncryptionTargetMembers();\n\n        // If this is the first time we are sending a message to the room, we may not yet have seen all the members\n        // (so the Crypto SDK might not have a device list for them). So, if this is the first time we are encrypting\n        // for this room, give the SDK the full list of members, to be on the safe side.\n        //\n        // This could end up being racy (if two calls to ensureEncryptionSession happen at the same time), but that's\n        // not a particular problem, since `OlmMachine.updateTrackedUsers` just adds any users that weren't already tracked.\n        if (!this.lazyLoadedMembersResolved) {\n            await logDuration(this.prefixedLogger, \"loadMembersIfNeeded: updateTrackedUsers\", async () => {\n                await this.olmMachine.updateTrackedUsers(members.map((u) => new RustSdkCryptoJs.UserId(u.userId)));\n            });\n            logger.debug(`Updated tracked users`);\n            this.lazyLoadedMembersResolved = true;\n\n            // Query keys in case we don't have them for newly tracked members.\n            // It's important after loading members for the first time, as likely most of them won't be\n            // known yet and will be unable to decrypt messages despite being in the room for long.\n            // This must be done before ensuring sessions. If not the devices of these users are not\n            // known yet and will not get the room key.\n            // We don't have API to only get the keys queries related to this member list, so we just\n            // process the pending requests from the olmMachine. (usually these are processed\n            // at the end of the sync, but we can't wait for that).\n            // XXX future improvement process only KeysQueryRequests for the users that have never been queried.\n            logger.debug(`Processing outgoing requests`);\n\n            await logDuration(this.prefixedLogger, \"doProcessOutgoingRequests\", async () => {\n                await this.outgoingRequestManager.doProcessOutgoingRequests();\n            });\n        } else {\n            // If members are already loaded it's less critical to await on key queries.\n            // We might still want to trigger a processOutgoingRequests here.\n            // The call to `ensureSessionsForUsers` below will wait a bit on in-flight key queries we are\n            // interested in. If a sync handling happens in the meantime, and some new members are added to the room\n            // or have new devices it would give us a chance to query them before sending.\n            // It's less critical due to the racy nature of this process.\n            logger.debug(`Processing outgoing requests in background`);\n            this.outgoingRequestManager.doProcessOutgoingRequests();\n        }\n\n        logger.debug(\n            `Encrypting for users (shouldEncryptForInvitedMembers: ${this.room.shouldEncryptForInvitedMembers()}):`,\n            members.map((u) => `${u.userId} (${u.membership})`),\n        );\n\n        const userList = members.map((u) => new UserId(u.userId));\n\n        await logDuration(this.prefixedLogger, \"ensureSessionsForUsers\", async () => {\n            await this.keyClaimManager.ensureSessionsForUsers(logger, userList);\n        });\n\n        const rustEncryptionSettings = new EncryptionSettings();\n        rustEncryptionSettings.historyVisibility = toRustHistoryVisibility(this.room.getHistoryVisibility());\n\n        // We only support megolm\n        rustEncryptionSettings.algorithm = EncryptionAlgorithm.MegolmV1AesSha2;\n\n        // We need to convert the rotation period from milliseconds to microseconds\n        // See https://spec.matrix.org/v1.8/client-server-api/#mroomencryption and\n        // https://matrix-org.github.io/matrix-rust-sdk-crypto-wasm/classes/EncryptionSettings.html#rotationPeriod\n        if (typeof this.encryptionSettings.rotation_period_ms === \"number\") {\n            rustEncryptionSettings.rotationPeriod = BigInt(this.encryptionSettings.rotation_period_ms * 1000);\n        }\n\n        if (typeof this.encryptionSettings.rotation_period_msgs === \"number\") {\n            rustEncryptionSettings.rotationPeriodMessages = BigInt(this.encryptionSettings.rotation_period_msgs);\n        }\n\n        switch (deviceIsolationMode.kind) {\n            case DeviceIsolationModeKind.AllDevicesIsolationMode:\n                {\n                    // When this.room.getBlacklistUnverifiedDevices() === null, the global settings should be used\n                    // See Room#getBlacklistUnverifiedDevices\n                    const onlyAllowTrustedDevices =\n                        this.room.getBlacklistUnverifiedDevices() ?? globalBlacklistUnverifiedDevices;\n                    rustEncryptionSettings.sharingStrategy = CollectStrategy.deviceBasedStrategy(\n                        onlyAllowTrustedDevices,\n                        deviceIsolationMode.errorOnVerifiedUserProblems,\n                    );\n                }\n                break;\n            case DeviceIsolationModeKind.OnlySignedDevicesIsolationMode:\n                rustEncryptionSettings.sharingStrategy = CollectStrategy.identityBasedStrategy();\n                break;\n        }\n\n        await logDuration(this.prefixedLogger, \"shareRoomKey\", async () => {\n            const shareMessages: ToDeviceRequest[] = await this.olmMachine.shareRoomKey(\n                new RoomId(this.room.roomId),\n                // safe to pass without cloning, as it's not reused here (before or after)\n                userList,\n                rustEncryptionSettings,\n            );\n            if (shareMessages) {\n                for (const m of shareMessages) {\n                    await this.outgoingRequestManager.outgoingRequestProcessor.makeOutgoingRequest(m);\n                }\n            }\n        });\n    }\n\n    /**\n     * Discard any existing group session for this room\n     */\n    public async forceDiscardSession(): Promise<void> {\n        const r = await this.olmMachine.invalidateGroupSession(new RoomId(this.room.roomId));\n        if (r) {\n            this.prefixedLogger.info(\"Discarded existing group session\");\n        }\n    }\n\n    private async encryptEventInner(logger: LogSpan, event: MatrixEvent): Promise<void> {\n        logger.debug(\"Encrypting actual message content\");\n        const encryptedContent = await this.olmMachine.encryptRoomEvent(\n            new RoomId(this.room.roomId),\n            event.getType(),\n            JSON.stringify(event.getContent()),\n        );\n\n        event.makeEncrypted(\n            EventType.RoomMessageEncrypted,\n            JSON.parse(encryptedContent),\n            this.olmMachine.identityKeys.curve25519.toBase64(),\n            this.olmMachine.identityKeys.ed25519.toBase64(),\n        );\n\n        logger.debug(\"Encrypted event successfully\");\n    }\n}\n\n/**\n * Convert a HistoryVisibility to a RustHistoryVisibility\n * @param visibility - HistoryVisibility enum\n * @returns a RustHistoryVisibility enum\n */\nexport function toRustHistoryVisibility(visibility: HistoryVisibility): RustHistoryVisibility {\n    switch (visibility) {\n        case HistoryVisibility.Invited:\n            return RustHistoryVisibility.Invited;\n        case HistoryVisibility.Joined:\n            return RustHistoryVisibility.Joined;\n        case HistoryVisibility.Shared:\n            return RustHistoryVisibility.Shared;\n        case HistoryVisibility.WorldReadable:\n            return RustHistoryVisibility.WorldReadable;\n    }\n}\n","/*\nCopyright 2024 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport { OutgoingRequestProcessor } from \"./OutgoingRequestProcessor.ts\";\nimport { encodeUri } from \"../utils.ts\";\nimport { IHttpOpts, MatrixError, MatrixHttpApi, Method } from \"../http-api/index.ts\";\nimport { IToDeviceEvent } from \"../sync-accumulator.ts\";\nimport { ServerSideSecretStorage } from \"../secret-storage.ts\";\nimport { decodeBase64, encodeUnpaddedBase64 } from \"../base64.ts\";\nimport { Logger } from \"../logger.ts\";\n\n/**\n * The response body of `GET /_matrix/client/unstable/org.matrix.msc3814.v1/dehydrated_device`.\n */\ninterface DehydratedDeviceResp {\n    device_id: string;\n    device_data: {\n        algorithm: string;\n    };\n}\n/**\n * The response body of `POST /_matrix/client/unstable/org.matrix.msc3814.v1/dehydrated_device/events`.\n */\ninterface DehydratedDeviceEventsResp {\n    events: IToDeviceEvent[];\n    next_batch: string;\n}\n\n/**\n * The unstable URL prefix for dehydrated device endpoints\n */\nexport const UnstablePrefix = \"/_matrix/client/unstable/org.matrix.msc3814.v1\";\n/**\n * The name used for the dehydration key in Secret Storage\n */\nconst SECRET_STORAGE_NAME = \"org.matrix.msc3814\";\n\n/**\n * The interval between creating dehydrated devices. (one week)\n */\nconst DEHYDRATION_INTERVAL = 7 * 24 * 60 * 60 * 1000;\n\n/**\n * Manages dehydrated devices\n *\n * We have one of these per `RustCrypto`.  It's responsible for\n *\n * * determining server support for dehydrated devices\n * * creating new dehydrated devices when requested, including periodically\n *   replacing the dehydrated device with a new one\n * * rehydrating a device when requested, and when present\n *\n * @internal\n */\nexport class DehydratedDeviceManager {\n    /** the secret key used for dehydrating and rehydrating */\n    private key?: Uint8Array;\n    /** the ID of the interval for periodically replacing the dehydrated device */\n    private intervalId?: ReturnType<typeof setInterval>;\n\n    public constructor(\n        private readonly logger: Logger,\n        private readonly olmMachine: RustSdkCryptoJs.OlmMachine,\n        private readonly http: MatrixHttpApi<IHttpOpts & { onlyData: true }>,\n        private readonly outgoingRequestProcessor: OutgoingRequestProcessor,\n        private readonly secretStorage: ServerSideSecretStorage,\n    ) {}\n\n    /**\n     * Return whether the server supports dehydrated devices.\n     */\n    public async isSupported(): Promise<boolean> {\n        // call the endpoint to get a dehydrated device.  If it returns an\n        // M_UNRECOGNIZED error, then dehydration is unsupported.  If it returns\n        // a successful response, or an M_NOT_FOUND, then dehydration is supported.\n        // Any other exceptions are passed through.\n        try {\n            await this.http.authedRequest<DehydratedDeviceResp>(\n                Method.Get,\n                \"/dehydrated_device\",\n                undefined,\n                undefined,\n                {\n                    prefix: UnstablePrefix,\n                },\n            );\n        } catch (error) {\n            const err = error as MatrixError;\n            if (err.errcode === \"M_UNRECOGNIZED\") {\n                return false;\n            } else if (err.errcode === \"M_NOT_FOUND\") {\n                return true;\n            }\n            throw error;\n        }\n        return true;\n    }\n\n    /**\n     * Start using device dehydration.\n     *\n     * - Rehydrates a dehydrated device, if one is available.\n     * - Creates a new dehydration key, if necessary, and stores it in Secret\n     *   Storage.\n     *   - If `createNewKey` is set to true, always creates a new key.\n     *   - If a dehydration key is not available, creates a new one.\n     * - Creates a new dehydrated device, and schedules periodically creating\n     *   new dehydrated devices.\n     *\n     * @param createNewKey - whether to force creation of a new dehydration key.\n     *   This can be used, for example, if Secret Storage is being reset.\n     */\n    public async start(createNewKey?: boolean): Promise<void> {\n        this.stop();\n        try {\n            await this.rehydrateDeviceIfAvailable();\n        } catch (e) {\n            // If rehydration fails, there isn't much we can do about it.  Log\n            // the error, and create a new device.\n            this.logger.info(\"dehydration: Error rehydrating device:\", e);\n        }\n        if (createNewKey) {\n            await this.resetKey();\n        }\n        await this.scheduleDeviceDehydration();\n    }\n\n    /**\n     * Return whether the dehydration key is stored in Secret Storage.\n     */\n    public async isKeyStored(): Promise<boolean> {\n        return Boolean(await this.secretStorage.isStored(SECRET_STORAGE_NAME));\n    }\n\n    /**\n     * Reset the dehydration key.\n     *\n     * Creates a new key and stores it in secret storage.\n     */\n    public async resetKey(): Promise<void> {\n        const key = new Uint8Array(32);\n        globalThis.crypto.getRandomValues(key);\n        await this.secretStorage.store(SECRET_STORAGE_NAME, encodeUnpaddedBase64(key));\n        this.key = key;\n    }\n\n    /**\n     * Get and cache the encryption key from secret storage.\n     *\n     * If `create` is `true`, creates a new key if no existing key is present.\n     *\n     * @returns the key, if available, or `null` if no key is available\n     */\n    private async getKey(create: boolean): Promise<Uint8Array | null> {\n        if (this.key === undefined) {\n            const keyB64 = await this.secretStorage.get(SECRET_STORAGE_NAME);\n            if (keyB64 === undefined) {\n                if (!create) {\n                    return null;\n                }\n                await this.resetKey();\n            } else {\n                this.key = decodeBase64(keyB64);\n            }\n        }\n        return this.key!;\n    }\n\n    /**\n     * Rehydrate the dehydrated device stored on the server.\n     *\n     * Checks if there is a dehydrated device on the server.  If so, rehydrates\n     * the device and processes the to-device events.\n     *\n     * Returns whether or not a dehydrated device was found.\n     */\n    public async rehydrateDeviceIfAvailable(): Promise<boolean> {\n        const key = await this.getKey(false);\n        if (!key) {\n            return false;\n        }\n\n        let dehydratedDeviceResp;\n        try {\n            dehydratedDeviceResp = await this.http.authedRequest<DehydratedDeviceResp>(\n                Method.Get,\n                \"/dehydrated_device\",\n                undefined,\n                undefined,\n                {\n                    prefix: UnstablePrefix,\n                },\n            );\n        } catch (error) {\n            const err = error as MatrixError;\n            // We ignore M_NOT_FOUND (there is no dehydrated device, so nothing\n            // us to do) and M_UNRECOGNIZED (the server does not understand the\n            // endpoint).  We pass through any other errors.\n            if (err.errcode === \"M_NOT_FOUND\" || err.errcode === \"M_UNRECOGNIZED\") {\n                this.logger.info(\"dehydration: No dehydrated device\");\n                return false;\n            }\n            throw err;\n        }\n\n        this.logger.info(\"dehydration: dehydrated device found\");\n\n        const rehydratedDevice = await this.olmMachine\n            .dehydratedDevices()\n            .rehydrate(\n                key,\n                new RustSdkCryptoJs.DeviceId(dehydratedDeviceResp.device_id),\n                JSON.stringify(dehydratedDeviceResp.device_data),\n            );\n\n        this.logger.info(\"dehydration: device rehydrated\");\n\n        let nextBatch: string | undefined = undefined;\n        let toDeviceCount = 0;\n        let roomKeyCount = 0;\n        const path = encodeUri(\"/dehydrated_device/$device_id/events\", {\n            $device_id: dehydratedDeviceResp.device_id,\n        });\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            const eventResp: DehydratedDeviceEventsResp = await this.http.authedRequest<DehydratedDeviceEventsResp>(\n                Method.Post,\n                path,\n                undefined,\n                nextBatch ? { next_batch: nextBatch } : {},\n                {\n                    prefix: UnstablePrefix,\n                },\n            );\n\n            if (eventResp.events.length === 0) {\n                break;\n            }\n            toDeviceCount += eventResp.events.length;\n            nextBatch = eventResp.next_batch;\n            const roomKeyInfos = await rehydratedDevice.receiveEvents(JSON.stringify(eventResp.events));\n            roomKeyCount += roomKeyInfos.length;\n        }\n        this.logger.info(`dehydration: received ${roomKeyCount} room keys from ${toDeviceCount} to-device events`);\n\n        return true;\n    }\n\n    /**\n     * Creates and uploads a new dehydrated device.\n     *\n     * Creates and stores a new key in secret storage if none is available.\n     */\n    public async createAndUploadDehydratedDevice(): Promise<void> {\n        const key = (await this.getKey(true))!;\n\n        const dehydratedDevice = await this.olmMachine.dehydratedDevices().create();\n        const request = await dehydratedDevice.keysForUpload(\"Dehydrated device\", key);\n\n        await this.outgoingRequestProcessor.makeOutgoingRequest(request);\n\n        this.logger.info(\"dehydration: uploaded device\");\n    }\n\n    /**\n     * Schedule periodic creation of dehydrated devices.\n     */\n    public async scheduleDeviceDehydration(): Promise<void> {\n        // cancel any previously-scheduled tasks\n        this.stop();\n\n        await this.createAndUploadDehydratedDevice();\n        this.intervalId = setInterval(() => {\n            this.createAndUploadDehydratedDevice().catch((error) => {\n                this.logger.error(\"Error creating dehydrated device:\", error);\n            });\n        }, DEHYDRATION_INTERVAL);\n    }\n\n    /**\n     * Stop the dehydrated device manager.\n     *\n     * Cancels any scheduled dehydration tasks.\n     */\n    public stop(): void {\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n            this.intervalId = undefined;\n        }\n    }\n}\n","/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport {\n    KeysBackupRequest,\n    KeysClaimRequest,\n    KeysQueryRequest,\n    KeysUploadRequest,\n    OlmMachine,\n    PutDehydratedDeviceRequest,\n    RoomMessageRequest,\n    SignatureUploadRequest,\n    ToDeviceRequest,\n    UploadSigningKeysRequest,\n} from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport { logger } from \"../logger.ts\";\nimport { calculateRetryBackoff, IHttpOpts, MatrixHttpApi, Method } from \"../http-api/index.ts\";\nimport { logDuration, QueryDict, sleep } from \"../utils.ts\";\nimport { AuthDict, UIAuthCallback } from \"../interactive-auth.ts\";\nimport { UIAResponse } from \"../@types/uia.ts\";\nimport { ToDeviceMessageId } from \"../@types/event.ts\";\nimport { UnstablePrefix as DehydrationUnstablePrefix } from \"./DehydratedDeviceManager.ts\";\n\n/**\n * Common interface for all the request types returned by `OlmMachine.outgoingRequests`.\n *\n * @internal\n */\nexport interface OutgoingRequest {\n    readonly id: string | undefined;\n    readonly type: number;\n}\n\n/**\n * OutgoingRequestManager: turns `OutgoingRequest`s from the rust sdk into HTTP requests\n *\n * We have one of these per `RustCrypto` (and hence per `MatrixClient`), not that it does anything terribly complicated.\n * It's responsible for:\n *\n *   * holding the reference to the `MatrixHttpApi`\n *   * turning `OutgoingRequest`s from the rust backend into HTTP requests, and sending them\n *   * sending the results of such requests back to the rust backend.\n *\n * @internal\n */\nexport class OutgoingRequestProcessor {\n    public constructor(\n        private readonly olmMachine: OlmMachine,\n        private readonly http: MatrixHttpApi<IHttpOpts & { onlyData: true }>,\n    ) {}\n\n    public async makeOutgoingRequest<T>(\n        msg: OutgoingRequest | UploadSigningKeysRequest | PutDehydratedDeviceRequest,\n        uiaCallback?: UIAuthCallback<T>,\n    ): Promise<void> {\n        let resp: string;\n\n        /* refer https://docs.rs/matrix-sdk-crypto/0.6.0/matrix_sdk_crypto/requests/enum.OutgoingRequests.html\n         * for the complete list of request types\n         */\n        if (msg instanceof KeysUploadRequest) {\n            resp = await this.requestWithRetry(Method.Post, \"/_matrix/client/v3/keys/upload\", {}, msg.body);\n        } else if (msg instanceof KeysQueryRequest) {\n            resp = await this.requestWithRetry(Method.Post, \"/_matrix/client/v3/keys/query\", {}, msg.body);\n        } else if (msg instanceof KeysClaimRequest) {\n            resp = await this.requestWithRetry(Method.Post, \"/_matrix/client/v3/keys/claim\", {}, msg.body);\n        } else if (msg instanceof SignatureUploadRequest) {\n            resp = await this.requestWithRetry(Method.Post, \"/_matrix/client/v3/keys/signatures/upload\", {}, msg.body);\n        } else if (msg instanceof KeysBackupRequest) {\n            resp = await this.requestWithRetry(\n                Method.Put,\n                \"/_matrix/client/v3/room_keys/keys\",\n                { version: msg.version },\n                msg.body,\n            );\n        } else if (msg instanceof ToDeviceRequest) {\n            resp = await this.sendToDeviceRequest(msg);\n        } else if (msg instanceof RoomMessageRequest) {\n            const path =\n                `/_matrix/client/v3/rooms/${encodeURIComponent(msg.room_id)}/send/` +\n                `${encodeURIComponent(msg.event_type)}/${encodeURIComponent(msg.txn_id)}`;\n            resp = await this.requestWithRetry(Method.Put, path, {}, msg.body);\n        } else if (msg instanceof UploadSigningKeysRequest) {\n            await this.makeRequestWithUIA(\n                Method.Post,\n                \"/_matrix/client/v3/keys/device_signing/upload\",\n                {},\n                msg.body,\n                uiaCallback,\n            );\n            // SigningKeysUploadRequest does not implement OutgoingRequest and does not need to be marked as sent.\n            return;\n        } else if (msg instanceof PutDehydratedDeviceRequest) {\n            const path = DehydrationUnstablePrefix + \"/dehydrated_device\";\n            await this.rawJsonRequest(Method.Put, path, {}, msg.body);\n            // PutDehydratedDeviceRequest does not implement OutgoingRequest and does not need to be marked as sent.\n            return;\n        } else {\n            logger.warn(\"Unsupported outgoing message\", Object.getPrototypeOf(msg));\n            resp = \"\";\n        }\n\n        if (msg.id) {\n            try {\n                await logDuration(logger, `Mark Request as sent ${msg.type}`, async () => {\n                    await this.olmMachine.markRequestAsSent(msg.id!, msg.type, resp);\n                });\n            } catch (e) {\n                // Ignore errors which are caused by the olmMachine having been freed. The exact error message depends\n                // on whether we are using a release or develop build of rust-sdk-crypto-wasm.\n                if (\n                    e instanceof Error &&\n                    (e.message === \"Attempt to use a moved value\" || e.message === \"null pointer passed to rust\")\n                ) {\n                    logger.log(`Ignoring error '${e.message}': client is likely shutting down`);\n                } else {\n                    throw e;\n                }\n            }\n        } else {\n            logger.trace(`Outgoing request type:${msg.type} does not have an ID`);\n        }\n    }\n\n    /**\n     * Send the HTTP request for a `ToDeviceRequest`\n     *\n     * @param request - request to send\n     * @returns JSON-serialized body of the response, if successful\n     */\n    private async sendToDeviceRequest(request: ToDeviceRequest): Promise<string> {\n        // a bit of extra logging, to help trace to-device messages through the system\n        const parsedBody: { messages: Record<string, Record<string, Record<string, any>>> } = JSON.parse(request.body);\n\n        const messageList = [];\n        for (const [userId, perUserMessages] of Object.entries(parsedBody.messages)) {\n            for (const [deviceId, message] of Object.entries(perUserMessages)) {\n                messageList.push(`${userId}/${deviceId} (msgid ${message[ToDeviceMessageId]})`);\n            }\n        }\n\n        logger.info(\n            `Sending batch of to-device messages. type=${request.event_type} txnid=${request.txn_id}`,\n            messageList,\n        );\n\n        const path =\n            `/_matrix/client/v3/sendToDevice/${encodeURIComponent(request.event_type)}/` +\n            encodeURIComponent(request.txn_id);\n        return await this.requestWithRetry(Method.Put, path, {}, request.body);\n    }\n\n    private async makeRequestWithUIA<T>(\n        method: Method,\n        path: string,\n        queryParams: QueryDict,\n        body: string,\n        uiaCallback: UIAuthCallback<T> | undefined,\n    ): Promise<string> {\n        if (!uiaCallback) {\n            return await this.requestWithRetry(method, path, queryParams, body);\n        }\n\n        const parsedBody = JSON.parse(body);\n        const makeRequest = async (auth: AuthDict | null): Promise<UIAResponse<T>> => {\n            const newBody: Record<string, any> = {\n                ...parsedBody,\n            };\n            if (auth !== null) {\n                newBody.auth = auth;\n            }\n            const resp = await this.requestWithRetry(method, path, queryParams, JSON.stringify(newBody));\n            return JSON.parse(resp) as T;\n        };\n\n        const resp = await uiaCallback(makeRequest);\n        return JSON.stringify(resp);\n    }\n\n    private async requestWithRetry(\n        method: Method,\n        path: string,\n        queryParams: QueryDict,\n        body: string,\n    ): Promise<string> {\n        let currentRetryCount = 0;\n\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            try {\n                return await this.rawJsonRequest(method, path, queryParams, body);\n            } catch (e) {\n                currentRetryCount++;\n                const backoff = calculateRetryBackoff(e, currentRetryCount, true);\n                if (backoff < 0) {\n                    // Max number of retries reached, or error is not retryable. rethrow the error\n                    throw e;\n                }\n                // wait for the specified time and then retry the request\n                await sleep(backoff);\n            }\n        }\n    }\n\n    private async rawJsonRequest(method: Method, path: string, queryParams: QueryDict, body: string): Promise<string> {\n        const opts = {\n            // inhibit the JSON stringification and parsing within HttpApi.\n            json: false,\n\n            // nevertheless, we are sending, and accept, JSON.\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n            },\n\n            // we use the full prefix\n            prefix: \"\",\n        };\n\n        return await this.http.authedRequest<string>(method, path, queryParams, body, opts);\n    }\n}\n","/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { OlmMachine, UserId } from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport { OutgoingRequestProcessor } from \"./OutgoingRequestProcessor.ts\";\nimport { LogSpan } from \"../logger.ts\";\n\n/**\n * KeyClaimManager: linearises calls to OlmMachine.getMissingSessions to avoid races\n *\n * We have one of these per `RustCrypto` (and hence per `MatrixClient`).\n *\n * @internal\n */\nexport class KeyClaimManager {\n    private currentClaimPromise: Promise<void>;\n    private stopped = false;\n\n    public constructor(\n        private readonly olmMachine: OlmMachine,\n        private readonly outgoingRequestProcessor: OutgoingRequestProcessor,\n    ) {\n        this.currentClaimPromise = Promise.resolve();\n    }\n\n    /**\n     * Tell the KeyClaimManager to immediately stop processing requests.\n     *\n     * Any further calls, and any still in the queue, will fail with an error.\n     */\n    public stop(): void {\n        this.stopped = true;\n    }\n\n    /**\n     * Given a list of users, attempt to ensure that we have Olm Sessions active with each of their devices\n     *\n     * If we don't have an active olm session, we will claim a one-time key and start one.\n     * @param logger - logger to use\n     * @param userList - list of userIDs to claim\n     */\n    public ensureSessionsForUsers(logger: LogSpan, userList: Array<UserId>): Promise<void> {\n        // The Rust-SDK requires that we only have one getMissingSessions process in flight at once. This little dance\n        // ensures that, by only having one call to ensureSessionsForUsersInner active at once (and making them\n        // queue up in order).\n        const prom = this.currentClaimPromise\n            .catch(() => {\n                // any errors in the previous claim will have been reported already, so there is nothing to do here.\n                // we just throw away the error and start anew.\n            })\n            .then(() => this.ensureSessionsForUsersInner(logger, userList));\n        this.currentClaimPromise = prom;\n        return prom;\n    }\n\n    private async ensureSessionsForUsersInner(logger: LogSpan, userList: Array<UserId>): Promise<void> {\n        // bail out quickly if we've been stopped.\n        if (this.stopped) {\n            throw new Error(`Cannot ensure Olm sessions: shutting down`);\n        }\n        logger.info(\"Checking for missing Olm sessions\");\n        // By passing the userId array to rust we transfer ownership of the items to rust, causing\n        // them to be invalidated on the JS side as soon as the method is called.\n        // As we haven't created the `userList` let's clone the users, to not break the caller from re-using it.\n        const claimRequest = await this.olmMachine.getMissingSessions(userList.map((u) => u.clone()));\n        if (claimRequest) {\n            logger.info(\"Making /keys/claim request\");\n            await this.outgoingRequestProcessor.makeOutgoingRequest(claimRequest);\n        }\n        logger.info(\"Olm sessions prepared\");\n    }\n}\n","/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport { Device, DeviceVerification } from \"../models/device.ts\";\nimport { DeviceKeys } from \"../client.ts\";\n\n/**\n * Convert a {@link RustSdkCryptoJs.Device} to a {@link Device}\n * @param device - Rust Sdk device\n * @param userId - owner of the device\n *\n * @internal\n */\nexport function rustDeviceToJsDevice(device: RustSdkCryptoJs.Device, userId: RustSdkCryptoJs.UserId): Device {\n    // Copy rust device keys to Device.keys\n    const keys = new Map<string, string>();\n    for (const [keyId, key] of device.keys.entries()) {\n        keys.set(keyId.toString(), key.toBase64());\n    }\n\n    // Compute verified from device state\n    let verified: DeviceVerification = DeviceVerification.Unverified;\n    if (device.isBlacklisted()) {\n        verified = DeviceVerification.Blocked;\n    } else if (device.isVerified()) {\n        verified = DeviceVerification.Verified;\n    }\n\n    // Convert rust signatures to Device.signatures\n    const signatures = new Map<string, Map<string, string>>();\n    const mayBeSignatureMap: Map<string, RustSdkCryptoJs.MaybeSignature> | undefined = device.signatures.get(userId);\n    if (mayBeSignatureMap) {\n        const convertedSignatures = new Map<string, string>();\n        // Convert maybeSignatures map to a Map<string, string>\n        for (const [key, value] of mayBeSignatureMap.entries()) {\n            if (value.isValid() && value.signature) {\n                convertedSignatures.set(key, value.signature.toBase64());\n            }\n        }\n\n        signatures.set(userId.toString(), convertedSignatures);\n    }\n\n    // Convert rust algorithms to algorithms\n    const rustAlgorithms: RustSdkCryptoJs.EncryptionAlgorithm[] = device.algorithms;\n    // Use set to ensure that algorithms are not duplicated\n    const algorithms = new Set<string>();\n    rustAlgorithms.forEach((algorithm) => {\n        switch (algorithm) {\n            case RustSdkCryptoJs.EncryptionAlgorithm.MegolmV1AesSha2:\n                algorithms.add(\"m.megolm.v1.aes-sha2\");\n                break;\n            case RustSdkCryptoJs.EncryptionAlgorithm.OlmV1Curve25519AesSha2:\n            default:\n                algorithms.add(\"m.olm.v1.curve25519-aes-sha2\");\n                break;\n        }\n    });\n\n    return new Device({\n        deviceId: device.deviceId.toString(),\n        userId: userId.toString(),\n        keys,\n        algorithms: Array.from(algorithms),\n        verified,\n        signatures,\n        displayName: device.displayName,\n        dehydrated: device.isDehydrated,\n    });\n}\n\n/**\n * Convert {@link DeviceKeys}  from `/keys/query` request to a `Map<string, Device>`\n * @param deviceKeys - Device keys object to convert\n *\n * @internal\n */\nexport function deviceKeysToDeviceMap(deviceKeys: DeviceKeys): Map<string, Device> {\n    return new Map(\n        Object.entries(deviceKeys).map(([deviceId, device]) => [deviceId, downloadDeviceToJsDevice(device)]),\n    );\n}\n\n// Device from `/keys/query` request\ntype QueryDevice = DeviceKeys[keyof DeviceKeys];\n\n/**\n * Convert `/keys/query` {@link QueryDevice} device to {@link Device}\n * @param device - Device from `/keys/query` request\n *\n * @internal\n */\nexport function downloadDeviceToJsDevice(device: QueryDevice): Device {\n    const keys = new Map(Object.entries(device.keys));\n    const displayName = device.unsigned?.device_display_name;\n\n    const signatures = new Map<string, Map<string, string>>();\n    if (device.signatures) {\n        for (const userId in device.signatures) {\n            signatures.set(userId, new Map(Object.entries(device.signatures[userId])));\n        }\n    }\n\n    return new Device({\n        deviceId: device.device_id,\n        userId: device.user_id,\n        keys,\n        algorithms: device.algorithms,\n        verified: DeviceVerification.Unverified,\n        signatures,\n        displayName,\n    });\n}\n","/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { OlmMachine, CrossSigningStatus, CrossSigningBootstrapRequests } from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport { BootstrapCrossSigningOpts } from \"../crypto-api/index.ts\";\nimport { logger } from \"../logger.ts\";\nimport { OutgoingRequestProcessor } from \"./OutgoingRequestProcessor.ts\";\nimport { UIAuthCallback } from \"../interactive-auth.ts\";\nimport { ServerSideSecretStorage } from \"../secret-storage.ts\";\n\n/** Manages the cross-signing keys for our own user.\n *\n * @internal\n */\nexport class CrossSigningIdentity {\n    public constructor(\n        private readonly olmMachine: OlmMachine,\n        private readonly outgoingRequestProcessor: OutgoingRequestProcessor,\n        private readonly secretStorage: ServerSideSecretStorage,\n    ) {}\n\n    /**\n     * Initialise our cross-signing keys by creating new keys if they do not exist, and uploading to the server\n     */\n    public async bootstrapCrossSigning(opts: BootstrapCrossSigningOpts): Promise<void> {\n        if (opts.setupNewCrossSigning) {\n            await this.resetCrossSigning(opts.authUploadDeviceSigningKeys);\n            return;\n        }\n\n        const olmDeviceStatus: CrossSigningStatus = await this.olmMachine.crossSigningStatus();\n\n        // Try to fetch cross signing keys from the secret storage\n        const masterKeyFromSecretStorage = await this.secretStorage.get(\"m.cross_signing.master\");\n        const selfSigningKeyFromSecretStorage = await this.secretStorage.get(\"m.cross_signing.self_signing\");\n        const userSigningKeyFromSecretStorage = await this.secretStorage.get(\"m.cross_signing.user_signing\");\n        const privateKeysInSecretStorage = Boolean(\n            masterKeyFromSecretStorage && selfSigningKeyFromSecretStorage && userSigningKeyFromSecretStorage,\n        );\n\n        const olmDeviceHasKeys =\n            olmDeviceStatus.hasMaster && olmDeviceStatus.hasUserSigning && olmDeviceStatus.hasSelfSigning;\n\n        // Log all relevant state for easier parsing of debug logs.\n        logger.log(\"bootstrapCrossSigning: starting\", {\n            setupNewCrossSigning: opts.setupNewCrossSigning,\n            olmDeviceHasMaster: olmDeviceStatus.hasMaster,\n            olmDeviceHasUserSigning: olmDeviceStatus.hasUserSigning,\n            olmDeviceHasSelfSigning: olmDeviceStatus.hasSelfSigning,\n            privateKeysInSecretStorage,\n        });\n\n        if (olmDeviceHasKeys) {\n            if (!(await this.secretStorage.hasKey())) {\n                logger.warn(\n                    \"bootstrapCrossSigning: Olm device has private keys, but secret storage is not yet set up; doing nothing for now.\",\n                );\n                // the keys should get uploaded to 4S once that is set up.\n            } else if (!privateKeysInSecretStorage) {\n                // the device has the keys but they are not in 4S, so update it\n                logger.log(\"bootstrapCrossSigning: Olm device has private keys: exporting to secret storage\");\n                await this.exportCrossSigningKeysToStorage();\n            } else {\n                logger.log(\n                    \"bootstrapCrossSigning: Olm device has private keys and they are saved in secret storage; doing nothing\",\n                );\n            }\n        } /* (!olmDeviceHasKeys) */ else {\n            if (privateKeysInSecretStorage) {\n                // they are in 4S, so import from there\n                logger.log(\n                    \"bootstrapCrossSigning: Cross-signing private keys not found locally, but they are available \" +\n                        \"in secret storage, reading storage and caching locally\",\n                );\n                await this.olmMachine.importCrossSigningKeys(\n                    masterKeyFromSecretStorage,\n                    selfSigningKeyFromSecretStorage,\n                    userSigningKeyFromSecretStorage,\n                );\n\n                // Get the current device\n                const device: RustSdkCryptoJs.Device = await this.olmMachine.getDevice(\n                    this.olmMachine.userId,\n                    this.olmMachine.deviceId,\n                );\n                try {\n                    // Sign the device with our cross-signing key and upload the signature\n                    const request: RustSdkCryptoJs.SignatureUploadRequest = await device.verify();\n                    await this.outgoingRequestProcessor.makeOutgoingRequest(request);\n                } finally {\n                    device.free();\n                }\n            } else {\n                logger.log(\n                    \"bootstrapCrossSigning: Cross-signing private keys not found locally or in secret storage, creating new keys\",\n                );\n                await this.resetCrossSigning(opts.authUploadDeviceSigningKeys);\n            }\n        }\n\n        // TODO: we might previously have bootstrapped cross-signing but not completed uploading the keys to the\n        //   server -- in which case we should call OlmDevice.bootstrap_cross_signing. How do we know?\n        logger.log(\"bootstrapCrossSigning: complete\");\n    }\n\n    /** Reset our cross-signing keys\n     *\n     * This method will:\n     *   * Tell the OlmMachine to create new keys\n     *   * Upload the new public keys and the device signature to the server\n     *   * Upload the private keys to SSSS, if it is set up\n     */\n    private async resetCrossSigning(authUploadDeviceSigningKeys?: UIAuthCallback<void>): Promise<void> {\n        // XXX: We must find a way to make this atomic, currently if the user does not remember his account password\n        // or 4S passphrase/key the process will fail in a bad state, with keys rotated but not uploaded or saved in 4S.\n        const outgoingRequests: CrossSigningBootstrapRequests = await this.olmMachine.bootstrapCrossSigning(true);\n\n        // If 4S is configured we need to update it.\n        if (!(await this.secretStorage.hasKey())) {\n            logger.warn(\n                \"resetCrossSigning: Secret storage is not yet set up; not exporting keys to secret storage yet.\",\n            );\n            // the keys should get uploaded to 4S once that is set up.\n        } else {\n            // Update 4S before uploading cross-signing keys, to stay consistent with legacy that asks\n            // 4S passphrase before asking for account password.\n            // Ultimately should be made atomic and resistant to forgotten password/passphrase.\n            logger.log(\"resetCrossSigning: exporting private keys to secret storage\");\n            await this.exportCrossSigningKeysToStorage();\n        }\n\n        logger.log(\"resetCrossSigning: publishing public keys to server\");\n        for (const req of [\n            outgoingRequests.uploadKeysRequest,\n            outgoingRequests.uploadSigningKeysRequest,\n            outgoingRequests.uploadSignaturesRequest,\n        ]) {\n            if (req) {\n                await this.outgoingRequestProcessor.makeOutgoingRequest(req, authUploadDeviceSigningKeys);\n            }\n        }\n    }\n\n    /**\n     * Extract the cross-signing keys from the olm machine and save them to secret storage, if it is configured\n     *\n     * (If secret storage is *not* configured, we assume that the export will happen when it is set up)\n     */\n    private async exportCrossSigningKeysToStorage(): Promise<void> {\n        const exported: RustSdkCryptoJs.CrossSigningKeyExport | null = await this.olmMachine.exportCrossSigningKeys();\n        /* istanbul ignore else (this function is only called when we know the olm machine has keys) */\n        if (exported?.masterKey) {\n            await this.secretStorage.store(\"m.cross_signing.master\", exported.masterKey);\n        } else {\n            logger.error(`Cannot export MSK to secret storage, private key unknown`);\n        }\n        if (exported?.self_signing_key) {\n            await this.secretStorage.store(\"m.cross_signing.self_signing\", exported.self_signing_key);\n        } else {\n            logger.error(`Cannot export SSK to secret storage, private key unknown`);\n        }\n        if (exported?.userSigningKey) {\n            await this.secretStorage.store(\"m.cross_signing.user_signing\", exported.userSigningKey);\n        } else {\n            logger.error(`Cannot export USK to secret storage, private key unknown`);\n        }\n    }\n}\n","/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { ServerSideSecretStorage } from \"../secret-storage.ts\";\n\n/**\n * Check that the private cross signing keys (master, self signing, user signing) are stored in the secret storage and encrypted with the default secret storage key.\n *\n * @param secretStorage - The secret store using account data\n * @returns True if the cross-signing keys are all stored and encrypted with the same secret storage key.\n *\n * @internal\n */\nexport async function secretStorageContainsCrossSigningKeys(secretStorage: ServerSideSecretStorage): Promise<boolean> {\n    return secretStorageCanAccessSecrets(secretStorage, [\n        \"m.cross_signing.master\",\n        \"m.cross_signing.user_signing\",\n        \"m.cross_signing.self_signing\",\n    ]);\n}\n\n/**\n *\n * Check that the secret storage can access the given secrets using the default key.\n *\n * @param secretStorage - The secret store using account data\n * @param secretNames - The secret names to check\n * @returns True if all the given secrets are accessible and encrypted with the given key.\n *\n * @internal\n */\nexport async function secretStorageCanAccessSecrets(\n    secretStorage: ServerSideSecretStorage,\n    secretNames: string[],\n): Promise<boolean> {\n    const defaultKeyId = await secretStorage.getDefaultKeyId();\n    if (!defaultKeyId) return false;\n\n    for (const secretName of secretNames) {\n        // check which keys this particular secret is encrypted with\n        const record = (await secretStorage.isStored(secretName)) || {};\n        // if it's not encrypted with the right key, there is no point continuing\n        if (!(defaultKeyId in record)) return false;\n    }\n\n    return true;\n}\n","/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport { QrState } from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport {\n    GeneratedSas,\n    ShowQrCodeCallbacks,\n    ShowSasCallbacks,\n    VerificationPhase,\n    VerificationRequest,\n    VerificationRequestEvent,\n    VerificationRequestEventHandlerMap,\n    Verifier,\n    VerifierEvent,\n    VerifierEventHandlerMap,\n} from \"../crypto-api/verification.ts\";\nimport { TypedEventEmitter } from \"../models/typed-event-emitter.ts\";\nimport { OutgoingRequest, OutgoingRequestProcessor } from \"./OutgoingRequestProcessor.ts\";\nimport { TypedReEmitter } from \"../ReEmitter.ts\";\nimport { MatrixEvent } from \"../models/event.ts\";\nimport { EventType, MsgType } from \"../@types/event.ts\";\nimport { defer, IDeferred } from \"../utils.ts\";\nimport { VerificationMethod } from \"../types.ts\";\n\n/**\n * An incoming, or outgoing, request to verify a user or a device via cross-signing.\n *\n * @internal\n */\nexport class RustVerificationRequest\n    extends TypedEventEmitter<VerificationRequestEvent, VerificationRequestEventHandlerMap>\n    implements VerificationRequest\n{\n    /** a reëmitter which relays VerificationRequestEvent.Changed events emitted by the verifier */\n    private readonly reEmitter: TypedReEmitter<VerificationRequestEvent, VerificationRequestEventHandlerMap>;\n\n    /** Are we in the process of sending an `m.key.verification.ready` event? */\n    private _accepting = false;\n\n    /** Are we in the process of sending an `m.key.verification.cancellation` event? */\n    private _cancelling = false;\n\n    private _verifier: undefined | RustSASVerifier | RustQrCodeVerifier;\n\n    /**\n     * Construct a new RustVerificationRequest to wrap the rust-level `VerificationRequest`.\n     *\n     * @param olmMachine - The `OlmMachine` from the underlying rust crypto sdk.\n     * @param inner - VerificationRequest from the Rust SDK.\n     * @param outgoingRequestProcessor - `OutgoingRequestProcessor` to use for making outgoing HTTP requests.\n     * @param supportedVerificationMethods - Verification methods to use when `accept()` is called.\n     */\n    public constructor(\n        private readonly olmMachine: RustSdkCryptoJs.OlmMachine,\n        private readonly inner: RustSdkCryptoJs.VerificationRequest,\n        private readonly outgoingRequestProcessor: OutgoingRequestProcessor,\n        private readonly supportedVerificationMethods: string[],\n    ) {\n        super();\n        this.reEmitter = new TypedReEmitter(this);\n\n        // Obviously, the Rust object maintains a reference to the callback function. If the callback function maintains\n        // a reference to the Rust object, then we have a reference cycle which means that `RustVerificationRequest`\n        // will never be garbage-collected, and hence the underlying rust object will never be freed.\n        //\n        // To avoid this reference cycle, use a weak reference in the callback function. If the `RustVerificationRequest`\n        // gets garbage-collected, then there is nothing to update!\n        const weakThis = new WeakRef(this);\n        inner.registerChangesCallback(async () => weakThis.deref()?.onChange());\n    }\n\n    /**\n     * Hook which is called when the underlying rust class notifies us that there has been a change.\n     */\n    private onChange(): void {\n        const verification: RustSdkCryptoJs.Qr | RustSdkCryptoJs.Sas | undefined = this.inner.getVerification();\n\n        // Set the _verifier object (wrapping the rust `Verification` as a js-sdk Verifier) if:\n        // - we now have a `Verification` where we lacked one before\n        // - we have transitioned from QR to SAS\n        // - we are verifying with SAS, but we need to replace our verifier with a new one because both parties\n        //   tried to start verification at the same time, and we lost the tie breaking\n        if (verification instanceof RustSdkCryptoJs.Sas) {\n            if (this._verifier === undefined || this._verifier instanceof RustQrCodeVerifier) {\n                this.setVerifier(new RustSASVerifier(verification, this, this.outgoingRequestProcessor));\n            } else if (this._verifier instanceof RustSASVerifier) {\n                this._verifier.replaceInner(verification);\n            }\n        } else if (verification instanceof RustSdkCryptoJs.Qr && this._verifier === undefined) {\n            this.setVerifier(new RustQrCodeVerifier(verification, this.outgoingRequestProcessor));\n        }\n\n        this.emit(VerificationRequestEvent.Change);\n    }\n\n    private setVerifier(verifier: RustSASVerifier | RustQrCodeVerifier): void {\n        // if we already have a verifier, unsubscribe from its events\n        if (this._verifier) {\n            this.reEmitter.stopReEmitting(this._verifier, [VerificationRequestEvent.Change]);\n        }\n        this._verifier = verifier;\n        this.reEmitter.reEmit(this._verifier, [VerificationRequestEvent.Change]);\n    }\n\n    /**\n     * Unique ID for this verification request.\n     *\n     * An ID isn't assigned until the first message is sent, so this may be `undefined` in the early phases.\n     */\n    public get transactionId(): string | undefined {\n        return this.inner.flowId;\n    }\n\n    /**\n     * For an in-room verification, the ID of the room.\n     *\n     * For to-device verifications, `undefined`.\n     */\n    public get roomId(): string | undefined {\n        return this.inner.roomId?.toString();\n    }\n\n    /**\n     * True if this request was initiated by the local client.\n     *\n     * For in-room verifications, the initiator is who sent the `m.key.verification.request` event.\n     * For to-device verifications, the initiator is who sent the `m.key.verification.start` event.\n     */\n    public get initiatedByMe(): boolean {\n        return this.inner.weStarted();\n    }\n\n    /** The user id of the other party in this request */\n    public get otherUserId(): string {\n        return this.inner.otherUserId.toString();\n    }\n\n    /** For verifications via to-device messages: the ID of the other device. Otherwise, undefined. */\n    public get otherDeviceId(): string | undefined {\n        return this.inner.otherDeviceId?.toString();\n    }\n\n    /** Get the other device involved in the verification, if it is known */\n    private async getOtherDevice(): Promise<undefined | RustSdkCryptoJs.Device> {\n        const otherDeviceId = this.inner.otherDeviceId;\n        if (!otherDeviceId) {\n            return undefined;\n        }\n        return await this.olmMachine.getDevice(this.inner.otherUserId, otherDeviceId, 5);\n    }\n\n    /** True if the other party in this request is one of this user's own devices. */\n    public get isSelfVerification(): boolean {\n        return this.inner.isSelfVerification();\n    }\n\n    /** current phase of the request. */\n    public get phase(): VerificationPhase {\n        const phase = this.inner.phase();\n\n        switch (phase) {\n            case RustSdkCryptoJs.VerificationRequestPhase.Created:\n            case RustSdkCryptoJs.VerificationRequestPhase.Requested:\n                return VerificationPhase.Requested;\n            case RustSdkCryptoJs.VerificationRequestPhase.Ready:\n                // if we're still sending the `m.key.verification.ready`, that counts as \"Requested\" in the js-sdk's\n                // parlance.\n                return this._accepting ? VerificationPhase.Requested : VerificationPhase.Ready;\n            case RustSdkCryptoJs.VerificationRequestPhase.Transitioned:\n                if (!this._verifier) {\n                    // this shouldn't happen, because the onChange handler should have created a _verifier.\n                    throw new Error(\"VerificationRequest: inner phase == Transitioned but no verifier!\");\n                }\n                return this._verifier.verificationPhase;\n            case RustSdkCryptoJs.VerificationRequestPhase.Done:\n                return VerificationPhase.Done;\n            case RustSdkCryptoJs.VerificationRequestPhase.Cancelled:\n                return VerificationPhase.Cancelled;\n        }\n\n        throw new Error(`Unknown verification phase ${phase}`);\n    }\n\n    /** True if the request has sent its initial event and needs more events to complete\n     * (ie it is in phase `Requested`, `Ready` or `Started`).\n     */\n    public get pending(): boolean {\n        if (this.inner.isPassive()) return false;\n        const phase = this.phase;\n        return phase !== VerificationPhase.Done && phase !== VerificationPhase.Cancelled;\n    }\n\n    /**\n     * True if we have started the process of sending an `m.key.verification.ready` (but have not necessarily received\n     * the remote echo which causes a transition to {@link VerificationPhase.Ready}.\n     */\n    public get accepting(): boolean {\n        return this._accepting;\n    }\n\n    /**\n     * True if we have started the process of sending an `m.key.verification.cancel` (but have not necessarily received\n     * the remote echo which causes a transition to {@link VerificationPhase.Cancelled}).\n     */\n    public get declining(): boolean {\n        return this._cancelling;\n    }\n\n    /**\n     * The remaining number of ms before the request will be automatically cancelled.\n     *\n     * `null` indicates that there is no timeout\n     */\n    public get timeout(): number | null {\n        return this.inner.timeRemainingMillis();\n    }\n\n    /** once the phase is Started (and !initiatedByMe) or Ready: common methods supported by both sides */\n    public get methods(): string[] {\n        throw new Error(\"not implemented\");\n    }\n\n    /** the method picked in the .start event */\n    public get chosenMethod(): string | null {\n        if (this.phase !== VerificationPhase.Started) return null;\n\n        const verification: RustSdkCryptoJs.Qr | RustSdkCryptoJs.Sas | undefined = this.inner.getVerification();\n        if (verification instanceof RustSdkCryptoJs.Sas) {\n            return VerificationMethod.Sas;\n        } else if (verification instanceof RustSdkCryptoJs.Qr) {\n            return VerificationMethod.Reciprocate;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Checks whether the other party supports a given verification method.\n     * This is useful when setting up the QR code UI, as it is somewhat asymmetrical:\n     * if the other party supports SCAN_QR, we should show a QR code in the UI, and vice versa.\n     * For methods that need to be supported by both ends, use the `methods` property.\n     *\n     * @param method - the method to check\n     * @returns true if the other party said they supported the method\n     */\n    public otherPartySupportsMethod(method: string): boolean {\n        const theirMethods: RustSdkCryptoJs.VerificationMethod[] | undefined = this.inner.theirSupportedMethods;\n        if (theirMethods === undefined) {\n            // no message from the other side yet\n            return false;\n        }\n\n        const requiredMethod = verificationMethodsByIdentifier[method];\n        return theirMethods.some((m) => m === requiredMethod);\n    }\n\n    /**\n     * Accepts the request, sending a .ready event to the other party\n     *\n     * @returns Promise which resolves when the event has been sent.\n     */\n    public async accept(): Promise<void> {\n        if (this.inner.phase() !== RustSdkCryptoJs.VerificationRequestPhase.Requested || this._accepting) {\n            throw new Error(`Cannot accept a verification request in phase ${this.phase}`);\n        }\n\n        this._accepting = true;\n        try {\n            const req: undefined | OutgoingRequest = this.inner.acceptWithMethods(\n                this.supportedVerificationMethods.map(verificationMethodIdentifierToMethod),\n            );\n            if (req) {\n                await this.outgoingRequestProcessor.makeOutgoingRequest(req);\n            }\n        } finally {\n            this._accepting = false;\n        }\n\n        // phase may have changed, so emit a 'change' event\n        this.emit(VerificationRequestEvent.Change);\n    }\n\n    /**\n     * Cancels the request, sending a cancellation to the other party\n     *\n     * @param params - Details for the cancellation, including `reason` (defaults to \"User declined\"), and `code`\n     *    (defaults to `m.user`).\n     *\n     * @returns Promise which resolves when the event has been sent.\n     */\n    public async cancel(params?: { reason?: string; code?: string }): Promise<void> {\n        if (this._cancelling) {\n            // already cancelling; do nothing\n            return;\n        }\n\n        this._cancelling = true;\n        try {\n            const req: undefined | OutgoingRequest = this.inner.cancel();\n            if (req) {\n                await this.outgoingRequestProcessor.makeOutgoingRequest(req);\n            }\n        } finally {\n            this._cancelling = false;\n        }\n    }\n\n    /**\n     * Create a {@link Verifier} to do this verification via a particular method.\n     *\n     * If a verifier has already been created for this request, returns that verifier.\n     *\n     * This does *not* send the `m.key.verification.start` event - to do so, call {@link Verifier#verifier} on the\n     * returned verifier.\n     *\n     * If no previous events have been sent, pass in `targetDevice` to set who to direct this request to.\n     *\n     * @param method - the name of the verification method to use.\n     * @param targetDevice - details of where to send the request to.\n     *\n     * @returns The verifier which will do the actual verification.\n     */\n    public beginKeyVerification(method: string, targetDevice?: { userId?: string; deviceId?: string }): Verifier {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * Send an `m.key.verification.start` event to start verification via a particular method.\n     *\n     * Implementation of {@link Crypto.VerificationRequest#startVerification}.\n     *\n     * @param method - the name of the verification method to use.\n     */\n    public async startVerification(method: string): Promise<Verifier> {\n        if (method !== VerificationMethod.Sas) {\n            throw new Error(`Unsupported verification method ${method}`);\n        }\n\n        // make sure that we have a list of the other user's devices (workaround https://github.com/matrix-org/matrix-rust-sdk/issues/2896)\n        if (!(await this.getOtherDevice())) {\n            throw new Error(\"startVerification(): other device is unknown\");\n        }\n\n        const res:\n            | [RustSdkCryptoJs.Sas, RustSdkCryptoJs.RoomMessageRequest | RustSdkCryptoJs.ToDeviceRequest]\n            | undefined = await this.inner.startSas();\n\n        if (res) {\n            const [, req] = res;\n            await this.outgoingRequestProcessor.makeOutgoingRequest(req);\n        }\n\n        // this should have triggered the onChange callback, and we should now have a verifier\n        if (!this._verifier) {\n            throw new Error(\"Still no verifier after startSas() call\");\n        }\n\n        return this._verifier;\n    }\n\n    /**\n     * Start a QR code verification by providing a scanned QR code for this verification flow.\n     *\n     * Implementation of {@link Crypto.VerificationRequest#scanQRCode}.\n     *\n     * @param qrCodeData - the decoded QR code.\n     * @returns A verifier; call `.verify()` on it to wait for the other side to complete the verification flow.\n     */\n    public async scanQRCode(uint8Array: Uint8Array): Promise<Verifier> {\n        const scan = RustSdkCryptoJs.QrCodeScan.fromBytes(new Uint8ClampedArray(uint8Array));\n        const verifier: RustSdkCryptoJs.Qr = await this.inner.scanQrCode(scan);\n\n        // this should have triggered the onChange callback, and we should now have a verifier\n        if (!this._verifier) {\n            throw new Error(\"Still no verifier after scanQrCode() call\");\n        }\n\n        // we can immediately trigger the reciprocate request\n        const req: undefined | OutgoingRequest = verifier.reciprocate();\n        if (req) {\n            await this.outgoingRequestProcessor.makeOutgoingRequest(req);\n        }\n\n        return this._verifier;\n    }\n\n    /**\n     * The verifier which is doing the actual verification, once the method has been established.\n     * Only defined when the `phase` is Started.\n     */\n    public get verifier(): Verifier | undefined {\n        // It's possible for us to have a Verifier before a method has been chosen (in particular,\n        // if we are showing a QR code which the other device has not yet scanned. At that point, we could\n        // still switch to SAS).\n        //\n        // In that case, we should not return it to the application yet, since the application will not expect the\n        // Verifier to be replaced during the lifetime of the VerificationRequest.\n        return this.phase === VerificationPhase.Started ? this._verifier : undefined;\n    }\n\n    /**\n     * Stub implementation of {@link Crypto.VerificationRequest#getQRCodeBytes}.\n     */\n    public getQRCodeBytes(): Buffer | undefined {\n        throw new Error(\"getQRCodeBytes() unsupported in Rust Crypto; use generateQRCode() instead.\");\n    }\n\n    /**\n     * Generate the data for a QR code allowing the other device to verify this one, if it supports it.\n     *\n     * Implementation of {@link Crypto.VerificationRequest#generateQRCode}.\n     */\n    public async generateQRCode(): Promise<Buffer | undefined> {\n        // make sure that we have a list of the other user's devices (workaround https://github.com/matrix-org/matrix-rust-sdk/issues/2896)\n        if (!(await this.getOtherDevice())) {\n            throw new Error(\"generateQRCode(): other device is unknown\");\n        }\n\n        const innerVerifier: RustSdkCryptoJs.Qr | undefined = await this.inner.generateQrCode();\n        // If we are unable to generate a QRCode, we return undefined\n        if (!innerVerifier) return;\n\n        return Buffer.from(innerVerifier.toBytes());\n    }\n\n    /**\n     * If this request has been cancelled, the cancellation code (e.g `m.user`) which is responsible for cancelling\n     * this verification.\n     */\n    public get cancellationCode(): string | null {\n        return this.inner.cancelInfo?.cancelCode() ?? null;\n    }\n\n    /**\n     * The id of the user that cancelled the request.\n     *\n     * Only defined when phase is Cancelled\n     */\n    public get cancellingUserId(): string | undefined {\n        const cancelInfo = this.inner.cancelInfo;\n        if (!cancelInfo) {\n            return undefined;\n        } else if (cancelInfo.cancelledbyUs()) {\n            return this.olmMachine.userId.toString();\n        } else {\n            return this.inner.otherUserId.toString();\n        }\n    }\n}\n\n/** Common base class for `Verifier` implementations which wrap rust classes.\n *\n * The generic parameter `InnerType` is the type of the rust Verification class which we wrap.\n *\n * @internal\n */\nabstract class BaseRustVerifer<InnerType extends RustSdkCryptoJs.Qr | RustSdkCryptoJs.Sas> extends TypedEventEmitter<\n    VerifierEvent | VerificationRequestEvent,\n    VerifierEventHandlerMap & VerificationRequestEventHandlerMap\n> {\n    /** A deferred which completes when the verification completes (or rejects when it is cancelled/fails) */\n    protected readonly completionDeferred: IDeferred<void>;\n\n    public constructor(\n        protected inner: InnerType,\n        protected readonly outgoingRequestProcessor: OutgoingRequestProcessor,\n    ) {\n        super();\n\n        this.completionDeferred = defer();\n\n        // As with RustVerificationRequest, we need to avoid a reference cycle.\n        // See the comments in RustVerificationRequest.\n        const weakThis = new WeakRef(this);\n        inner.registerChangesCallback(async () => weakThis.deref()?.onChange());\n\n        // stop the runtime complaining if nobody catches a failure\n        this.completionDeferred.promise.catch(() => null);\n    }\n\n    /**\n     * Hook which is called when the underlying rust class notifies us that there has been a change.\n     *\n     * Can be overridden by subclasses to see if we can notify the application about an update. The overriding method\n     * must call `super.onChange()`.\n     */\n    protected onChange(): void {\n        if (this.inner.isDone()) {\n            this.completionDeferred.resolve(undefined);\n        } else if (this.inner.isCancelled()) {\n            const cancelInfo = this.inner.cancelInfo()!;\n            this.completionDeferred.reject(\n                new Error(\n                    `Verification cancelled by ${\n                        cancelInfo.cancelledbyUs() ? \"us\" : \"them\"\n                    } with code ${cancelInfo.cancelCode()}: ${cancelInfo.reason()}`,\n                ),\n            );\n        }\n\n        this.emit(VerificationRequestEvent.Change);\n    }\n\n    /**\n     * Returns true if the verification has been cancelled, either by us or the other side.\n     */\n    public get hasBeenCancelled(): boolean {\n        return this.inner.isCancelled();\n    }\n\n    /**\n     * The ID of the other user in the verification process.\n     */\n    public get userId(): string {\n        return this.inner.otherUserId.toString();\n    }\n\n    /**\n     * Cancel a verification.\n     *\n     * We will send an `m.key.verification.cancel` if the verification is still in flight. The verification promise\n     * will reject, and a {@link Crypto.VerifierEvent#Cancel} will be emitted.\n     *\n     * @param e - the reason for the cancellation.\n     */\n    public cancel(e?: Error): void {\n        // TODO: something with `e`\n        const req: undefined | OutgoingRequest = this.inner.cancel();\n        if (req) {\n            this.outgoingRequestProcessor.makeOutgoingRequest(req);\n        }\n    }\n\n    /**\n     * Get the details for an SAS verification, if one is in progress\n     *\n     * Returns `null`, unless this verifier is for a SAS-based verification and we are waiting for the user to confirm\n     * the SAS matches.\n     */\n    public getShowSasCallbacks(): ShowSasCallbacks | null {\n        return null;\n    }\n\n    /**\n     * Get the details for reciprocating QR code verification, if one is in progress\n     *\n     * Returns `null`, unless this verifier is for reciprocating a QR-code-based verification (ie, the other user has\n     * already scanned our QR code), and we are waiting for the user to confirm.\n     */\n    public getReciprocateQrCodeCallbacks(): ShowQrCodeCallbacks | null {\n        return null;\n    }\n}\n\n/** A Verifier instance which is used to show and/or scan a QR code. */\nexport class RustQrCodeVerifier extends BaseRustVerifer<RustSdkCryptoJs.Qr> implements Verifier {\n    private callbacks: ShowQrCodeCallbacks | null = null;\n\n    public constructor(inner: RustSdkCryptoJs.Qr, outgoingRequestProcessor: OutgoingRequestProcessor) {\n        super(inner, outgoingRequestProcessor);\n    }\n\n    protected onChange(): void {\n        // if the other side has scanned our QR code and sent us a \"reciprocate\" message, it is now time for the\n        // application to prompt the user to confirm their side.\n        if (this.callbacks === null && this.inner.hasBeenScanned()) {\n            this.callbacks = {\n                confirm: (): void => {\n                    this.confirmScanning();\n                },\n                cancel: (): void => this.cancel(),\n            };\n        }\n\n        super.onChange();\n    }\n\n    /**\n     * Start the key verification, if it has not already been started.\n     *\n     * @returns Promise which resolves when the verification has completed, or rejects if the verification is cancelled\n     *    or times out.\n     */\n    public async verify(): Promise<void> {\n        // Some applications (hello, matrix-react-sdk) may not check if there is a `ShowQrCodeCallbacks` and instead\n        // register a `ShowReciprocateQr` listener which they expect to be called once `.verify` is called.\n        if (this.callbacks !== null) {\n            this.emit(VerifierEvent.ShowReciprocateQr, this.callbacks);\n        }\n        // Nothing to do here but wait.\n        await this.completionDeferred.promise;\n    }\n\n    /**\n     * Calculate an appropriate VerificationPhase for a VerificationRequest where this is the verifier.\n     *\n     * This is abnormally complicated because a rust-side QR Code verifier can span several verification phases.\n     */\n    public get verificationPhase(): VerificationPhase {\n        switch (this.inner.state()) {\n            case QrState.Created:\n                // we have created a QR for display; neither side has yet sent an `m.key.verification.start`.\n                return VerificationPhase.Ready;\n            case QrState.Scanned:\n                // other side has scanned our QR and sent an `m.key.verification.start` with `m.reciprocate.v1`\n                return VerificationPhase.Started;\n            case QrState.Confirmed:\n                // we have confirmed the other side's scan and sent an `m.key.verification.done`.\n                //\n                // However, the verification is not yet \"Done\", because we have to wait until we have received the\n                // `m.key.verification.done` from the other side (in particular, we don't mark the device/identity as\n                // verified until that happens). If we return \"Done\" too soon, we risk the user cancelling the flow.\n                return VerificationPhase.Started;\n            case QrState.Reciprocated:\n                // although the rust SDK doesn't immediately send the `m.key.verification.start` on transition into this\n                // state, `RustVerificationRequest.scanQrCode` immediately calls `reciprocate()` and does so, so in practice\n                // we can treat the two the same.\n                return VerificationPhase.Started;\n            case QrState.Done:\n                return VerificationPhase.Done;\n            case QrState.Cancelled:\n                return VerificationPhase.Cancelled;\n            default:\n                throw new Error(`Unknown qr code state ${this.inner.state()}`);\n        }\n    }\n\n    /**\n     * Get the details for reciprocating QR code verification, if one is in progress\n     *\n     * Returns `null`, unless this verifier is for reciprocating a QR-code-based verification (ie, the other user has\n     * already scanned our QR code), and we are waiting for the user to confirm.\n     */\n    public getReciprocateQrCodeCallbacks(): ShowQrCodeCallbacks | null {\n        return this.callbacks;\n    }\n\n    private async confirmScanning(): Promise<void> {\n        const req: undefined | OutgoingRequest = this.inner.confirmScanning();\n        if (req) {\n            await this.outgoingRequestProcessor.makeOutgoingRequest(req);\n        }\n    }\n}\n\n/** A Verifier instance which is used if we are exchanging emojis */\nexport class RustSASVerifier extends BaseRustVerifer<RustSdkCryptoJs.Sas> implements Verifier {\n    private callbacks: ShowSasCallbacks | null = null;\n\n    public constructor(\n        inner: RustSdkCryptoJs.Sas,\n        _verificationRequest: RustVerificationRequest,\n        outgoingRequestProcessor: OutgoingRequestProcessor,\n    ) {\n        super(inner, outgoingRequestProcessor);\n    }\n\n    /**\n     * Start the key verification, if it has not already been started.\n     *\n     * This means sending a `m.key.verification.start` if we are the first responder, or a `m.key.verification.accept`\n     * if the other side has already sent a start event.\n     *\n     * @returns Promise which resolves when the verification has completed, or rejects if the verification is cancelled\n     *    or times out.\n     */\n    public async verify(): Promise<void> {\n        await this.sendAccept();\n        await this.completionDeferred.promise;\n    }\n\n    /**\n     * Send the accept or start event, if it hasn't already been sent\n     */\n    private async sendAccept(): Promise<void> {\n        const req: undefined | OutgoingRequest = this.inner.accept();\n        if (req) {\n            await this.outgoingRequestProcessor.makeOutgoingRequest(req);\n        }\n    }\n\n    /** if we can now show the callbacks, do so */\n    protected onChange(): void {\n        super.onChange();\n\n        if (this.callbacks === null) {\n            const emoji = this.inner.emoji();\n            const decimal = this.inner.decimals();\n\n            if (emoji === undefined && decimal === undefined) {\n                return;\n            }\n\n            const sas: GeneratedSas = {};\n            if (emoji) {\n                sas.emoji = emoji.map((e) => [e.symbol, e.description]);\n            }\n            if (decimal) {\n                sas.decimal = [decimal[0], decimal[1], decimal[2]];\n            }\n\n            this.callbacks = {\n                sas,\n                confirm: async (): Promise<void> => {\n                    const requests: Array<OutgoingRequest> = await this.inner.confirm();\n                    for (const m of requests) {\n                        await this.outgoingRequestProcessor.makeOutgoingRequest(m);\n                    }\n                },\n                mismatch: (): void => {\n                    const request = this.inner.cancelWithCode(\"m.mismatched_sas\");\n                    if (request) {\n                        this.outgoingRequestProcessor.makeOutgoingRequest(request);\n                    }\n                },\n                cancel: (): void => {\n                    const request = this.inner.cancelWithCode(\"m.user\");\n                    if (request) {\n                        this.outgoingRequestProcessor.makeOutgoingRequest(request);\n                    }\n                },\n            };\n            this.emit(VerifierEvent.ShowSas, this.callbacks);\n        }\n    }\n\n    /**\n     * Calculate an appropriate VerificationPhase for a VerificationRequest where this is the verifier.\n     */\n    public get verificationPhase(): VerificationPhase {\n        return VerificationPhase.Started;\n    }\n\n    /**\n     * Get the details for an SAS verification, if one is in progress\n     *\n     * Returns `null`, unless this verifier is for a SAS-based verification and we are waiting for the user to confirm\n     * the SAS matches.\n     */\n    public getShowSasCallbacks(): ShowSasCallbacks | null {\n        return this.callbacks;\n    }\n\n    /**\n     * Replace the inner Rust verifier with a different one.\n     *\n     * @param inner - the new Rust verifier\n     * @internal\n     */\n    public replaceInner(inner: RustSdkCryptoJs.Sas): void {\n        if (this.inner != inner) {\n            this.inner = inner;\n\n            // As with RustVerificationRequest, we need to avoid a reference cycle.\n            // See the comments in RustVerificationRequest.\n            const weakThis = new WeakRef(this);\n            inner.registerChangesCallback(async () => weakThis.deref()?.onChange());\n\n            // replaceInner will only get called if we started the verification at the same time as the other side, and we lost\n            // the tie breaker.  So we need to re-accept their verification.\n            this.sendAccept();\n            this.onChange();\n        }\n    }\n}\n\n/** For each specced verification method, the rust-side `VerificationMethod` corresponding to it */\nconst verificationMethodsByIdentifier: Record<string, RustSdkCryptoJs.VerificationMethod> = {\n    [VerificationMethod.Sas]: RustSdkCryptoJs.VerificationMethod.SasV1,\n    [VerificationMethod.ScanQrCode]: RustSdkCryptoJs.VerificationMethod.QrCodeScanV1,\n    [VerificationMethod.ShowQrCode]: RustSdkCryptoJs.VerificationMethod.QrCodeShowV1,\n    [VerificationMethod.Reciprocate]: RustSdkCryptoJs.VerificationMethod.ReciprocateV1,\n};\n\n/**\n * Convert a specced verification method identifier into a rust-side `VerificationMethod`.\n *\n * @param method - specced method identifier, for example `m.sas.v1`.\n * @returns Rust-side `VerificationMethod` corresponding to `method`.\n * @throws An error if the method is unknown.\n *\n * @internal\n */\nexport function verificationMethodIdentifierToMethod(method: string): RustSdkCryptoJs.VerificationMethod {\n    const meth = verificationMethodsByIdentifier[method];\n    if (meth === undefined) {\n        throw new Error(`Unknown verification method ${method}`);\n    }\n    return meth;\n}\n\n/**\n * Return true if the event's type matches that of an in-room verification event\n *\n * @param event - MatrixEvent\n * @returns\n *\n * @internal\n */\nexport function isVerificationEvent(event: MatrixEvent): boolean {\n    switch (event.getType()) {\n        case EventType.KeyVerificationCancel:\n        case EventType.KeyVerificationDone:\n        case EventType.KeyVerificationMac:\n        case EventType.KeyVerificationStart:\n        case EventType.KeyVerificationKey:\n        case EventType.KeyVerificationReady:\n        case EventType.KeyVerificationAccept:\n            return true;\n        case EventType.RoomMessage:\n            return event.getContent().msgtype === MsgType.KeyVerificationRequest;\n        default:\n            return false;\n    }\n}\n","/*\nCopyright 2023 - 2024 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { OlmMachine, SignatureVerification } from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport {\n    BackupTrustInfo,\n    Curve25519AuthData,\n    KeyBackupCheck,\n    KeyBackupInfo,\n    KeyBackupSession,\n    Curve25519SessionData,\n    KeyBackupRestoreOpts,\n    KeyBackupRestoreResult,\n    KeyBackupRoomSessions,\n} from \"../crypto-api/keybackup.ts\";\nimport { logger } from \"../logger.ts\";\nimport { ClientPrefix, IHttpOpts, MatrixError, MatrixHttpApi, Method } from \"../http-api/index.ts\";\nimport { IMegolmSessionData } from \"../crypto/index.ts\";\nimport { TypedEventEmitter } from \"../models/typed-event-emitter.ts\";\nimport { encodeUri, logDuration } from \"../utils.ts\";\nimport { OutgoingRequestProcessor } from \"./OutgoingRequestProcessor.ts\";\nimport { sleep } from \"../utils.ts\";\nimport { BackupDecryptor } from \"../common-crypto/CryptoBackend.ts\";\nimport { ImportRoomKeyProgressData, ImportRoomKeysOpts, CryptoEvent } from \"../crypto-api/index.ts\";\nimport { AESEncryptedSecretStoragePayload } from \"../@types/AESEncryptedSecretStoragePayload.ts\";\n\n/** Authentification of the backup info, depends on algorithm */\ntype AuthData = KeyBackupInfo[\"auth_data\"];\n\n/**\n * Holds information of a created keybackup.\n * Useful to get the generated private key material and save it securely somewhere.\n */\ninterface KeyBackupCreationInfo {\n    version: string;\n    algorithm: string;\n    authData: AuthData;\n    decryptionKey: RustSdkCryptoJs.BackupDecryptionKey;\n}\n\n/**\n * @internal\n */\nexport class RustBackupManager extends TypedEventEmitter<RustBackupCryptoEvents, RustBackupCryptoEventMap> {\n    /** Have we checked if there is a backup on the server which we can use */\n    private checkedForBackup = false;\n\n    /**\n     * The latest backup version on the server, when we last checked.\n     *\n     * If there was no backup on the server, `null`. If our attempt to check resulted in an error, `undefined`.\n     *\n     * Note that the backup was not necessarily verified.\n     */\n    private serverBackupInfo: KeyBackupInfo | null | undefined = undefined;\n\n    private activeBackupVersion: string | null = null;\n    private stopped = false;\n\n    /** whether {@link backupKeysLoop} is currently running */\n    private backupKeysLoopRunning = false;\n\n    public constructor(\n        private readonly olmMachine: OlmMachine,\n        private readonly http: MatrixHttpApi<IHttpOpts & { onlyData: true }>,\n        private readonly outgoingRequestProcessor: OutgoingRequestProcessor,\n    ) {\n        super();\n    }\n\n    /**\n     * Tells the RustBackupManager to stop.\n     * The RustBackupManager is scheduling background uploads of keys to the backup, this\n     * call allows to cancel the process when the client is stoppped.\n     */\n    public stop(): void {\n        this.stopped = true;\n    }\n\n    /**\n     * Get the backup version we are currently backing up to, if any\n     */\n    public async getActiveBackupVersion(): Promise<string | null> {\n        if (!(await this.olmMachine.isBackupEnabled())) return null;\n        return this.activeBackupVersion;\n    }\n\n    /**\n     * Return the details of the latest backup on the server, when we last checked.\n     *\n     * This normally returns a cached value, but if we haven't yet made a request to the server, it will fire one off.\n     * It will always return the details of the active backup if key backup is enabled.\n     *\n     * If there was no backup on the server, `null`. If our attempt to check resulted in an error, `undefined`.\n     */\n    public async getServerBackupInfo(): Promise<KeyBackupInfo | null | undefined> {\n        // Do a validity check if we haven't already done one. The check is likely to fail if we don't yet have the\n        // backup keys -- but as a side-effect, it will populate `serverBackupInfo`.\n        await this.checkKeyBackupAndEnable(false);\n        return this.serverBackupInfo;\n    }\n\n    /**\n     * Determine if a key backup can be trusted.\n     *\n     * @param info - key backup info dict from {@link MatrixClient#getKeyBackupVersion}.\n     */\n    public async isKeyBackupTrusted(info: KeyBackupInfo): Promise<BackupTrustInfo> {\n        const signatureVerification: SignatureVerification = await this.olmMachine.verifyBackup(info);\n\n        const backupKeys: RustSdkCryptoJs.BackupKeys = await this.olmMachine.getBackupKeys();\n        const decryptionKey = backupKeys?.decryptionKey;\n        const backupMatchesSavedPrivateKey =\n            !!decryptionKey && backupInfoMatchesBackupDecryptionKey(info, decryptionKey);\n        return {\n            matchesDecryptionKey: backupMatchesSavedPrivateKey,\n            trusted: signatureVerification.trusted(),\n        };\n    }\n\n    /**\n     * Re-check the key backup and enable/disable it as appropriate.\n     *\n     * @param force - whether we should force a re-check even if one has already happened.\n     */\n    public checkKeyBackupAndEnable(force: boolean): Promise<KeyBackupCheck | null> {\n        if (!force && this.checkedForBackup) {\n            return Promise.resolve(null);\n        }\n\n        // make sure there is only one check going on at a time\n        if (!this.keyBackupCheckInProgress) {\n            this.keyBackupCheckInProgress = this.doCheckKeyBackup().finally(() => {\n                this.keyBackupCheckInProgress = null;\n            });\n        }\n        return this.keyBackupCheckInProgress;\n    }\n\n    /**\n     * Handles a backup secret received event and store it if it matches the current backup version.\n     *\n     * @param secret - The secret as received from a `m.secret.send` event for secret `m.megolm_backup.v1`.\n     * @returns true if the secret is valid and has been stored, false otherwise.\n     */\n    public async handleBackupSecretReceived(secret: string): Promise<boolean> {\n        // Currently we only receive the decryption key without any key backup version. It is important to\n        // check that the secret is valid for the current version before storing it.\n        // We force a check to ensure to have the latest version. We also want to check that the backup is trusted\n        // as we don't want to store the secret if the backup is not trusted, and eventually import megolm keys later from an untrusted backup.\n        const backupCheck = await this.checkKeyBackupAndEnable(true);\n\n        if (!backupCheck?.backupInfo?.version || !backupCheck.trustInfo.trusted) {\n            // There is no server-side key backup, or the backup is not signed by a trusted cross-signing key or trusted own device.\n            // This decryption key is useless to us.\n            logger.warn(\n                \"handleBackupSecretReceived: Received a backup decryption key, but there is no trusted server-side key backup\",\n            );\n            return false;\n        }\n\n        try {\n            const backupDecryptionKey = RustSdkCryptoJs.BackupDecryptionKey.fromBase64(secret);\n            const privateKeyMatches = backupInfoMatchesBackupDecryptionKey(backupCheck.backupInfo, backupDecryptionKey);\n            if (!privateKeyMatches) {\n                logger.warn(\n                    `handleBackupSecretReceived: Private decryption key does not match the public key of the current remote backup.`,\n                );\n                // just ignore the secret\n                return false;\n            }\n            logger.info(\n                `handleBackupSecretReceived: A valid backup decryption key has been received and stored in cache.`,\n            );\n            await this.saveBackupDecryptionKey(backupDecryptionKey, backupCheck.backupInfo.version);\n            return true;\n        } catch (e) {\n            logger.warn(\"handleBackupSecretReceived: Invalid backup decryption key\", e);\n        }\n\n        return false;\n    }\n\n    public async saveBackupDecryptionKey(\n        backupDecryptionKey: RustSdkCryptoJs.BackupDecryptionKey,\n        version: string,\n    ): Promise<void> {\n        await this.olmMachine.saveBackupDecryptionKey(backupDecryptionKey, version);\n        // Emit an event that we have a new backup decryption key, so that the sdk can start\n        // importing keys from backup if needed.\n        this.emit(CryptoEvent.KeyBackupDecryptionKeyCached, version);\n    }\n\n    /**\n     * Import a list of room keys previously exported by exportRoomKeys\n     *\n     * @param keys - a list of session export objects\n     * @param opts - options object\n     * @returns a promise which resolves once the keys have been imported\n     */\n    public async importRoomKeys(keys: IMegolmSessionData[], opts?: ImportRoomKeysOpts): Promise<void> {\n        await this.importRoomKeysAsJson(JSON.stringify(keys), opts);\n    }\n\n    /**\n     * Import a list of room keys previously exported by exportRoomKeysAsJson\n     *\n     * @param jsonKeys - a JSON string encoding a list of session export objects,\n     *    each of which is an IMegolmSessionData\n     * @param opts - options object\n     * @returns a promise which resolves once the keys have been imported\n     */\n    public async importRoomKeysAsJson(jsonKeys: string, opts?: ImportRoomKeysOpts): Promise<void> {\n        await this.olmMachine.importExportedRoomKeys(jsonKeys, (progress: bigint, total: bigint): void => {\n            const importOpt: ImportRoomKeyProgressData = {\n                total: Number(total),\n                successes: Number(progress),\n                stage: \"load_keys\",\n                failures: 0,\n            };\n            opts?.progressCallback?.(importOpt);\n        });\n    }\n\n    /**\n     * Implementation of {@link CryptoBackend#importBackedUpRoomKeys}.\n     */\n    public async importBackedUpRoomKeys(\n        keys: IMegolmSessionData[],\n        backupVersion: string,\n        opts?: ImportRoomKeysOpts,\n    ): Promise<void> {\n        const keysByRoom: Map<RustSdkCryptoJs.RoomId, Map<string, IMegolmSessionData>> = new Map();\n        for (const key of keys) {\n            const roomId = new RustSdkCryptoJs.RoomId(key.room_id);\n            if (!keysByRoom.has(roomId)) {\n                keysByRoom.set(roomId, new Map());\n            }\n            keysByRoom.get(roomId)!.set(key.session_id, key);\n        }\n        await this.olmMachine.importBackedUpRoomKeys(\n            keysByRoom,\n            (progress: bigint, total: bigint, failures: bigint): void => {\n                const importOpt: ImportRoomKeyProgressData = {\n                    total: Number(total),\n                    successes: Number(progress),\n                    stage: \"load_keys\",\n                    failures: Number(failures),\n                };\n                opts?.progressCallback?.(importOpt);\n            },\n            backupVersion,\n        );\n    }\n\n    private keyBackupCheckInProgress: Promise<KeyBackupCheck | null> | null = null;\n\n    /** Helper for `checkKeyBackup` */\n    private async doCheckKeyBackup(): Promise<KeyBackupCheck | null> {\n        logger.log(\"Checking key backup status...\");\n        let backupInfo: KeyBackupInfo | null | undefined;\n        try {\n            backupInfo = await this.requestKeyBackupVersion();\n        } catch (e) {\n            logger.warn(\"Error checking for active key backup\", e);\n            this.serverBackupInfo = undefined;\n            return null;\n        }\n        this.checkedForBackup = true;\n\n        if (backupInfo && !backupInfo.version) {\n            logger.warn(\"active backup lacks a useful 'version'; ignoring it\");\n            backupInfo = undefined;\n        }\n        this.serverBackupInfo = backupInfo;\n\n        const activeVersion = await this.getActiveBackupVersion();\n\n        if (!backupInfo) {\n            if (activeVersion !== null) {\n                logger.log(\"No key backup present on server: disabling key backup\");\n                await this.disableKeyBackup();\n            } else {\n                logger.log(\"No key backup present on server: not enabling key backup\");\n            }\n            return null;\n        }\n\n        const trustInfo = await this.isKeyBackupTrusted(backupInfo);\n\n        if (!trustInfo.trusted) {\n            if (activeVersion !== null) {\n                logger.log(\"Key backup present on server but not trusted: disabling key backup\");\n                await this.disableKeyBackup();\n            } else {\n                logger.log(\"Key backup present on server but not trusted: not enabling key backup\");\n            }\n        } else {\n            if (activeVersion === null) {\n                logger.log(`Found usable key backup v${backupInfo.version}: enabling key backups`);\n                await this.enableKeyBackup(backupInfo);\n            } else if (activeVersion !== backupInfo.version) {\n                logger.log(`On backup version ${activeVersion} but found version ${backupInfo.version}: switching.`);\n                // This will remove any pending backup request, remove the backup key and reset the backup state of each room key we have.\n                await this.disableKeyBackup();\n                // Enabling will now trigger re-upload of all the keys\n                await this.enableKeyBackup(backupInfo);\n            } else {\n                logger.log(`Backup version ${backupInfo.version} still current`);\n            }\n        }\n        return { backupInfo, trustInfo };\n    }\n\n    private async enableKeyBackup(backupInfo: KeyBackupInfo): Promise<void> {\n        // we know for certain it must be a Curve25519 key, because we have verified it and only Curve25519\n        // keys can be verified.\n        //\n        // we also checked it has a valid `version`.\n        await this.olmMachine.enableBackupV1(\n            (backupInfo.auth_data as Curve25519AuthData).public_key,\n            backupInfo.version!,\n        );\n        this.activeBackupVersion = backupInfo.version!;\n\n        this.emit(CryptoEvent.KeyBackupStatus, true);\n\n        this.backupKeysLoop();\n    }\n\n    /**\n     * Restart the backup key loop if there is an active trusted backup.\n     * Doesn't try to check the backup server side. To be called when a new\n     * megolm key is known locally.\n     */\n    public async maybeUploadKey(): Promise<void> {\n        if (this.activeBackupVersion != null) {\n            this.backupKeysLoop();\n        }\n    }\n\n    private async disableKeyBackup(): Promise<void> {\n        await this.olmMachine.disableBackup();\n        this.activeBackupVersion = null;\n        this.emit(CryptoEvent.KeyBackupStatus, false);\n    }\n\n    private async backupKeysLoop(maxDelay = 10000): Promise<void> {\n        if (this.backupKeysLoopRunning) {\n            logger.log(`Backup loop already running`);\n            return;\n        }\n        this.backupKeysLoopRunning = true;\n\n        logger.log(`Backup: Starting keys upload loop for backup version:${this.activeBackupVersion}.`);\n\n        // wait between 0 and `maxDelay` seconds, to avoid backup\n        // requests from different clients hitting the server all at\n        // the same time when a new key is sent\n        const delay = Math.random() * maxDelay;\n        await sleep(delay);\n\n        try {\n            // number of consecutive network failures for exponential backoff\n            let numFailures = 0;\n            // The number of keys left to back up. (Populated lazily: see more comments below.)\n            let remainingToUploadCount: number | null = null;\n            // To avoid computing the key when only a few keys were added (after a sync for example),\n            // we compute the count only when at least two iterations are needed.\n            let isFirstIteration = true;\n\n            while (!this.stopped) {\n                // Get a batch of room keys to upload\n                let request: RustSdkCryptoJs.KeysBackupRequest | null = null;\n                try {\n                    request = await logDuration(\n                        logger,\n                        \"BackupRoomKeys: Get keys to backup from rust crypto-sdk\",\n                        async () => {\n                            return await this.olmMachine.backupRoomKeys();\n                        },\n                    );\n                } catch (err) {\n                    logger.error(\"Backup: Failed to get keys to backup from rust crypto-sdk\", err);\n                }\n\n                if (!request || this.stopped || !this.activeBackupVersion) {\n                    logger.log(`Backup: Ending loop for version ${this.activeBackupVersion}.`);\n                    if (!request) {\n                        // nothing more to upload\n                        this.emit(CryptoEvent.KeyBackupSessionsRemaining, 0);\n                    }\n                    return;\n                }\n\n                try {\n                    await this.outgoingRequestProcessor.makeOutgoingRequest(request);\n                    numFailures = 0;\n                    if (this.stopped) break;\n\n                    // Key count performance (`olmMachine.roomKeyCounts()`) can be pretty bad on some configurations.\n                    // In particular, we detected on some M1 macs that when the object store reaches a threshold, the count\n                    // performance stops growing in O(n) and suddenly becomes very slow (40s, 60s or more).\n                    // For reference, the performance drop occurs around 300-400k keys on the platforms where this issue is observed.\n                    // Even on other configurations, the count can take several seconds.\n                    // This will block other operations on the database, like sending messages.\n                    //\n                    // This is a workaround to avoid calling `olmMachine.roomKeyCounts()` too often, and only when necessary.\n                    // We don't call it on the first loop because there could be only a few keys to upload, and we don't want to wait for the count.\n                    if (!isFirstIteration && remainingToUploadCount === null) {\n                        try {\n                            const keyCount = await this.olmMachine.roomKeyCounts();\n                            remainingToUploadCount = keyCount.total - keyCount.backedUp;\n                        } catch (err) {\n                            logger.error(\"Backup: Failed to get key counts from rust crypto-sdk\", err);\n                        }\n                    }\n\n                    if (remainingToUploadCount !== null) {\n                        this.emit(CryptoEvent.KeyBackupSessionsRemaining, remainingToUploadCount);\n                        const keysCountInBatch = this.keysCountInBatch(request);\n                        // `OlmMachine.roomKeyCounts` is called only once for the current backupKeysLoop. But new\n                        // keys could be added during the current loop (after a sync for example).\n                        // So the count can get out of sync with the real number of remaining keys to upload.\n                        // Depending on the number of new keys imported and the time to complete the loop,\n                        // this could result in multiple events being emitted with a remaining key count of 0.\n                        remainingToUploadCount = Math.max(remainingToUploadCount - keysCountInBatch, 0);\n                    }\n                } catch (err) {\n                    numFailures++;\n                    logger.error(\"Backup: Error processing backup request for rust crypto-sdk\", err);\n                    if (err instanceof MatrixError) {\n                        const errCode = err.data.errcode;\n                        if (errCode == \"M_NOT_FOUND\" || errCode == \"M_WRONG_ROOM_KEYS_VERSION\") {\n                            logger.log(`Backup: Failed to upload keys to current vesion: ${errCode}.`);\n                            try {\n                                await this.disableKeyBackup();\n                            } catch (error) {\n                                logger.error(\"Backup: An error occurred while disabling key backup:\", error);\n                            }\n                            this.emit(CryptoEvent.KeyBackupFailed, err.data.errcode!);\n                            // There was an active backup and we are out of sync with the server\n                            // force a check server side\n                            this.backupKeysLoopRunning = false;\n                            this.checkKeyBackupAndEnable(true);\n                            return;\n                        } else if (err.isRateLimitError()) {\n                            // wait for that and then continue?\n                            try {\n                                const waitTime = err.getRetryAfterMs();\n                                if (waitTime && waitTime > 0) {\n                                    await sleep(waitTime);\n                                    continue;\n                                }\n                            } catch (error) {\n                                logger.warn(\n                                    \"Backup: An error occurred while retrieving a rate-limit retry delay\",\n                                    error,\n                                );\n                            } // else go to the normal backoff\n                        }\n                    }\n\n                    // Some other errors (mx, network, or CORS or invalid urls?) anyhow backoff\n                    // exponential backoff if we have failures\n                    await sleep(1000 * Math.pow(2, Math.min(numFailures - 1, 4)));\n                }\n                isFirstIteration = false;\n            }\n        } finally {\n            this.backupKeysLoopRunning = false;\n        }\n    }\n\n    /**\n     * Utility method to count the number of keys in a backup request, in order to update the remaining keys count.\n     * This should be the chunk size of the backup request for all requests but the last, but we don't have access to it\n     * (it's static in the Rust SDK).\n     * @param batch - The backup request to count the keys from.\n     *\n     * @returns The number of keys in the backup request.\n     */\n    private keysCountInBatch(batch: RustSdkCryptoJs.KeysBackupRequest): number {\n        const parsedBody: KeyBackup = JSON.parse(batch.body);\n        return countKeysInBackup(parsedBody);\n    }\n\n    /**\n     * Get information about a key backup from the server\n     * - If version is provided, get information about that backup version.\n     * - If no version is provided, get information about the latest backup.\n     *\n     * @param version - The version of the backup to get information about.\n     * @returns Information object from API or null if there is no active backup.\n     */\n    public async requestKeyBackupVersion(version?: string): Promise<KeyBackupInfo | null> {\n        return await requestKeyBackupVersion(this.http, version);\n    }\n\n    /**\n     * Creates a new key backup by generating a new random private key.\n     *\n     * If there is an existing backup server side it will be deleted and replaced\n     * by the new one.\n     *\n     * @param signObject - Method that should sign the backup with existing device and\n     * existing identity.\n     * @returns a KeyBackupCreationInfo - All information related to the backup.\n     */\n    public async setupKeyBackup(signObject: (authData: AuthData) => Promise<void>): Promise<KeyBackupCreationInfo> {\n        // Clean up any existing backup\n        await this.deleteAllKeyBackupVersions();\n\n        const randomKey = RustSdkCryptoJs.BackupDecryptionKey.createRandomKey();\n        const pubKey = randomKey.megolmV1PublicKey;\n\n        const authData = { public_key: pubKey.publicKeyBase64 };\n\n        await signObject(authData);\n\n        const res = await this.http.authedRequest<{ version: string }>(\n            Method.Post,\n            \"/room_keys/version\",\n            undefined,\n            {\n                algorithm: pubKey.algorithm,\n                auth_data: authData,\n            },\n            {\n                prefix: ClientPrefix.V3,\n            },\n        );\n\n        await this.saveBackupDecryptionKey(randomKey, res.version);\n\n        return {\n            version: res.version,\n            algorithm: pubKey.algorithm,\n            authData: authData,\n            decryptionKey: randomKey,\n        };\n    }\n\n    /**\n     * Deletes all key backups.\n     *\n     * Will call the API to delete active backup until there is no more present.\n     */\n    public async deleteAllKeyBackupVersions(): Promise<void> {\n        // there could be several backup versions. Delete all to be safe.\n        let current = (await this.requestKeyBackupVersion())?.version ?? null;\n        while (current != null) {\n            await this.deleteKeyBackupVersion(current);\n            current = (await this.requestKeyBackupVersion())?.version ?? null;\n        }\n\n        // XXX: Should this also update Secret Storage and delete any existing keys?\n    }\n\n    /**\n     * Deletes the given key backup.\n     *\n     * @param version - The backup version to delete.\n     */\n    public async deleteKeyBackupVersion(version: string): Promise<void> {\n        logger.debug(`deleteKeyBackupVersion v:${version}`);\n        const path = encodeUri(\"/room_keys/version/$version\", { $version: version });\n        await this.http.authedRequest<void>(Method.Delete, path, undefined, undefined, {\n            prefix: ClientPrefix.V3,\n        });\n        // If the backup we are deleting is the active one, we need to disable the key backup and to have the local properties reset\n        if (this.activeBackupVersion === version) {\n            this.serverBackupInfo = null;\n            await this.disableKeyBackup();\n        }\n    }\n\n    /**\n     * Creates a new backup decryptor for the given private key.\n     * @param decryptionKey - The private key to use for decryption.\n     */\n    public createBackupDecryptor(decryptionKey: RustSdkCryptoJs.BackupDecryptionKey): BackupDecryptor {\n        return new RustBackupDecryptor(decryptionKey);\n    }\n\n    /**\n     * Restore a key backup.\n     *\n     * @param backupVersion - The version of the backup to restore.\n     * @param backupDecryptor - The backup decryptor to use to decrypt the keys.\n     * @param opts - Options for the restore.\n     * @returns The total number of keys and the total imported.\n     */\n    public async restoreKeyBackup(\n        backupVersion: string,\n        backupDecryptor: BackupDecryptor,\n        opts?: KeyBackupRestoreOpts,\n    ): Promise<KeyBackupRestoreResult> {\n        const keyBackup = await this.downloadKeyBackup(backupVersion);\n        opts?.progressCallback?.({\n            stage: \"load_keys\",\n        });\n\n        return this.importKeyBackup(keyBackup, backupVersion, backupDecryptor, opts);\n    }\n\n    /**\n     * Call `/room_keys/keys` to download the key backup (room keys) for the given backup version.\n     * https://spec.matrix.org/v1.12/client-server-api/#get_matrixclientv3room_keyskeys\n     *\n     * @param backupVersion\n     * @returns The key backup response.\n     */\n    private downloadKeyBackup(backupVersion: string): Promise<KeyBackup> {\n        return this.http.authedRequest<KeyBackup>(\n            Method.Get,\n            \"/room_keys/keys\",\n            { version: backupVersion },\n            undefined,\n            {\n                prefix: ClientPrefix.V3,\n            },\n        );\n    }\n\n    /**\n     * Import the room keys from a `/room_keys/keys` call.\n     * Calls `opts.progressCallback` with the progress of the import.\n     *\n     * @param keyBackup - The response from the server containing the keys to import.\n     * @param backupVersion - The version of the backup info.\n     * @param backupDecryptor - The backup decryptor to use to decrypt the keys.\n     * @param opts - Options for the import.\n     *\n     * @returns The total number of keys and the total imported.\n     *\n     * @private\n     */\n    private async importKeyBackup(\n        keyBackup: KeyBackup,\n        backupVersion: string,\n        backupDecryptor: BackupDecryptor,\n        opts?: KeyBackupRestoreOpts,\n    ): Promise<KeyBackupRestoreResult> {\n        // We have a full backup here, it can get quite big, so we need to decrypt and import it in chunks.\n\n        const CHUNK_SIZE = 200;\n        // Get the total count as a first pass\n        const totalKeyCount = countKeysInBackup(keyBackup);\n        let totalImported = 0;\n        let totalFailures = 0;\n\n        /**\n         * This method is called when we have enough chunks to decrypt.\n         * It will decrypt the chunks and try to import the room keys.\n         * @param roomChunks\n         */\n        const handleChunkCallback = async (roomChunks: Map<string, KeyBackupRoomSessions>): Promise<void> => {\n            const currentChunk: IMegolmSessionData[] = [];\n            for (const roomId of roomChunks.keys()) {\n                // Decrypt the sessions for the given room\n                const decryptedSessions = await backupDecryptor.decryptSessions(roomChunks.get(roomId)!);\n                // Add the decrypted sessions to the current chunk\n                decryptedSessions.forEach((session) => {\n                    // We set the room_id for each session\n                    session.room_id = roomId;\n                    currentChunk.push(session);\n                });\n            }\n\n            // We have a chunk of decrypted keys: import them\n            try {\n                await this.importBackedUpRoomKeys(currentChunk, backupVersion);\n                totalImported += currentChunk.length;\n            } catch (e) {\n                totalFailures += currentChunk.length;\n                // We failed to import some keys, but we should still try to import the rest?\n                // Log the error and continue\n                logger.error(\"Error importing keys from backup\", e);\n            }\n\n            opts?.progressCallback?.({\n                total: totalKeyCount,\n                successes: totalImported,\n                stage: \"load_keys\",\n                failures: totalFailures,\n            });\n        };\n\n        let groupChunkCount = 0;\n        let chunkGroupByRoom: Map<string, KeyBackupRoomSessions> = new Map();\n\n        // Iterate over the rooms and sessions to group them in chunks\n        // And we call the handleChunkCallback when we have enough chunks to decrypt\n        for (const [roomId, roomData] of Object.entries(keyBackup.rooms)) {\n            // If there are no sessions for the room, skip it\n            if (!roomData.sessions) continue;\n\n            // Initialize a new chunk group for the current room\n            chunkGroupByRoom.set(roomId, {});\n\n            for (const [sessionId, session] of Object.entries(roomData.sessions)) {\n                // We set previously the chunk group for the current room, so we can safely get it\n                const sessionsForRoom = chunkGroupByRoom.get(roomId)!;\n                sessionsForRoom[sessionId] = session;\n                groupChunkCount += 1;\n                // If we have enough chunks to decrypt, call the block callback\n                if (groupChunkCount >= CHUNK_SIZE) {\n                    // We have enough chunks to decrypt\n                    await handleChunkCallback(chunkGroupByRoom);\n                    // Reset the chunk group\n                    chunkGroupByRoom = new Map();\n                    // There might be remaining keys for that room, so add back an entry for the current room.\n                    chunkGroupByRoom.set(roomId, {});\n                    groupChunkCount = 0;\n                }\n            }\n        }\n\n        // Handle remaining chunk if needed\n        if (groupChunkCount > 0) {\n            await handleChunkCallback(chunkGroupByRoom);\n        }\n\n        return { total: totalKeyCount, imported: totalImported };\n    }\n}\n\n/**\n * Checks if the provided backup info matches the given private key.\n *\n * @param info - The backup info to check.\n * @param backupDecryptionKey - The `BackupDecryptionKey` private key to check against.\n * @returns `true` if the private key can decrypt the backup, `false` otherwise.\n */\nfunction backupInfoMatchesBackupDecryptionKey(\n    info: KeyBackupInfo,\n    backupDecryptionKey: RustSdkCryptoJs.BackupDecryptionKey,\n): boolean {\n    if (info.algorithm !== \"m.megolm_backup.v1.curve25519-aes-sha2\") {\n        logger.warn(\"backupMatchesPrivateKey: Unsupported backup algorithm\", info.algorithm);\n        return false;\n    }\n\n    return (info.auth_data as Curve25519AuthData)?.public_key === backupDecryptionKey.megolmV1PublicKey.publicKeyBase64;\n}\n\n/**\n * Implementation of {@link BackupDecryptor} for the rust crypto backend.\n */\nexport class RustBackupDecryptor implements BackupDecryptor {\n    private decryptionKey: RustSdkCryptoJs.BackupDecryptionKey;\n    public sourceTrusted: boolean;\n\n    public constructor(decryptionKey: RustSdkCryptoJs.BackupDecryptionKey) {\n        this.decryptionKey = decryptionKey;\n        this.sourceTrusted = false;\n    }\n\n    /**\n     * Implements {@link BackupDecryptor#decryptSessions}\n     */\n    public async decryptSessions(\n        ciphertexts: Record<string, KeyBackupSession<Curve25519SessionData | AESEncryptedSecretStoragePayload>>,\n    ): Promise<IMegolmSessionData[]> {\n        const keys: IMegolmSessionData[] = [];\n        for (const [sessionId, sessionData] of Object.entries(ciphertexts)) {\n            try {\n                const decrypted = JSON.parse(\n                    this.decryptionKey.decryptV1(\n                        sessionData.session_data.ephemeral,\n                        sessionData.session_data.mac,\n                        sessionData.session_data.ciphertext,\n                    ),\n                );\n                decrypted.session_id = sessionId;\n                keys.push(decrypted);\n            } catch (e) {\n                logger.log(\"Failed to decrypt megolm session from backup\", e, sessionData);\n            }\n        }\n        return keys;\n    }\n\n    /**\n     * Implements {@link BackupDecryptor#free}\n     */\n    public free(): void {\n        this.decryptionKey.free();\n    }\n}\n\n/**\n * Fetch a key backup info from the server.\n *\n * If `version` is provided, calls `GET /room_keys/version/$version` and gets the backup info for that version.\n * See https://spec.matrix.org/v1.12/client-server-api/#get_matrixclientv3room_keysversionversion.\n *\n * If not, calls `GET /room_keys/version` and gets the latest backup info.\n * See https://spec.matrix.org/v1.12/client-server-api/#get_matrixclientv3room_keysversion\n *\n * @param http\n * @param version - the specific version of the backup info to fetch\n * @returns The key backup info or null if there is no backup.\n */\nexport async function requestKeyBackupVersion(\n    http: MatrixHttpApi<IHttpOpts & { onlyData: true }>,\n    version?: string,\n): Promise<KeyBackupInfo | null> {\n    try {\n        const path = version ? encodeUri(\"/room_keys/version/$version\", { $version: version }) : \"/room_keys/version\";\n        return await http.authedRequest<KeyBackupInfo>(Method.Get, path, undefined, undefined, {\n            prefix: ClientPrefix.V3,\n        });\n    } catch (e) {\n        if ((<MatrixError>e).errcode === \"M_NOT_FOUND\") {\n            return null;\n        } else {\n            throw e;\n        }\n    }\n}\n\n/**\n * Checks if the provided decryption key matches the public key of the key backup info.\n *\n * @param decryptionKey - The decryption key to check.\n * @param keyBackupInfo - The key backup info to check against.\n * @returns `true` if the decryption key matches the key backup info, `false` otherwise.\n */\nexport function decryptionKeyMatchesKeyBackupInfo(\n    decryptionKey: RustSdkCryptoJs.BackupDecryptionKey,\n    keyBackupInfo: KeyBackupInfo,\n): boolean {\n    const authData = <Curve25519AuthData>keyBackupInfo.auth_data;\n    return authData.public_key === decryptionKey.megolmV1PublicKey.publicKeyBase64;\n}\n\n/**\n * Counts the total number of keys present in a key backup.\n * @param keyBackup - The key backup to count the keys from.\n * @returns The total number of keys in the backup.\n */\nfunction countKeysInBackup(keyBackup: KeyBackup): number {\n    let count = 0;\n    for (const { sessions } of Object.values(keyBackup.rooms)) {\n        count += Object.keys(sessions).length;\n    }\n    return count;\n}\n\nexport type RustBackupCryptoEvents =\n    | CryptoEvent.KeyBackupStatus\n    | CryptoEvent.KeyBackupSessionsRemaining\n    | CryptoEvent.KeyBackupFailed\n    | CryptoEvent.KeyBackupDecryptionKeyCached;\n\nexport type RustBackupCryptoEventMap = {\n    [CryptoEvent.KeyBackupStatus]: (enabled: boolean) => void;\n    [CryptoEvent.KeyBackupSessionsRemaining]: (remaining: number) => void;\n    [CryptoEvent.KeyBackupFailed]: (errCode: string) => void;\n    [CryptoEvent.KeyBackupDecryptionKeyCached]: (version: string) => void;\n};\n\n/**\n * Response from GET `/room_keys/keys` endpoint.\n * See https://spec.matrix.org/latest/client-server-api/#get_matrixclientv3room_keyskeys\n */\nexport interface KeyBackup {\n    rooms: Record<string, { sessions: KeyBackupRoomSessions }>;\n}\n","/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { OlmMachine } from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport { OutgoingRequest, OutgoingRequestProcessor } from \"./OutgoingRequestProcessor.ts\";\nimport { Logger } from \"../logger.ts\";\nimport { defer, IDeferred, logDuration } from \"../utils.ts\";\n\n/**\n * OutgoingRequestsManager: responsible for processing outgoing requests from the OlmMachine.\n * Ensure that only one loop is going on at once, and that the requests are processed in order.\n */\nexport class OutgoingRequestsManager {\n    /** whether {@link stop} has been called */\n    private stopped = false;\n\n    /** whether {@link outgoingRequestLoop} is currently running */\n    private outgoingRequestLoopRunning = false;\n\n    /**\n     * If there are additional calls to doProcessOutgoingRequests() while there is a current call running\n     * we need to remember in order to call `doProcessOutgoingRequests` again (as there could be new requests).\n     *\n     * If this is defined, it is an indication that we need to do another iteration; in this case the deferred\n     * will resolve once that next iteration completes. If it is undefined, there have been no new calls\n     * to `doProcessOutgoingRequests` since the current iteration started.\n     */\n    private nextLoopDeferred?: IDeferred<void>;\n\n    public constructor(\n        private readonly logger: Logger,\n        private readonly olmMachine: OlmMachine,\n        public readonly outgoingRequestProcessor: OutgoingRequestProcessor,\n    ) {}\n\n    /**\n     * Shut down as soon as possible the current loop of outgoing requests processing.\n     */\n    public stop(): void {\n        this.stopped = true;\n    }\n\n    /**\n     * Process the OutgoingRequests from the OlmMachine.\n     *\n     * This should be called at the end of each sync, to process any OlmMachine OutgoingRequests created by the rust sdk.\n     * In some cases if OutgoingRequests need to be sent immediately, this can be called directly.\n     *\n     * Calls to doProcessOutgoingRequests() are processed synchronously, one after the other, in order.\n     * If doProcessOutgoingRequests() is called while another call is still being processed, it will be queued.\n     * Multiple calls to doProcessOutgoingRequests() when a call is already processing will be batched together.\n     */\n    public doProcessOutgoingRequests(): Promise<void> {\n        // Flag that we need at least one more iteration of the loop.\n        //\n        // It is important that we do this even if the loop is currently running. There is potential for a race whereby\n        // a request is added to the queue *after* `OlmMachine.outgoingRequests` checks the queue, but *before* it\n        // returns. In such a case, the item could sit there unnoticed for some time.\n        //\n        // In order to circumvent the race, we set a flag which tells the loop to go round once again even if the\n        // queue appears to be empty.\n        if (!this.nextLoopDeferred) {\n            this.nextLoopDeferred = defer();\n        }\n\n        // ... and wait for it to complete.\n        const result = this.nextLoopDeferred.promise;\n\n        // set the loop going if it is not already.\n        if (!this.outgoingRequestLoopRunning) {\n            this.outgoingRequestLoop().catch((e) => {\n                // this should not happen; outgoingRequestLoop should return any errors via `nextLoopDeferred`.\n                /* istanbul ignore next */\n                this.logger.error(\"Uncaught error in outgoing request loop\", e);\n            });\n        }\n        return result;\n    }\n\n    private async outgoingRequestLoop(): Promise<void> {\n        /* istanbul ignore if */\n        if (this.outgoingRequestLoopRunning) {\n            throw new Error(\"Cannot run two outgoing request loops\");\n        }\n        this.outgoingRequestLoopRunning = true;\n        try {\n            while (!this.stopped && this.nextLoopDeferred) {\n                const deferred = this.nextLoopDeferred;\n\n                // reset `nextLoopDeferred` so that any future calls to `doProcessOutgoingRequests` are queued\n                // for another additional iteration.\n                this.nextLoopDeferred = undefined;\n\n                // make the requests and feed the results back to the `nextLoopDeferred`\n                await this.processOutgoingRequests().then(deferred.resolve, deferred.reject);\n            }\n        } finally {\n            this.outgoingRequestLoopRunning = false;\n        }\n\n        if (this.nextLoopDeferred) {\n            // the loop was stopped, but there was a call to `doProcessOutgoingRequests`. Make sure that\n            // we reject the promise in case anything is waiting for it.\n            this.nextLoopDeferred.reject(new Error(\"OutgoingRequestsManager was stopped\"));\n        }\n    }\n\n    /**\n     * Make a single request to `olmMachine.outgoingRequests` and do the corresponding requests.\n     */\n    private async processOutgoingRequests(): Promise<void> {\n        if (this.stopped) return;\n\n        const outgoingRequests: OutgoingRequest[] = await this.olmMachine.outgoingRequests();\n\n        for (const request of outgoingRequests) {\n            if (this.stopped) return;\n            try {\n                await logDuration(this.logger, `Make outgoing request ${request.type}`, async () => {\n                    await this.outgoingRequestProcessor.makeOutgoingRequest(request);\n                });\n            } catch (e) {\n                // as part of the loop we silently ignore errors, but log them.\n                // The rust sdk will retry the request later as it won't have been marked as sent.\n                this.logger.error(`Failed to process outgoing request ${request.type}: ${e}`);\n            }\n        }\n    }\n}\n","/*\nCopyright 2023 - 2024 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport { OlmMachine } from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport { Curve25519AuthData, KeyBackupInfo, KeyBackupSession } from \"../crypto-api/keybackup.ts\";\nimport { CryptoEvent } from \"../crypto-api/index.ts\";\nimport { Logger } from \"../logger.ts\";\nimport { ClientPrefix, IHttpOpts, MatrixError, MatrixHttpApi, Method } from \"../http-api/index.ts\";\nimport { RustBackupManager } from \"./backup.ts\";\nimport { encodeUri, sleep } from \"../utils.ts\";\nimport { BackupDecryptor } from \"../common-crypto/CryptoBackend.ts\";\n\n// The minimum time to wait between two retries in case of errors. To avoid hammering the server.\nconst KEY_BACKUP_BACKOFF = 5000; // ms\n\n/**\n * Enumerates the different kind of errors that can occurs when downloading and importing a key from backup.\n */\nenum KeyDownloadErrorCode {\n    /** The requested key is not in the backup. */\n    MISSING_DECRYPTION_KEY = \"MISSING_DECRYPTION_KEY\",\n    /** A network error occurred while trying to download the key from backup. */\n    NETWORK_ERROR = \"NETWORK_ERROR\",\n    /** The loop has been stopped. */\n    STOPPED = \"STOPPED\",\n}\n\nclass KeyDownloadError extends Error {\n    public constructor(public readonly code: KeyDownloadErrorCode) {\n        super(`Failed to get key from backup: ${code}`);\n        this.name = \"KeyDownloadError\";\n    }\n}\n\nclass KeyDownloadRateLimitError extends Error {\n    public constructor(public readonly retryMillis: number) {\n        super(`Failed to get key from backup: rate limited`);\n        this.name = \"KeyDownloadRateLimitError\";\n    }\n}\n\n/** Details of a megolm session whose key we are trying to fetch. */\ntype SessionInfo = { roomId: string; megolmSessionId: string };\n\n/** Holds the current backup decryptor and version that should be used.\n *\n * This is intended to be used as an immutable object (a new instance should be created if the configuration changes),\n * and some of the logic relies on that, so the properties are marked as `readonly`.\n */\ntype Configuration = {\n    readonly backupVersion: string;\n    readonly decryptor: BackupDecryptor;\n};\n\n/**\n * Used when an 'unable to decrypt' error occurs. It attempts to download the key from the backup.\n *\n * The current backup API lacks pagination, which can lead to lengthy key retrieval times for large histories (several 10s of minutes).\n * To mitigate this, keys are downloaded on demand as decryption errors occurs.\n * While this approach may result in numerous requests, it improves user experience by reducing wait times for message decryption.\n *\n * The PerSessionKeyBackupDownloader is resistant to backup configuration changes: it will automatically resume querying when\n * the backup is configured correctly.\n */\nexport class PerSessionKeyBackupDownloader {\n    private stopped = false;\n\n    /**\n     * The version and decryption key to use with current backup if all set up correctly.\n     *\n     * Will not be set unless `hasConfigurationProblem` is `false`.\n     */\n    private configuration: Configuration | null = null;\n\n    /** We remember when a session was requested and not found in backup to avoid query again too soon.\n     * Map of session_id to timestamp */\n    private sessionLastCheckAttemptedTime: Map<string, number> = new Map();\n\n    /** The logger to use */\n    private readonly logger: Logger;\n\n    /** Whether the download loop is running. */\n    private downloadLoopRunning = false;\n\n    /** The list of requests that are queued. */\n    private queuedRequests: SessionInfo[] = [];\n\n    /** Remembers if we have a configuration problem. */\n    private hasConfigurationProblem = false;\n\n    /** The current server backup version check promise. To avoid doing a server call if one is in flight. */\n    private currentBackupVersionCheck: Promise<Configuration | null> | null = null;\n\n    /**\n     * Creates a new instance of PerSessionKeyBackupDownloader.\n     *\n     * @param backupManager - The backup manager to use.\n     * @param olmMachine - The olm machine to use.\n     * @param http - The http instance to use.\n     * @param logger - The logger to use.\n     */\n    public constructor(\n        logger: Logger,\n        private readonly olmMachine: OlmMachine,\n        private readonly http: MatrixHttpApi<IHttpOpts & { onlyData: true }>,\n        private readonly backupManager: RustBackupManager,\n    ) {\n        this.logger = logger.getChild(\"[PerSessionKeyBackupDownloader]\");\n\n        backupManager.on(CryptoEvent.KeyBackupStatus, this.onBackupStatusChanged);\n        backupManager.on(CryptoEvent.KeyBackupFailed, this.onBackupStatusChanged);\n        backupManager.on(CryptoEvent.KeyBackupDecryptionKeyCached, this.onBackupStatusChanged);\n    }\n\n    /**\n     * Check if key download is successfully configured and active.\n     *\n     * @return `true` if key download is correctly configured and active; otherwise `false`.\n     */\n    public isKeyBackupDownloadConfigured(): boolean {\n        return this.configuration !== null;\n    }\n\n    /**\n     * Return the details of the latest backup on the server, when we last checked.\n     *\n     * This is just a convenience method to expose {@link RustBackupManager.getServerBackupInfo}.\n     */\n    public async getServerBackupInfo(): Promise<KeyBackupInfo | null | undefined> {\n        return await this.backupManager.getServerBackupInfo();\n    }\n\n    /**\n     * Called when a MissingRoomKey or UnknownMessageIndex decryption error is encountered.\n     *\n     * This will try to download the key from the backup if there is a trusted active backup.\n     * In case of success the key will be imported and the onRoomKeysUpdated callback will be called\n     * internally by the rust-sdk and decryption will be retried.\n     *\n     * @param roomId - The room ID of the room where the error occurred.\n     * @param megolmSessionId - The megolm session ID that is missing.\n     */\n    public onDecryptionKeyMissingError(roomId: string, megolmSessionId: string): void {\n        // Several messages encrypted with the same session may be decrypted at the same time,\n        // so we need to be resistant and not query several time the same session.\n        if (this.isAlreadyInQueue(roomId, megolmSessionId)) {\n            // There is already a request queued for this session, no need to queue another one.\n            this.logger.trace(`Not checking key backup for session ${megolmSessionId} as it is already queued`);\n            return;\n        }\n\n        if (this.wasRequestedRecently(megolmSessionId)) {\n            // We already tried to download this session recently and it was not in backup, no need to try again.\n            this.logger.trace(\n                `Not checking key backup for session ${megolmSessionId} as it was already requested recently`,\n            );\n            return;\n        }\n\n        // We always add the request to the queue, even if we have a configuration problem (can't access backup).\n        // This is to make sure that if the configuration problem is resolved, we will try to download the key.\n        // This will happen after an initial sync, at this point the backup will not yet be trusted and the decryption\n        // key will not be available, but it will be just after the verification.\n        // We don't need to persist it because currently on refresh the sdk will retry to decrypt the messages in error.\n        this.queuedRequests.push({ roomId, megolmSessionId });\n\n        // Start the download loop if it's not already running.\n        this.downloadKeysLoop();\n    }\n\n    public stop(): void {\n        this.stopped = true;\n        this.backupManager.off(CryptoEvent.KeyBackupStatus, this.onBackupStatusChanged);\n        this.backupManager.off(CryptoEvent.KeyBackupFailed, this.onBackupStatusChanged);\n        this.backupManager.off(CryptoEvent.KeyBackupDecryptionKeyCached, this.onBackupStatusChanged);\n    }\n\n    /**\n     * Called when the backup status changes (CryptoEvents)\n     * This will trigger a check of the backup configuration.\n     */\n    private onBackupStatusChanged = (): void => {\n        // we want to force check configuration, so we clear the current one.\n        this.hasConfigurationProblem = false;\n        this.configuration = null;\n        this.getOrCreateBackupConfiguration().then((configuration) => {\n            if (configuration) {\n                // restart the download loop if it was stopped\n                this.downloadKeysLoop();\n            }\n        });\n    };\n\n    /** Returns true if the megolm session is already queued for download. */\n    private isAlreadyInQueue(roomId: string, megolmSessionId: string): boolean {\n        return this.queuedRequests.some((info) => {\n            return info.roomId == roomId && info.megolmSessionId == megolmSessionId;\n        });\n    }\n\n    /**\n     * Marks the session as not found in backup, to avoid retrying to soon for a key not in backup\n     *\n     * @param megolmSessionId - The megolm session ID that is missing.\n     */\n    private markAsNotFoundInBackup(megolmSessionId: string): void {\n        const now = Date.now();\n        this.sessionLastCheckAttemptedTime.set(megolmSessionId, now);\n        // if too big make some cleaning to keep under control\n        if (this.sessionLastCheckAttemptedTime.size > 100) {\n            this.sessionLastCheckAttemptedTime = new Map(\n                Array.from(this.sessionLastCheckAttemptedTime).filter((sid, ts) => {\n                    return Math.max(now - ts, 0) < KEY_BACKUP_BACKOFF;\n                }),\n            );\n        }\n    }\n\n    /** Returns true if the session was requested recently. */\n    private wasRequestedRecently(megolmSessionId: string): boolean {\n        const lastCheck = this.sessionLastCheckAttemptedTime.get(megolmSessionId);\n        if (!lastCheck) return false;\n        return Math.max(Date.now() - lastCheck, 0) < KEY_BACKUP_BACKOFF;\n    }\n\n    private async getBackupDecryptionKey(): Promise<RustSdkCryptoJs.BackupKeys | null> {\n        try {\n            return await this.olmMachine.getBackupKeys();\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Requests a key from the server side backup.\n     *\n     * @param version - The backup version to use.\n     * @param roomId - The room ID of the room where the error occurred.\n     * @param sessionId - The megolm session ID that is missing.\n     */\n    private async requestRoomKeyFromBackup(\n        version: string,\n        roomId: string,\n        sessionId: string,\n    ): Promise<KeyBackupSession> {\n        const path = encodeUri(\"/room_keys/keys/$roomId/$sessionId\", {\n            $roomId: roomId,\n            $sessionId: sessionId,\n        });\n\n        return await this.http.authedRequest<KeyBackupSession>(Method.Get, path, { version }, undefined, {\n            prefix: ClientPrefix.V3,\n        });\n    }\n\n    private async downloadKeysLoop(): Promise<void> {\n        if (this.downloadLoopRunning) return;\n\n        // If we have a configuration problem, we don't want to try to download.\n        // If any configuration change is detected, we will retry and restart the loop.\n        if (this.hasConfigurationProblem) return;\n\n        this.downloadLoopRunning = true;\n\n        try {\n            while (this.queuedRequests.length > 0) {\n                // we just peek the first one without removing it, so if a new request for same key comes in while we're\n                // processing this one, it won't queue another request.\n                const request = this.queuedRequests[0];\n                try {\n                    // The backup could have changed between the time we queued the request and now, so we need to check\n                    const configuration = await this.getOrCreateBackupConfiguration();\n                    if (!configuration) {\n                        // Backup is not configured correctly, so stop the loop.\n                        this.downloadLoopRunning = false;\n                        return;\n                    }\n\n                    const result = await this.queryKeyBackup(request.roomId, request.megolmSessionId, configuration);\n\n                    if (this.stopped) {\n                        return;\n                    }\n                    // We got the encrypted key from backup, let's try to decrypt and import it.\n                    try {\n                        await this.decryptAndImport(request, result, configuration);\n                    } catch (e) {\n                        this.logger.error(\n                            `Error while decrypting and importing key backup for session ${request.megolmSessionId}`,\n                            e,\n                        );\n                    }\n                    // now remove the request from the queue as we've processed it.\n                    this.queuedRequests.shift();\n                } catch (err) {\n                    if (err instanceof KeyDownloadError) {\n                        switch (err.code) {\n                            case KeyDownloadErrorCode.MISSING_DECRYPTION_KEY:\n                                this.markAsNotFoundInBackup(request.megolmSessionId);\n                                // continue for next one\n                                this.queuedRequests.shift();\n                                break;\n                            case KeyDownloadErrorCode.NETWORK_ERROR:\n                                // We don't want to hammer if there is a problem, so wait a bit.\n                                await sleep(KEY_BACKUP_BACKOFF);\n                                break;\n                            case KeyDownloadErrorCode.STOPPED:\n                                // If the downloader was stopped, we don't want to retry.\n                                this.downloadLoopRunning = false;\n                                return;\n                        }\n                    } else if (err instanceof KeyDownloadRateLimitError) {\n                        // we want to retry after the backoff time\n                        await sleep(err.retryMillis);\n                    }\n                }\n            }\n        } finally {\n            // all pending request have been processed, we can stop the loop.\n            this.downloadLoopRunning = false;\n        }\n    }\n\n    /**\n     * Query the backup for a key.\n     *\n     * @param targetRoomId - ID of the room that the session is used in.\n     * @param targetSessionId - ID of the session for which to check backup.\n     * @param configuration - The backup configuration to use.\n     */\n    private async queryKeyBackup(\n        targetRoomId: string,\n        targetSessionId: string,\n        configuration: Configuration,\n    ): Promise<KeyBackupSession> {\n        this.logger.debug(`Checking key backup for session ${targetSessionId}`);\n        if (this.stopped) throw new KeyDownloadError(KeyDownloadErrorCode.STOPPED);\n        try {\n            const res = await this.requestRoomKeyFromBackup(configuration.backupVersion, targetRoomId, targetSessionId);\n            this.logger.debug(`Got key from backup for sessionId:${targetSessionId}`);\n            return res;\n        } catch (e) {\n            if (this.stopped) throw new KeyDownloadError(KeyDownloadErrorCode.STOPPED);\n\n            this.logger.info(`No luck requesting key backup for session ${targetSessionId}: ${e}`);\n            if (e instanceof MatrixError) {\n                const errCode = e.data.errcode;\n                if (errCode == \"M_NOT_FOUND\") {\n                    // Unfortunately the spec doesn't give us a way to differentiate between a missing key and a wrong version.\n                    // Synapse will return:\n                    //     - \"error\": \"Unknown backup version\" if the version is wrong.\n                    //     - \"error\": \"No room_keys found\" if the key is missing.\n                    // It's useful to know if the key is missing or if the version is wrong.\n                    // As it's not spec'ed, we fall back on considering the key is not in backup.\n                    // Notice that this request will be lost if instead the backup got out of sync (updated from other session).\n                    throw new KeyDownloadError(KeyDownloadErrorCode.MISSING_DECRYPTION_KEY);\n                }\n                if (e.isRateLimitError()) {\n                    let waitTime: number | undefined;\n                    try {\n                        waitTime = e.getRetryAfterMs() ?? undefined;\n                    } catch (error) {\n                        this.logger.warn(\"Error while retrieving a rate-limit retry delay\", error);\n                    }\n                    if (waitTime && waitTime > 0) {\n                        this.logger.info(`Rate limited by server, waiting ${waitTime}ms`);\n                    }\n                    throw new KeyDownloadRateLimitError(waitTime ?? KEY_BACKUP_BACKOFF);\n                }\n            }\n            throw new KeyDownloadError(KeyDownloadErrorCode.NETWORK_ERROR);\n        }\n    }\n\n    private async decryptAndImport(\n        sessionInfo: SessionInfo,\n        data: KeyBackupSession,\n        configuration: Configuration,\n    ): Promise<void> {\n        const sessionsToImport: Record<string, KeyBackupSession> = { [sessionInfo.megolmSessionId]: data };\n\n        const keys = await configuration!.decryptor.decryptSessions(sessionsToImport);\n        for (const k of keys) {\n            k.room_id = sessionInfo.roomId;\n        }\n        await this.backupManager.importBackedUpRoomKeys(keys, configuration.backupVersion);\n    }\n\n    /**\n     * Gets the current backup configuration or create one if it doesn't exist.\n     *\n     * When a valid configuration is found it is cached and returned for subsequent calls.\n     * Otherwise, if a check is forced or a check has not yet been done, a new check is done.\n     *\n     * @returns The backup configuration to use or null if there is a configuration problem.\n     */\n    private async getOrCreateBackupConfiguration(): Promise<Configuration | null> {\n        if (this.configuration) {\n            return this.configuration;\n        }\n\n        // We already tried to check the configuration and it failed.\n        // We don't want to try again immediately, we will retry if a configuration change is detected.\n        if (this.hasConfigurationProblem) {\n            return null;\n        }\n\n        // This method can be called rapidly by several emitted CryptoEvent, so we need to make sure that we don't\n        // query the server several times.\n        if (this.currentBackupVersionCheck != null) {\n            this.logger.debug(`Already checking server version, use current promise`);\n            return await this.currentBackupVersionCheck;\n        }\n\n        this.currentBackupVersionCheck = this.internalCheckFromServer();\n        try {\n            return await this.currentBackupVersionCheck;\n        } finally {\n            this.currentBackupVersionCheck = null;\n        }\n    }\n\n    private async internalCheckFromServer(): Promise<Configuration | null> {\n        let currentServerVersion = null;\n        try {\n            currentServerVersion = await this.backupManager.getServerBackupInfo();\n        } catch (e) {\n            this.logger.debug(`Backup: error while checking server version: ${e}`);\n            this.hasConfigurationProblem = true;\n            return null;\n        }\n        this.logger.debug(`Got current backup version from server: ${currentServerVersion?.version}`);\n\n        if (currentServerVersion?.algorithm != \"m.megolm_backup.v1.curve25519-aes-sha2\") {\n            this.logger.info(`Unsupported algorithm ${currentServerVersion?.algorithm}`);\n            this.hasConfigurationProblem = true;\n            return null;\n        }\n\n        if (!currentServerVersion?.version) {\n            this.logger.info(`No current key backup`);\n            this.hasConfigurationProblem = true;\n            return null;\n        }\n\n        const activeVersion = await this.backupManager.getActiveBackupVersion();\n        if (activeVersion == null || currentServerVersion.version != activeVersion) {\n            // Either the current backup version on server side is not trusted, or it is out of sync with the active version on the client side.\n            this.logger.info(\n                `The current backup version on the server (${currentServerVersion.version}) is not trusted. Version we are currently backing up to: ${activeVersion}`,\n            );\n            this.hasConfigurationProblem = true;\n            return null;\n        }\n\n        const backupKeys = await this.getBackupDecryptionKey();\n        if (!backupKeys?.decryptionKey) {\n            this.logger.debug(`Not checking key backup for session (no decryption key)`);\n            this.hasConfigurationProblem = true;\n            return null;\n        }\n\n        if (activeVersion != backupKeys.backupVersion) {\n            this.logger.debug(\n                `Version for which we have a decryption key (${backupKeys.backupVersion}) doesn't match the version we are backing up to (${activeVersion})`,\n            );\n            this.hasConfigurationProblem = true;\n            return null;\n        }\n\n        const authData = currentServerVersion.auth_data as Curve25519AuthData;\n        if (authData.public_key != backupKeys.decryptionKey.megolmV1PublicKey.publicKeyBase64) {\n            this.logger.debug(`Key backup on server does not match our decryption key`);\n            this.hasConfigurationProblem = true;\n            return null;\n        }\n\n        const backupDecryptor = this.backupManager.createBackupDecryptor(backupKeys.decryptionKey);\n        this.hasConfigurationProblem = false;\n        this.configuration = {\n            decryptor: backupDecryptor,\n            backupVersion: activeVersion,\n        };\n        return this.configuration;\n    }\n}\n","/*\nCopyright 2022-2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport anotherjson from \"another-json\";\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport type { IEventDecryptionResult, IMegolmSessionData } from \"../@types/crypto.ts\";\nimport { KnownMembership } from \"../@types/membership.ts\";\nimport type { IDeviceLists, IToDeviceEvent } from \"../sync-accumulator.ts\";\nimport type { IEncryptedEventInfo } from \"../crypto/api.ts\";\nimport type { ToDevicePayload, ToDeviceBatch } from \"../models/ToDeviceMessage.ts\";\nimport { MatrixEvent, MatrixEventEvent } from \"../models/event.ts\";\nimport { Room } from \"../models/room.ts\";\nimport { RoomMember } from \"../models/room-member.ts\";\nimport {\n    BackupDecryptor,\n    CryptoBackend,\n    DecryptionError,\n    OnSyncCompletedData,\n} from \"../common-crypto/CryptoBackend.ts\";\nimport { logger, Logger, LogSpan } from \"../logger.ts\";\nimport { IHttpOpts, MatrixHttpApi, Method } from \"../http-api/index.ts\";\nimport { RoomEncryptor } from \"./RoomEncryptor.ts\";\nimport { OutgoingRequestProcessor } from \"./OutgoingRequestProcessor.ts\";\nimport { KeyClaimManager } from \"./KeyClaimManager.ts\";\nimport { logDuration, MapWithDefault } from \"../utils.ts\";\nimport {\n    BackupTrustInfo,\n    BootstrapCrossSigningOpts,\n    CreateSecretStorageOpts,\n    CrossSigningKey,\n    CrossSigningKeyInfo,\n    CrossSigningStatus,\n    CryptoApi,\n    CryptoCallbacks,\n    DecryptionFailureCode,\n    DeviceVerificationStatus,\n    EventEncryptionInfo,\n    EventShieldColour,\n    EventShieldReason,\n    GeneratedSecretStorageKey,\n    ImportRoomKeysOpts,\n    KeyBackupCheck,\n    KeyBackupInfo,\n    OwnDeviceKeys,\n    UserVerificationStatus,\n    VerificationRequest,\n    encodeRecoveryKey,\n    deriveRecoveryKeyFromPassphrase,\n    DeviceIsolationMode,\n    AllDevicesIsolationMode,\n    DeviceIsolationModeKind,\n    CryptoEvent,\n    CryptoEventHandlerMap,\n    KeyBackupRestoreOpts,\n    KeyBackupRestoreResult,\n} from \"../crypto-api/index.ts\";\nimport { deviceKeysToDeviceMap, rustDeviceToJsDevice } from \"./device-converter.ts\";\nimport { IDownloadKeyResult, IQueryKeysRequest } from \"../client.ts\";\nimport { Device, DeviceMap } from \"../models/device.ts\";\nimport { SECRET_STORAGE_ALGORITHM_V1_AES, ServerSideSecretStorage } from \"../secret-storage.ts\";\nimport { CrossSigningIdentity } from \"./CrossSigningIdentity.ts\";\nimport { secretStorageCanAccessSecrets, secretStorageContainsCrossSigningKeys } from \"./secret-storage.ts\";\nimport { isVerificationEvent, RustVerificationRequest, verificationMethodIdentifierToMethod } from \"./verification.ts\";\nimport { EventType, MsgType } from \"../@types/event.ts\";\nimport { TypedEventEmitter } from \"../models/typed-event-emitter.ts\";\nimport { decryptionKeyMatchesKeyBackupInfo, RustBackupManager } from \"./backup.ts\";\nimport { TypedReEmitter } from \"../ReEmitter.ts\";\nimport { randomString } from \"../randomstring.ts\";\nimport { ClientStoppedError } from \"../errors.ts\";\nimport { ISignatures } from \"../@types/signed.ts\";\nimport { decodeBase64, encodeBase64 } from \"../base64.ts\";\nimport { OutgoingRequestsManager } from \"./OutgoingRequestsManager.ts\";\nimport { PerSessionKeyBackupDownloader } from \"./PerSessionKeyBackupDownloader.ts\";\nimport { DehydratedDeviceManager } from \"./DehydratedDeviceManager.ts\";\nimport { VerificationMethod } from \"../types.ts\";\nimport { keyFromAuthData } from \"../common-crypto/key-passphrase.ts\";\n\nconst ALL_VERIFICATION_METHODS = [\n    VerificationMethod.Sas,\n    VerificationMethod.ScanQrCode,\n    VerificationMethod.ShowQrCode,\n    VerificationMethod.Reciprocate,\n];\n\ninterface ISignableObject {\n    signatures?: ISignatures;\n    unsigned?: object;\n}\n\n/**\n * An implementation of {@link CryptoBackend} using the Rust matrix-sdk-crypto.\n *\n * @internal\n */\nexport class RustCrypto extends TypedEventEmitter<RustCryptoEvents, CryptoEventHandlerMap> implements CryptoBackend {\n    /**\n     * The number of iterations to use when deriving a recovery key from a passphrase.\n     */\n    private readonly RECOVERY_KEY_DERIVATION_ITERATIONS = 500000;\n\n    private _trustCrossSignedDevices = true;\n    private deviceIsolationMode: DeviceIsolationMode = new AllDevicesIsolationMode(false);\n\n    /** whether {@link stop} has been called */\n    private stopped = false;\n\n    /** mapping of roomId → encryptor class */\n    private roomEncryptors: Record<string, RoomEncryptor> = {};\n\n    private eventDecryptor: EventDecryptor;\n    private keyClaimManager: KeyClaimManager;\n    private outgoingRequestProcessor: OutgoingRequestProcessor;\n    private crossSigningIdentity: CrossSigningIdentity;\n    private readonly backupManager: RustBackupManager;\n    private outgoingRequestsManager: OutgoingRequestsManager;\n    private readonly perSessionBackupDownloader: PerSessionKeyBackupDownloader;\n    private readonly dehydratedDeviceManager: DehydratedDeviceManager;\n    private readonly reemitter = new TypedReEmitter<RustCryptoEvents, CryptoEventHandlerMap>(this);\n\n    public constructor(\n        private readonly logger: Logger,\n\n        /** The `OlmMachine` from the underlying rust crypto sdk. */\n        private readonly olmMachine: RustSdkCryptoJs.OlmMachine,\n\n        /**\n         * Low-level HTTP interface: used to make outgoing requests required by the rust SDK.\n         *\n         * We expect it to set the access token, etc.\n         */\n        private readonly http: MatrixHttpApi<IHttpOpts & { onlyData: true }>,\n\n        /** The local user's User ID. */\n        private readonly userId: string,\n\n        /** The local user's Device ID. */\n        _deviceId: string,\n\n        /** Interface to server-side secret storage */\n        private readonly secretStorage: ServerSideSecretStorage,\n\n        /** Crypto callbacks provided by the application */\n        private readonly cryptoCallbacks: CryptoCallbacks,\n    ) {\n        super();\n        this.outgoingRequestProcessor = new OutgoingRequestProcessor(olmMachine, http);\n        this.outgoingRequestsManager = new OutgoingRequestsManager(\n            this.logger,\n            olmMachine,\n            this.outgoingRequestProcessor,\n        );\n\n        this.keyClaimManager = new KeyClaimManager(olmMachine, this.outgoingRequestProcessor);\n\n        this.backupManager = new RustBackupManager(olmMachine, http, this.outgoingRequestProcessor);\n        this.perSessionBackupDownloader = new PerSessionKeyBackupDownloader(\n            this.logger,\n            this.olmMachine,\n            this.http,\n            this.backupManager,\n        );\n        this.dehydratedDeviceManager = new DehydratedDeviceManager(\n            this.logger,\n            olmMachine,\n            http,\n            this.outgoingRequestProcessor,\n            secretStorage,\n        );\n        this.eventDecryptor = new EventDecryptor(this.logger, olmMachine, this.perSessionBackupDownloader);\n\n        this.reemitter.reEmit(this.backupManager, [\n            CryptoEvent.KeyBackupStatus,\n            CryptoEvent.KeyBackupSessionsRemaining,\n            CryptoEvent.KeyBackupFailed,\n            CryptoEvent.KeyBackupDecryptionKeyCached,\n        ]);\n\n        this.crossSigningIdentity = new CrossSigningIdentity(olmMachine, this.outgoingRequestProcessor, secretStorage);\n\n        // Check and start in background the key backup connection\n        this.checkKeyBackupAndEnable();\n    }\n\n    /**\n     * Return the OlmMachine only if {@link RustCrypto#stop} has not been called.\n     *\n     * This allows us to better handle race conditions where the client is stopped before or during a crypto API call.\n     *\n     * @throws ClientStoppedError if {@link RustCrypto#stop} has been called.\n     */\n    private getOlmMachineOrThrow(): RustSdkCryptoJs.OlmMachine {\n        if (this.stopped) {\n            throw new ClientStoppedError();\n        }\n        return this.olmMachine;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // CryptoBackend implementation\n    //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    public set globalErrorOnUnknownDevices(_v: boolean) {\n        // Not implemented for rust crypto.\n    }\n\n    public get globalErrorOnUnknownDevices(): boolean {\n        // Not implemented for rust crypto.\n        return false;\n    }\n\n    public stop(): void {\n        // stop() may be called multiple times, but attempting to close() the OlmMachine twice\n        // will cause an error.\n        if (this.stopped) {\n            return;\n        }\n        this.stopped = true;\n\n        this.keyClaimManager.stop();\n        this.backupManager.stop();\n        this.outgoingRequestsManager.stop();\n        this.perSessionBackupDownloader.stop();\n        this.dehydratedDeviceManager.stop();\n\n        // make sure we close() the OlmMachine; doing so means that all the Rust objects will be\n        // cleaned up; in particular, the indexeddb connections will be closed, which means they\n        // can then be deleted.\n        this.olmMachine.close();\n    }\n\n    public async encryptEvent(event: MatrixEvent, _room: Room): Promise<void> {\n        const roomId = event.getRoomId()!;\n        const encryptor = this.roomEncryptors[roomId];\n\n        if (!encryptor) {\n            throw new Error(`Cannot encrypt event in unconfigured room ${roomId}`);\n        }\n\n        await encryptor.encryptEvent(event, this.globalBlacklistUnverifiedDevices, this.deviceIsolationMode);\n    }\n\n    public async decryptEvent(event: MatrixEvent): Promise<IEventDecryptionResult> {\n        const roomId = event.getRoomId();\n        if (!roomId) {\n            // presumably, a to-device message. These are normally decrypted in preprocessToDeviceMessages\n            // so the fact it has come back here suggests that decryption failed.\n            //\n            // once we drop support for the libolm crypto implementation, we can stop passing to-device messages\n            // through decryptEvent and hence get rid of this case.\n            throw new Error(\"to-device event was not decrypted in preprocessToDeviceMessages\");\n        }\n        return await this.eventDecryptor.attemptEventDecryption(event, this.deviceIsolationMode);\n    }\n\n    /**\n     * Implementation of (deprecated) {@link MatrixClient#getEventEncryptionInfo}.\n     *\n     * @param event - event to inspect\n     */\n    public getEventEncryptionInfo(event: MatrixEvent): IEncryptedEventInfo {\n        const ret: Partial<IEncryptedEventInfo> = {};\n\n        ret.senderKey = event.getSenderKey() ?? undefined;\n        ret.algorithm = event.getWireContent().algorithm;\n\n        if (!ret.senderKey || !ret.algorithm) {\n            ret.encrypted = false;\n            return ret as IEncryptedEventInfo;\n        }\n        ret.encrypted = true;\n        ret.authenticated = true;\n        ret.mismatchedSender = true;\n        return ret as IEncryptedEventInfo;\n    }\n\n    /**\n     * Implementation of {@link CryptoBackend#checkUserTrust}.\n     *\n     * Stub for backwards compatibility.\n     *\n     */\n    public checkUserTrust(userId: string): UserVerificationStatus {\n        return new UserVerificationStatus(false, false, false);\n    }\n\n    /**\n     * Get the cross signing information for a given user.\n     *\n     * The cross-signing API is currently UNSTABLE and may change without notice.\n     *\n     * @param userId - the user ID to get the cross-signing info for.\n     *\n     * @returns the cross signing information for the user.\n     */\n    public getStoredCrossSigningForUser(userId: string): null {\n        // TODO\n        return null;\n    }\n\n    /**\n     * This function is unneeded for the rust-crypto.\n     * The cross signing key import and the device verification are done in {@link CryptoApi#bootstrapCrossSigning}\n     *\n     * The function is stub to keep the compatibility with the old crypto.\n     * More information: https://github.com/vector-im/element-web/issues/25648\n     *\n     * Implementation of {@link CryptoBackend#checkOwnCrossSigningTrust}\n     */\n    public async checkOwnCrossSigningTrust(): Promise<void> {\n        return;\n    }\n\n    /**\n     * Implementation of {@link CryptoBackend#getBackupDecryptor}.\n     */\n    public async getBackupDecryptor(backupInfo: KeyBackupInfo, privKey: ArrayLike<number>): Promise<BackupDecryptor> {\n        if (!(privKey instanceof Uint8Array)) {\n            throw new Error(`getBackupDecryptor: expects Uint8Array`);\n        }\n\n        if (backupInfo.algorithm != \"m.megolm_backup.v1.curve25519-aes-sha2\") {\n            throw new Error(`getBackupDecryptor: Unsupported algorithm ${backupInfo.algorithm}`);\n        }\n\n        const backupDecryptionKey = RustSdkCryptoJs.BackupDecryptionKey.fromBase64(encodeBase64(privKey));\n        if (!decryptionKeyMatchesKeyBackupInfo(backupDecryptionKey, backupInfo)) {\n            throw new Error(`getBackupDecryptor: key backup on server does not match the decryption key`);\n        }\n\n        return this.backupManager.createBackupDecryptor(backupDecryptionKey);\n    }\n\n    /**\n     * Implementation of {@link CryptoBackend#importBackedUpRoomKeys}.\n     */\n    public async importBackedUpRoomKeys(\n        keys: IMegolmSessionData[],\n        backupVersion: string,\n        opts?: ImportRoomKeysOpts,\n    ): Promise<void> {\n        return await this.backupManager.importBackedUpRoomKeys(keys, backupVersion, opts);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // CryptoApi implementation\n    //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    public globalBlacklistUnverifiedDevices = false;\n\n    /**\n     * Implementation of {@link CryptoApi#getVersion}.\n     */\n    public getVersion(): string {\n        const versions = RustSdkCryptoJs.getVersions();\n        return `Rust SDK ${versions.matrix_sdk_crypto} (${versions.git_sha}), Vodozemac ${versions.vodozemac}`;\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#setDeviceIsolationMode}.\n     */\n    public setDeviceIsolationMode(isolationMode: DeviceIsolationMode): void {\n        this.deviceIsolationMode = isolationMode;\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#isEncryptionEnabledInRoom}.\n     */\n    public async isEncryptionEnabledInRoom(roomId: string): Promise<boolean> {\n        const roomSettings: RustSdkCryptoJs.RoomSettings | undefined = await this.olmMachine.getRoomSettings(\n            new RustSdkCryptoJs.RoomId(roomId),\n        );\n        return Boolean(roomSettings?.algorithm);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getOwnDeviceKeys}.\n     */\n    public async getOwnDeviceKeys(): Promise<OwnDeviceKeys> {\n        const keys = this.olmMachine.identityKeys;\n        return { ed25519: keys.ed25519.toBase64(), curve25519: keys.curve25519.toBase64() };\n    }\n\n    public prepareToEncrypt(room: Room): void {\n        const encryptor = this.roomEncryptors[room.roomId];\n\n        if (encryptor) {\n            encryptor.prepareForEncryption(this.globalBlacklistUnverifiedDevices, this.deviceIsolationMode);\n        }\n    }\n\n    public forceDiscardSession(roomId: string): Promise<void> {\n        return this.roomEncryptors[roomId]?.forceDiscardSession();\n    }\n\n    public async exportRoomKeys(): Promise<IMegolmSessionData[]> {\n        const raw = await this.olmMachine.exportRoomKeys(() => true);\n        return JSON.parse(raw);\n    }\n\n    public async exportRoomKeysAsJson(): Promise<string> {\n        return await this.olmMachine.exportRoomKeys(() => true);\n    }\n\n    public async importRoomKeys(keys: IMegolmSessionData[], opts?: ImportRoomKeysOpts): Promise<void> {\n        return await this.backupManager.importRoomKeys(keys, opts);\n    }\n\n    public async importRoomKeysAsJson(keys: string, opts?: ImportRoomKeysOpts): Promise<void> {\n        return await this.backupManager.importRoomKeysAsJson(keys, opts);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi.userHasCrossSigningKeys}.\n     */\n    public async userHasCrossSigningKeys(userId = this.userId, downloadUncached = false): Promise<boolean> {\n        // TODO: could probably do with a more efficient way of doing this than returning the whole set and searching\n        const rustTrackedUsers: Set<RustSdkCryptoJs.UserId> = await this.olmMachine.trackedUsers();\n        let rustTrackedUser: RustSdkCryptoJs.UserId | undefined;\n        for (const u of rustTrackedUsers) {\n            if (userId === u.toString()) {\n                rustTrackedUser = u;\n                break;\n            }\n        }\n\n        if (rustTrackedUser !== undefined) {\n            if (userId === this.userId) {\n                /* make sure we have an *up-to-date* idea of the user's cross-signing keys. This is important, because if we\n                 * return \"false\" here, we will end up generating new cross-signing keys and replacing the existing ones.\n                 */\n                const request = this.olmMachine.queryKeysForUsers(\n                    // clone as rust layer will take ownership and it's reused later\n                    [rustTrackedUser.clone()],\n                );\n                await this.outgoingRequestProcessor.makeOutgoingRequest(request);\n            }\n            const userIdentity = await this.olmMachine.getIdentity(rustTrackedUser);\n            userIdentity?.free();\n            return userIdentity !== undefined;\n        } else if (downloadUncached) {\n            // Download the cross signing keys and check if the master key is available\n            const keyResult = await this.downloadDeviceList(new Set([userId]));\n            const keys = keyResult.master_keys?.[userId];\n\n            // No master key\n            if (!keys) return false;\n\n            // `keys` is an object with { [`ed25519:${pubKey}`]: pubKey }\n            // We assume only a single key, and we want the bare form without type\n            // prefix, so we select the values.\n            return Boolean(Object.values(keys.keys)[0]);\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get the device information for the given list of users.\n     *\n     * @param userIds - The users to fetch.\n     * @param downloadUncached - If true, download the device list for users whose device list we are not\n     *    currently tracking. Defaults to false, in which case such users will not appear at all in the result map.\n     *\n     * @returns A map `{@link DeviceMap}`.\n     */\n    public async getUserDeviceInfo(userIds: string[], downloadUncached = false): Promise<DeviceMap> {\n        const deviceMapByUserId = new Map<string, Map<string, Device>>();\n        const rustTrackedUsers: Set<RustSdkCryptoJs.UserId> = await this.getOlmMachineOrThrow().trackedUsers();\n\n        // Convert RustSdkCryptoJs.UserId to a `Set<string>`\n        const trackedUsers = new Set<string>();\n        rustTrackedUsers.forEach((rustUserId) => trackedUsers.add(rustUserId.toString()));\n\n        // Keep untracked user to download their keys after\n        const untrackedUsers: Set<string> = new Set();\n\n        for (const userId of userIds) {\n            // if this is a tracked user, we can just fetch the device list from the rust-sdk\n            // (NB: this is probably ok even if we race with a leave event such that we stop tracking the user's\n            // devices: the rust-sdk will return the last-known device list, which will be good enough.)\n            if (trackedUsers.has(userId)) {\n                deviceMapByUserId.set(userId, await this.getUserDevices(userId));\n            } else {\n                untrackedUsers.add(userId);\n            }\n        }\n\n        // for any users whose device lists we are not tracking, fall back to downloading the device list\n        // over HTTP.\n        if (downloadUncached && untrackedUsers.size >= 1) {\n            const queryResult = await this.downloadDeviceList(untrackedUsers);\n            Object.entries(queryResult.device_keys).forEach(([userId, deviceKeys]) =>\n                deviceMapByUserId.set(userId, deviceKeysToDeviceMap(deviceKeys)),\n            );\n        }\n\n        return deviceMapByUserId;\n    }\n\n    /**\n     * Get the device list for the given user from the olm machine\n     * @param userId - Rust SDK UserId\n     */\n    private async getUserDevices(userId: string): Promise<Map<string, Device>> {\n        const rustUserId = new RustSdkCryptoJs.UserId(userId);\n\n        // For reasons I don't really understand, the Javascript FinalizationRegistry doesn't seem to run the\n        // registered callbacks when `userDevices` goes out of scope, nor when the individual devices in the array\n        // returned by `userDevices.devices` do so.\n        //\n        // This is particularly problematic, because each of those structures holds a reference to the\n        // VerificationMachine, which in turn holds a reference to the IndexeddbCryptoStore. Hence, we end up leaking\n        // open connections to the crypto store, which means the store can't be deleted on logout.\n        //\n        // To fix this, we explicitly call `.free` on each of the objects, which tells the rust code to drop the\n        // allocated memory and decrement the refcounts for the crypto store.\n\n        // Wait for up to a second for any in-flight device list requests to complete.\n        // The reason for this isn't so much to avoid races (some level of raciness is\n        // inevitable for this method) but to make testing easier.\n        const userDevices: RustSdkCryptoJs.UserDevices = await this.olmMachine.getUserDevices(rustUserId, 1);\n        try {\n            const deviceArray: RustSdkCryptoJs.Device[] = userDevices.devices();\n            try {\n                return new Map(\n                    deviceArray.map((device) => [device.deviceId.toString(), rustDeviceToJsDevice(device, rustUserId)]),\n                );\n            } finally {\n                deviceArray.forEach((d) => d.free());\n            }\n        } finally {\n            userDevices.free();\n        }\n    }\n\n    /**\n     * Download the given user keys by calling `/keys/query` request\n     * @param untrackedUsers - download keys of these users\n     */\n    private async downloadDeviceList(untrackedUsers: Set<string>): Promise<IDownloadKeyResult> {\n        const queryBody: IQueryKeysRequest = { device_keys: {} };\n        untrackedUsers.forEach((user) => (queryBody.device_keys[user] = []));\n\n        return await this.http.authedRequest(Method.Post, \"/_matrix/client/v3/keys/query\", undefined, queryBody, {\n            prefix: \"\",\n        });\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getTrustCrossSignedDevices}.\n     */\n    public getTrustCrossSignedDevices(): boolean {\n        return this._trustCrossSignedDevices;\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#setTrustCrossSignedDevices}.\n     */\n    public setTrustCrossSignedDevices(val: boolean): void {\n        this._trustCrossSignedDevices = val;\n        // TODO: legacy crypto goes through the list of known devices and emits DeviceVerificationChanged\n        //  events. Maybe we need to do the same?\n    }\n\n    /**\n     * Mark the given device as locally verified.\n     *\n     * Implementation of {@link CryptoApi#setDeviceVerified}.\n     */\n    public async setDeviceVerified(userId: string, deviceId: string, verified = true): Promise<void> {\n        const device: RustSdkCryptoJs.Device | undefined = await this.olmMachine.getDevice(\n            new RustSdkCryptoJs.UserId(userId),\n            new RustSdkCryptoJs.DeviceId(deviceId),\n        );\n\n        if (!device) {\n            throw new Error(`Unknown device ${userId}|${deviceId}`);\n        }\n        try {\n            await device.setLocalTrust(\n                verified ? RustSdkCryptoJs.LocalTrust.Verified : RustSdkCryptoJs.LocalTrust.Unset,\n            );\n        } finally {\n            device.free();\n        }\n    }\n\n    /**\n     * Blindly cross-sign one of our other devices.\n     *\n     * Implementation of {@link CryptoApi#crossSignDevice}.\n     */\n    public async crossSignDevice(deviceId: string): Promise<void> {\n        const device: RustSdkCryptoJs.Device | undefined = await this.olmMachine.getDevice(\n            new RustSdkCryptoJs.UserId(this.userId),\n            new RustSdkCryptoJs.DeviceId(deviceId),\n        );\n        if (!device) {\n            throw new Error(`Unknown device ${deviceId}`);\n        }\n        try {\n            const outgoingRequest: RustSdkCryptoJs.SignatureUploadRequest = await device.verify();\n            await this.outgoingRequestProcessor.makeOutgoingRequest(outgoingRequest);\n        } finally {\n            device.free();\n        }\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getDeviceVerificationStatus}.\n     */\n    public async getDeviceVerificationStatus(\n        userId: string,\n        deviceId: string,\n    ): Promise<DeviceVerificationStatus | null> {\n        const device: RustSdkCryptoJs.Device | undefined = await this.olmMachine.getDevice(\n            new RustSdkCryptoJs.UserId(userId),\n            new RustSdkCryptoJs.DeviceId(deviceId),\n        );\n\n        if (!device) return null;\n        try {\n            return new DeviceVerificationStatus({\n                signedByOwner: device.isCrossSignedByOwner(),\n                crossSigningVerified: device.isCrossSigningTrusted(),\n                localVerified: device.isLocallyTrusted(),\n                trustCrossSignedDevices: this._trustCrossSignedDevices,\n            });\n        } finally {\n            device.free();\n        }\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getUserVerificationStatus}.\n     */\n    public async getUserVerificationStatus(userId: string): Promise<UserVerificationStatus> {\n        const userIdentity: RustSdkCryptoJs.UserIdentity | RustSdkCryptoJs.OwnUserIdentity | undefined =\n            await this.getOlmMachineOrThrow().getIdentity(new RustSdkCryptoJs.UserId(userId));\n        if (userIdentity === undefined) {\n            return new UserVerificationStatus(false, false, false);\n        }\n\n        const verified = userIdentity.isVerified();\n        const wasVerified = userIdentity.wasPreviouslyVerified();\n        const needsUserApproval =\n            userIdentity instanceof RustSdkCryptoJs.UserIdentity ? userIdentity.identityNeedsUserApproval() : false;\n        userIdentity.free();\n        return new UserVerificationStatus(verified, wasVerified, false, needsUserApproval);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#pinCurrentUserIdentity}.\n     */\n    public async pinCurrentUserIdentity(userId: string): Promise<void> {\n        const userIdentity: RustSdkCryptoJs.UserIdentity | RustSdkCryptoJs.OwnUserIdentity | undefined =\n            await this.getOlmMachineOrThrow().getIdentity(new RustSdkCryptoJs.UserId(userId));\n\n        if (userIdentity === undefined) {\n            throw new Error(\"Cannot pin identity of unknown user\");\n        }\n\n        if (userIdentity instanceof RustSdkCryptoJs.OwnUserIdentity) {\n            throw new Error(\"Cannot pin identity of own user\");\n        }\n\n        await userIdentity.pinCurrentMasterKey();\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#isCrossSigningReady}\n     */\n    public async isCrossSigningReady(): Promise<boolean> {\n        const { privateKeysInSecretStorage, privateKeysCachedLocally } = await this.getCrossSigningStatus();\n        const hasKeysInCache =\n            Boolean(privateKeysCachedLocally.masterKey) &&\n            Boolean(privateKeysCachedLocally.selfSigningKey) &&\n            Boolean(privateKeysCachedLocally.userSigningKey);\n\n        const identity = await this.getOwnIdentity();\n\n        // Cross-signing is ready if the public identity is trusted, and the private keys\n        // are either cached, or accessible via secret-storage.\n        return !!identity?.isVerified() && (hasKeysInCache || privateKeysInSecretStorage);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getCrossSigningKeyId}\n     */\n    public async getCrossSigningKeyId(type: CrossSigningKey = CrossSigningKey.Master): Promise<string | null> {\n        const userIdentity: RustSdkCryptoJs.OwnUserIdentity | undefined = await this.olmMachine.getIdentity(\n            new RustSdkCryptoJs.UserId(this.userId),\n        );\n        if (!userIdentity) {\n            // The public keys are not available on this device\n            return null;\n        }\n\n        try {\n            const crossSigningStatus: RustSdkCryptoJs.CrossSigningStatus = await this.olmMachine.crossSigningStatus();\n\n            const privateKeysOnDevice =\n                crossSigningStatus.hasMaster && crossSigningStatus.hasUserSigning && crossSigningStatus.hasSelfSigning;\n\n            if (!privateKeysOnDevice) {\n                // The private keys are not available on this device\n                return null;\n            }\n\n            if (!userIdentity.isVerified()) {\n                // We have both public and private keys, but they don't match!\n                return null;\n            }\n\n            let key: string;\n            switch (type) {\n                case CrossSigningKey.Master:\n                    key = userIdentity.masterKey;\n                    break;\n                case CrossSigningKey.SelfSigning:\n                    key = userIdentity.selfSigningKey;\n                    break;\n                case CrossSigningKey.UserSigning:\n                    key = userIdentity.userSigningKey;\n                    break;\n                default:\n                    // Unknown type\n                    return null;\n            }\n\n            const parsedKey: CrossSigningKeyInfo = JSON.parse(key);\n            // `keys` is an object with { [`ed25519:${pubKey}`]: pubKey }\n            // We assume only a single key, and we want the bare form without type\n            // prefix, so we select the values.\n            return Object.values(parsedKey.keys)[0];\n        } finally {\n            userIdentity.free();\n        }\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#bootstrapCrossSigning}\n     */\n    public async bootstrapCrossSigning(opts: BootstrapCrossSigningOpts): Promise<void> {\n        await this.crossSigningIdentity.bootstrapCrossSigning(opts);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#isSecretStorageReady}\n     */\n    public async isSecretStorageReady(): Promise<boolean> {\n        // make sure that the cross-signing keys are stored\n        const secretsToCheck = [\n            \"m.cross_signing.master\",\n            \"m.cross_signing.user_signing\",\n            \"m.cross_signing.self_signing\",\n        ];\n\n        // if key backup is active, we also need to check that the backup decryption key is stored\n        const keyBackupEnabled = (await this.backupManager.getActiveBackupVersion()) != null;\n        if (keyBackupEnabled) {\n            secretsToCheck.push(\"m.megolm_backup.v1\");\n        }\n\n        return secretStorageCanAccessSecrets(this.secretStorage, secretsToCheck);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#bootstrapSecretStorage}\n     */\n    public async bootstrapSecretStorage({\n        createSecretStorageKey,\n        setupNewSecretStorage,\n        setupNewKeyBackup,\n    }: CreateSecretStorageOpts = {}): Promise<void> {\n        // If an AES Key is already stored in the secret storage and setupNewSecretStorage is not set\n        // we don't want to create a new key\n        const isNewSecretStorageKeyNeeded = setupNewSecretStorage || !(await this.secretStorageHasAESKey());\n\n        if (isNewSecretStorageKeyNeeded) {\n            if (!createSecretStorageKey) {\n                throw new Error(\"unable to create a new secret storage key, createSecretStorageKey is not set\");\n            }\n\n            // Create a new storage key and add it to secret storage\n            this.logger.info(\"bootstrapSecretStorage: creating new secret storage key\");\n            const recoveryKey = await createSecretStorageKey();\n            if (!recoveryKey) {\n                throw new Error(\"createSecretStorageKey() callback did not return a secret storage key\");\n            }\n            await this.addSecretStorageKeyToSecretStorage(recoveryKey);\n        }\n\n        const crossSigningStatus: RustSdkCryptoJs.CrossSigningStatus = await this.olmMachine.crossSigningStatus();\n        const hasPrivateKeys =\n            crossSigningStatus.hasMaster && crossSigningStatus.hasSelfSigning && crossSigningStatus.hasUserSigning;\n\n        // If we have cross-signing private keys cached, store them in secret\n        // storage if they are not there already.\n        if (\n            hasPrivateKeys &&\n            (isNewSecretStorageKeyNeeded || !(await secretStorageContainsCrossSigningKeys(this.secretStorage)))\n        ) {\n            this.logger.info(\"bootstrapSecretStorage: cross-signing keys not yet exported; doing so now.\");\n\n            const crossSigningPrivateKeys: RustSdkCryptoJs.CrossSigningKeyExport =\n                await this.olmMachine.exportCrossSigningKeys();\n\n            if (!crossSigningPrivateKeys.masterKey) {\n                throw new Error(\"missing master key in cross signing private keys\");\n            }\n\n            if (!crossSigningPrivateKeys.userSigningKey) {\n                throw new Error(\"missing user signing key in cross signing private keys\");\n            }\n\n            if (!crossSigningPrivateKeys.self_signing_key) {\n                throw new Error(\"missing self signing key in cross signing private keys\");\n            }\n\n            await this.secretStorage.store(\"m.cross_signing.master\", crossSigningPrivateKeys.masterKey);\n            await this.secretStorage.store(\"m.cross_signing.user_signing\", crossSigningPrivateKeys.userSigningKey);\n            await this.secretStorage.store(\"m.cross_signing.self_signing\", crossSigningPrivateKeys.self_signing_key);\n        }\n\n        if (setupNewKeyBackup) {\n            await this.resetKeyBackup();\n        }\n    }\n\n    /**\n     * Add the secretStorage key to the secret storage\n     * - The secret storage key must have the `keyInfo` field filled\n     * - The secret storage key is set as the default key of the secret storage\n     * - Call `cryptoCallbacks.cacheSecretStorageKey` when done\n     *\n     * @param secretStorageKey - The secret storage key to add in the secret storage.\n     */\n    private async addSecretStorageKeyToSecretStorage(secretStorageKey: GeneratedSecretStorageKey): Promise<void> {\n        const secretStorageKeyObject = await this.secretStorage.addKey(SECRET_STORAGE_ALGORITHM_V1_AES, {\n            passphrase: secretStorageKey.keyInfo?.passphrase,\n            name: secretStorageKey.keyInfo?.name,\n            key: secretStorageKey.privateKey,\n        });\n\n        await this.secretStorage.setDefaultKeyId(secretStorageKeyObject.keyId);\n\n        this.cryptoCallbacks.cacheSecretStorageKey?.(\n            secretStorageKeyObject.keyId,\n            secretStorageKeyObject.keyInfo,\n            secretStorageKey.privateKey,\n        );\n    }\n\n    /**\n     * Check if a secret storage AES Key is already added in secret storage\n     *\n     * @returns True if an AES key is in the secret storage\n     */\n    private async secretStorageHasAESKey(): Promise<boolean> {\n        // See if we already have an AES secret-storage key.\n        const secretStorageKeyTuple = await this.secretStorage.getKey();\n\n        if (!secretStorageKeyTuple) return false;\n\n        const [, keyInfo] = secretStorageKeyTuple;\n\n        // Check if the key is an AES key\n        return keyInfo.algorithm === SECRET_STORAGE_ALGORITHM_V1_AES;\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getCrossSigningStatus}\n     */\n    public async getCrossSigningStatus(): Promise<CrossSigningStatus> {\n        const userIdentity: RustSdkCryptoJs.OwnUserIdentity | null = await this.getOlmMachineOrThrow().getIdentity(\n            new RustSdkCryptoJs.UserId(this.userId),\n        );\n\n        const publicKeysOnDevice =\n            Boolean(userIdentity?.masterKey) &&\n            Boolean(userIdentity?.selfSigningKey) &&\n            Boolean(userIdentity?.userSigningKey);\n        userIdentity?.free();\n\n        const privateKeysInSecretStorage = await secretStorageContainsCrossSigningKeys(this.secretStorage);\n        const crossSigningStatus: RustSdkCryptoJs.CrossSigningStatus | null =\n            await this.getOlmMachineOrThrow().crossSigningStatus();\n\n        return {\n            publicKeysOnDevice,\n            privateKeysInSecretStorage,\n            privateKeysCachedLocally: {\n                masterKey: Boolean(crossSigningStatus?.hasMaster),\n                userSigningKey: Boolean(crossSigningStatus?.hasUserSigning),\n                selfSigningKey: Boolean(crossSigningStatus?.hasSelfSigning),\n            },\n        };\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#createRecoveryKeyFromPassphrase}\n     */\n    public async createRecoveryKeyFromPassphrase(password?: string): Promise<GeneratedSecretStorageKey> {\n        if (password) {\n            // Generate the key from the passphrase\n            // first we generate a random salt\n            const salt = randomString(32);\n            // then we derive the key from the passphrase\n            const recoveryKey = await deriveRecoveryKeyFromPassphrase(\n                password,\n                salt,\n                this.RECOVERY_KEY_DERIVATION_ITERATIONS,\n            );\n            return {\n                keyInfo: {\n                    passphrase: {\n                        algorithm: \"m.pbkdf2\",\n                        iterations: this.RECOVERY_KEY_DERIVATION_ITERATIONS,\n                        salt,\n                    },\n                },\n                privateKey: recoveryKey,\n                encodedPrivateKey: encodeRecoveryKey(recoveryKey),\n            };\n        } else {\n            // Using the navigator crypto API to generate the private key\n            const key = new Uint8Array(32);\n            globalThis.crypto.getRandomValues(key);\n            return {\n                privateKey: key,\n                encodedPrivateKey: encodeRecoveryKey(key),\n            };\n        }\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getEncryptionInfoForEvent}.\n     */\n    public async getEncryptionInfoForEvent(event: MatrixEvent): Promise<EventEncryptionInfo | null> {\n        return this.eventDecryptor.getEncryptionInfoForEvent(event);\n    }\n\n    /**\n     * Returns to-device verification requests that are already in progress for the given user id.\n     *\n     * Implementation of {@link CryptoApi#getVerificationRequestsToDeviceInProgress}\n     *\n     * @param userId - the ID of the user to query\n     *\n     * @returns the VerificationRequests that are in progress\n     */\n    public getVerificationRequestsToDeviceInProgress(userId: string): VerificationRequest[] {\n        const requests: RustSdkCryptoJs.VerificationRequest[] = this.olmMachine.getVerificationRequests(\n            new RustSdkCryptoJs.UserId(userId),\n        );\n        return requests\n            .filter((request) => request.roomId === undefined)\n            .map(\n                (request) =>\n                    new RustVerificationRequest(\n                        this.olmMachine,\n                        request,\n                        this.outgoingRequestProcessor,\n                        this._supportedVerificationMethods,\n                    ),\n            );\n    }\n\n    /**\n     * Finds a DM verification request that is already in progress for the given room id\n     *\n     * Implementation of {@link CryptoApi#findVerificationRequestDMInProgress}\n     *\n     * @param roomId - the room to use for verification\n     * @param userId - search the verification request for the given user\n     *\n     * @returns the VerificationRequest that is in progress, if any\n     *\n     */\n    public findVerificationRequestDMInProgress(roomId: string, userId?: string): VerificationRequest | undefined {\n        if (!userId) throw new Error(\"missing userId\");\n\n        const requests: RustSdkCryptoJs.VerificationRequest[] = this.olmMachine.getVerificationRequests(\n            new RustSdkCryptoJs.UserId(userId),\n        );\n\n        // Search for the verification request for the given room id\n        const request = requests.find((request) => request.roomId?.toString() === roomId);\n\n        if (request) {\n            return new RustVerificationRequest(\n                this.olmMachine,\n                request,\n                this.outgoingRequestProcessor,\n                this._supportedVerificationMethods,\n            );\n        }\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#requestVerificationDM}\n     */\n    public async requestVerificationDM(userId: string, roomId: string): Promise<VerificationRequest> {\n        const userIdentity: RustSdkCryptoJs.UserIdentity | undefined = await this.olmMachine.getIdentity(\n            new RustSdkCryptoJs.UserId(userId),\n        );\n\n        if (!userIdentity) throw new Error(`unknown userId ${userId}`);\n\n        try {\n            // Transform the verification methods into rust objects\n            const methods = this._supportedVerificationMethods.map((method) =>\n                verificationMethodIdentifierToMethod(method),\n            );\n            // Get the request content to send to the DM room\n            const verificationEventContent: string = await userIdentity.verificationRequestContent(methods);\n\n            // Send the request content to send to the DM room\n            const eventId = await this.sendVerificationRequestContent(roomId, verificationEventContent);\n\n            // Get a verification request\n            const request: RustSdkCryptoJs.VerificationRequest = await userIdentity.requestVerification(\n                new RustSdkCryptoJs.RoomId(roomId),\n                new RustSdkCryptoJs.EventId(eventId),\n                methods,\n            );\n            return new RustVerificationRequest(\n                this.olmMachine,\n                request,\n                this.outgoingRequestProcessor,\n                this._supportedVerificationMethods,\n            );\n        } finally {\n            userIdentity.free();\n        }\n    }\n\n    /**\n     * Send the verification content to a room\n     * See https://spec.matrix.org/v1.7/client-server-api/#put_matrixclientv3roomsroomidsendeventtypetxnid\n     *\n     * Prefer to use {@link OutgoingRequestProcessor.makeOutgoingRequest} when dealing with {@link RustSdkCryptoJs.RoomMessageRequest}\n     *\n     * @param roomId - the targeted room\n     * @param verificationEventContent - the request body.\n     *\n     * @returns the event id\n     */\n    private async sendVerificationRequestContent(roomId: string, verificationEventContent: string): Promise<string> {\n        const txId = randomString(32);\n        // Send the verification request content to the DM room\n        const { event_id: eventId } = await this.http.authedRequest<{ event_id: string }>(\n            Method.Put,\n            `/_matrix/client/v3/rooms/${encodeURIComponent(roomId)}/send/m.room.message/${encodeURIComponent(txId)}`,\n            undefined,\n            verificationEventContent,\n            {\n                prefix: \"\",\n            },\n        );\n\n        return eventId;\n    }\n\n    /**\n     * The verification methods we offer to the other side during an interactive verification.\n     */\n    private _supportedVerificationMethods: string[] = ALL_VERIFICATION_METHODS;\n\n    /**\n     * Set the verification methods we offer to the other side during an interactive verification.\n     *\n     * If `undefined`, we will offer all the methods supported by the Rust SDK.\n     */\n    public setSupportedVerificationMethods(methods: string[] | undefined): void {\n        // by default, the Rust SDK does not offer `m.qr_code.scan.v1`, but we do want to offer that.\n        this._supportedVerificationMethods = methods ?? ALL_VERIFICATION_METHODS;\n    }\n\n    /**\n     * Send a verification request to our other devices.\n     *\n     * If a verification is already in flight, returns it. Otherwise, initiates a new one.\n     *\n     * Implementation of {@link CryptoApi#requestOwnUserVerification}.\n     *\n     * @returns a VerificationRequest when the request has been sent to the other party.\n     */\n    public async requestOwnUserVerification(): Promise<VerificationRequest> {\n        const userIdentity: RustSdkCryptoJs.OwnUserIdentity | undefined = await this.olmMachine.getIdentity(\n            new RustSdkCryptoJs.UserId(this.userId),\n        );\n        if (userIdentity === undefined) {\n            throw new Error(\"cannot request verification for this device when there is no existing cross-signing key\");\n        }\n\n        try {\n            const [request, outgoingRequest]: [RustSdkCryptoJs.VerificationRequest, RustSdkCryptoJs.ToDeviceRequest] =\n                await userIdentity.requestVerification(\n                    this._supportedVerificationMethods.map(verificationMethodIdentifierToMethod),\n                );\n            await this.outgoingRequestProcessor.makeOutgoingRequest(outgoingRequest);\n            return new RustVerificationRequest(\n                this.olmMachine,\n                request,\n                this.outgoingRequestProcessor,\n                this._supportedVerificationMethods,\n            );\n        } finally {\n            userIdentity.free();\n        }\n    }\n\n    /**\n     * Request an interactive verification with the given device.\n     *\n     * If a verification is already in flight, returns it. Otherwise, initiates a new one.\n     *\n     * Implementation of {@link CryptoApi#requestDeviceVerification}.\n     *\n     * @param userId - ID of the owner of the device to verify\n     * @param deviceId - ID of the device to verify\n     *\n     * @returns a VerificationRequest when the request has been sent to the other party.\n     */\n    public async requestDeviceVerification(userId: string, deviceId: string): Promise<VerificationRequest> {\n        const device: RustSdkCryptoJs.Device | undefined = await this.olmMachine.getDevice(\n            new RustSdkCryptoJs.UserId(userId),\n            new RustSdkCryptoJs.DeviceId(deviceId),\n        );\n\n        if (!device) {\n            throw new Error(\"Not a known device\");\n        }\n\n        try {\n            const [request, outgoingRequest] = device.requestVerification(\n                this._supportedVerificationMethods.map(verificationMethodIdentifierToMethod),\n            );\n            await this.outgoingRequestProcessor.makeOutgoingRequest(outgoingRequest);\n            return new RustVerificationRequest(\n                this.olmMachine,\n                request,\n                this.outgoingRequestProcessor,\n                this._supportedVerificationMethods,\n            );\n        } finally {\n            device.free();\n        }\n    }\n\n    /**\n     * Fetch the backup decryption key we have saved in our store.\n     *\n     * Implementation of {@link CryptoApi#getSessionBackupPrivateKey}.\n     *\n     * @returns the key, if any, or null\n     */\n    public async getSessionBackupPrivateKey(): Promise<Uint8Array | null> {\n        const backupKeys: RustSdkCryptoJs.BackupKeys = await this.olmMachine.getBackupKeys();\n        if (!backupKeys.decryptionKey) return null;\n        return Buffer.from(backupKeys.decryptionKey.toBase64(), \"base64\");\n    }\n\n    /**\n     * Store the backup decryption key.\n     *\n     * Implementation of {@link CryptoApi#storeSessionBackupPrivateKey}.\n     *\n     * @param key - the backup decryption key\n     * @param version - the backup version for this key.\n     */\n    public async storeSessionBackupPrivateKey(key: Uint8Array, version?: string): Promise<void> {\n        const base64Key = encodeBase64(key);\n\n        if (!version) {\n            throw new Error(\"storeSessionBackupPrivateKey: version is required\");\n        }\n\n        await this.backupManager.saveBackupDecryptionKey(\n            RustSdkCryptoJs.BackupDecryptionKey.fromBase64(base64Key),\n            version,\n        );\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#loadSessionBackupPrivateKeyFromSecretStorage}.\n     */\n    public async loadSessionBackupPrivateKeyFromSecretStorage(): Promise<void> {\n        const backupKey = await this.secretStorage.get(\"m.megolm_backup.v1\");\n        if (!backupKey) {\n            throw new Error(\"loadSessionBackupPrivateKeyFromSecretStorage: missing decryption key in secret storage\");\n        }\n\n        const keyBackupInfo = await this.backupManager.getServerBackupInfo();\n        if (!keyBackupInfo || !keyBackupInfo.version) {\n            throw new Error(\"loadSessionBackupPrivateKeyFromSecretStorage: unable to get backup version\");\n        }\n\n        const backupDecryptionKey = RustSdkCryptoJs.BackupDecryptionKey.fromBase64(backupKey);\n        if (!decryptionKeyMatchesKeyBackupInfo(backupDecryptionKey, keyBackupInfo)) {\n            throw new Error(\"loadSessionBackupPrivateKeyFromSecretStorage: decryption key does not match backup info\");\n        }\n\n        await this.backupManager.saveBackupDecryptionKey(backupDecryptionKey, keyBackupInfo.version);\n    }\n\n    /**\n     * Get the current status of key backup.\n     *\n     * Implementation of {@link CryptoApi#getActiveSessionBackupVersion}.\n     */\n    public async getActiveSessionBackupVersion(): Promise<string | null> {\n        return await this.backupManager.getActiveBackupVersion();\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getKeyBackupInfo}.\n     */\n    public async getKeyBackupInfo(): Promise<KeyBackupInfo | null> {\n        return (await this.backupManager.getServerBackupInfo()) || null;\n    }\n\n    /**\n     * Determine if a key backup can be trusted.\n     *\n     * Implementation of {@link CryptoApi#isKeyBackupTrusted}.\n     */\n    public async isKeyBackupTrusted(info: KeyBackupInfo): Promise<BackupTrustInfo> {\n        return await this.backupManager.isKeyBackupTrusted(info);\n    }\n\n    /**\n     * Force a re-check of the key backup and enable/disable it as appropriate.\n     *\n     * Implementation of {@link CryptoApi#checkKeyBackupAndEnable}.\n     */\n    public async checkKeyBackupAndEnable(): Promise<KeyBackupCheck | null> {\n        return await this.backupManager.checkKeyBackupAndEnable(true);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#deleteKeyBackupVersion}.\n     */\n    public async deleteKeyBackupVersion(version: string): Promise<void> {\n        await this.backupManager.deleteKeyBackupVersion(version);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#resetKeyBackup}.\n     */\n    public async resetKeyBackup(): Promise<void> {\n        const backupInfo = await this.backupManager.setupKeyBackup((o) => this.signObject(o));\n\n        // we want to store the private key in 4S\n        // need to check if 4S is set up?\n        if (await this.secretStorageHasAESKey()) {\n            await this.secretStorage.store(\"m.megolm_backup.v1\", backupInfo.decryptionKey.toBase64());\n        }\n\n        // we can check and start async\n        this.checkKeyBackupAndEnable();\n    }\n\n    /**\n     * Signs the given object with the current device and current identity (if available).\n     * As defined in {@link https://spec.matrix.org/v1.8/appendices/#signing-json | Signing JSON}.\n     *\n     * Helper for {@link RustCrypto#resetKeyBackup}.\n     *\n     * @param obj - The object to sign\n     */\n    private async signObject<T extends ISignableObject & object>(obj: T): Promise<void> {\n        const sigs = new Map(Object.entries(obj.signatures || {}));\n        const unsigned = obj.unsigned;\n\n        delete obj.signatures;\n        delete obj.unsigned;\n\n        const userSignatures = sigs.get(this.userId) || {};\n\n        const canonalizedJson = anotherjson.stringify(obj);\n        const signatures: RustSdkCryptoJs.Signatures = await this.olmMachine.sign(canonalizedJson);\n\n        const map = JSON.parse(signatures.asJSON());\n\n        sigs.set(this.userId, { ...userSignatures, ...map[this.userId] });\n\n        if (unsigned !== undefined) obj.unsigned = unsigned;\n        obj.signatures = Object.fromEntries(sigs.entries());\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#restoreKeyBackupWithPassphrase}.\n     */\n    public async restoreKeyBackupWithPassphrase(\n        passphrase: string,\n        opts?: KeyBackupRestoreOpts,\n    ): Promise<KeyBackupRestoreResult> {\n        const backupInfo = await this.backupManager.getServerBackupInfo();\n        if (!backupInfo?.version) {\n            throw new Error(\"No backup info available\");\n        }\n\n        const privateKey = await keyFromAuthData(backupInfo.auth_data, passphrase);\n\n        // Cache the key\n        await this.storeSessionBackupPrivateKey(privateKey, backupInfo.version);\n        return this.restoreKeyBackup(opts);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#restoreKeyBackup}.\n     */\n    public async restoreKeyBackup(opts?: KeyBackupRestoreOpts): Promise<KeyBackupRestoreResult> {\n        // Get the decryption key from the crypto store\n        const backupKeys: RustSdkCryptoJs.BackupKeys = await this.olmMachine.getBackupKeys();\n        const { decryptionKey, backupVersion } = backupKeys;\n        if (!decryptionKey || !backupVersion) throw new Error(\"No decryption key found in crypto store\");\n\n        const decodedDecryptionKey = decodeBase64(decryptionKey.toBase64());\n\n        const backupInfo = await this.backupManager.requestKeyBackupVersion(backupVersion);\n        if (!backupInfo) throw new Error(`Backup version to restore ${backupVersion} not found on server`);\n\n        const backupDecryptor = await this.getBackupDecryptor(backupInfo, decodedDecryptionKey);\n\n        try {\n            opts?.progressCallback?.({\n                stage: \"fetch\",\n            });\n\n            return await this.backupManager.restoreKeyBackup(backupVersion, backupDecryptor, opts);\n        } finally {\n            // Free to avoid to keep in memory the decryption key stored in it. To avoid to exposing it to an attacker.\n            backupDecryptor.free();\n        }\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#isDehydrationSupported}.\n     */\n    public async isDehydrationSupported(): Promise<boolean> {\n        return await this.dehydratedDeviceManager.isSupported();\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#startDehydration}.\n     */\n    public async startDehydration(createNewKey?: boolean): Promise<void> {\n        if (!(await this.isCrossSigningReady()) || !(await this.isSecretStorageReady())) {\n            throw new Error(\"Device dehydration requires cross-signing and secret storage to be set up\");\n        }\n        return await this.dehydratedDeviceManager.start(createNewKey);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#importSecretsBundle}.\n     */\n    public async importSecretsBundle(\n        secrets: Parameters<NonNullable<CryptoApi[\"importSecretsBundle\"]>>[0],\n    ): Promise<void> {\n        const secretsBundle = RustSdkCryptoJs.SecretsBundle.from_json(secrets);\n        await this.getOlmMachineOrThrow().importSecretsBundle(secretsBundle); // this method frees the SecretsBundle\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#exportSecretsBundle}.\n     */\n    public async exportSecretsBundle(): ReturnType<NonNullable<CryptoApi[\"exportSecretsBundle\"]>> {\n        const secretsBundle = await this.getOlmMachineOrThrow().exportSecretsBundle();\n        const secrets = secretsBundle.to_json();\n        secretsBundle.free();\n        return secrets;\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#encryptToDeviceMessages}.\n     */\n    public async encryptToDeviceMessages(\n        eventType: string,\n        devices: { userId: string; deviceId: string }[],\n        payload: ToDevicePayload,\n    ): Promise<ToDeviceBatch> {\n        const logger = new LogSpan(this.logger, \"encryptToDeviceMessages\");\n        const uniqueUsers = new Set(devices.map(({ userId }) => userId));\n\n        // This will ensure we have Olm sessions for all of the users' devices.\n        // However, we only care about some of the devices.\n        // So, perhaps we can optimise this later on.\n        await this.keyClaimManager.ensureSessionsForUsers(\n            logger,\n            Array.from(uniqueUsers).map((userId) => new RustSdkCryptoJs.UserId(userId)),\n        );\n        const batch: ToDeviceBatch = {\n            batch: [],\n            eventType: EventType.RoomMessageEncrypted,\n        };\n\n        await Promise.all(\n            devices.map(async ({ userId, deviceId }) => {\n                const device: RustSdkCryptoJs.Device | undefined = await this.olmMachine.getDevice(\n                    new RustSdkCryptoJs.UserId(userId),\n                    new RustSdkCryptoJs.DeviceId(deviceId),\n                );\n\n                if (device) {\n                    const encryptedPayload = JSON.parse(await device.encryptToDeviceEvent(eventType, payload));\n                    batch.batch.push({\n                        deviceId,\n                        userId,\n                        payload: encryptedPayload,\n                    });\n                } else {\n                    this.logger.warn(`encryptToDeviceMessages: unknown device ${userId}:${deviceId}`);\n                }\n            }),\n        );\n\n        return batch;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // SyncCryptoCallbacks implementation\n    //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Apply sync changes to the olm machine\n     * @param events - the received to-device messages\n     * @param oneTimeKeysCounts - the received one time key counts\n     * @param unusedFallbackKeys - the received unused fallback keys\n     * @param devices - the received device list updates\n     * @returns A list of preprocessed to-device messages.\n     */\n    private async receiveSyncChanges({\n        events,\n        oneTimeKeysCounts = new Map<string, number>(),\n        unusedFallbackKeys,\n        devices = new RustSdkCryptoJs.DeviceLists(),\n    }: {\n        events?: IToDeviceEvent[];\n        oneTimeKeysCounts?: Map<string, number>;\n        unusedFallbackKeys?: Set<string>;\n        devices?: RustSdkCryptoJs.DeviceLists;\n    }): Promise<IToDeviceEvent[]> {\n        const result = await logDuration(logger, \"receiveSyncChanges\", async () => {\n            return await this.olmMachine.receiveSyncChanges(\n                events ? JSON.stringify(events) : \"[]\",\n                devices,\n                oneTimeKeysCounts,\n                unusedFallbackKeys,\n            );\n        });\n\n        // receiveSyncChanges returns a JSON-encoded list of decrypted to-device messages.\n        return JSON.parse(result);\n    }\n\n    /** called by the sync loop to preprocess incoming to-device messages\n     *\n     * @param events - the received to-device messages\n     * @returns A list of preprocessed to-device messages.\n     */\n    public async preprocessToDeviceMessages(events: IToDeviceEvent[]): Promise<IToDeviceEvent[]> {\n        // send the received to-device messages into receiveSyncChanges. We have no info on device-list changes,\n        // one-time-keys, or fallback keys, so just pass empty data.\n        const processed = await this.receiveSyncChanges({ events });\n\n        // look for interesting to-device messages\n        for (const message of processed) {\n            if (message.type === EventType.KeyVerificationRequest) {\n                const sender = message.sender;\n                const transactionId = message.content.transaction_id;\n                if (transactionId && sender) {\n                    this.onIncomingKeyVerificationRequest(sender, transactionId);\n                }\n            }\n        }\n        return processed;\n    }\n\n    /** called by the sync loop to process one time key counts and unused fallback keys\n     *\n     * @param oneTimeKeysCounts - the received one time key counts\n     * @param unusedFallbackKeys - the received unused fallback keys\n     */\n    public async processKeyCounts(\n        oneTimeKeysCounts?: Record<string, number>,\n        unusedFallbackKeys?: string[],\n    ): Promise<void> {\n        const mapOneTimeKeysCount = oneTimeKeysCounts && new Map<string, number>(Object.entries(oneTimeKeysCounts));\n        const setUnusedFallbackKeys = unusedFallbackKeys && new Set<string>(unusedFallbackKeys);\n\n        if (mapOneTimeKeysCount !== undefined || setUnusedFallbackKeys !== undefined) {\n            await this.receiveSyncChanges({\n                oneTimeKeysCounts: mapOneTimeKeysCount,\n                unusedFallbackKeys: setUnusedFallbackKeys,\n            });\n        }\n    }\n\n    /** called by the sync loop to process the notification that device lists have\n     * been changed.\n     *\n     * @param deviceLists - device_lists field from /sync\n     */\n    public async processDeviceLists(deviceLists: IDeviceLists): Promise<void> {\n        const devices = new RustSdkCryptoJs.DeviceLists(\n            deviceLists.changed?.map((userId) => new RustSdkCryptoJs.UserId(userId)),\n            deviceLists.left?.map((userId) => new RustSdkCryptoJs.UserId(userId)),\n        );\n        await this.receiveSyncChanges({ devices });\n    }\n\n    /** called by the sync loop on m.room.encrypted events\n     *\n     * @param room - in which the event was received\n     * @param event - encryption event to be processed\n     */\n    public async onCryptoEvent(room: Room, event: MatrixEvent): Promise<void> {\n        const config = event.getContent();\n        const settings = new RustSdkCryptoJs.RoomSettings();\n\n        if (config.algorithm === \"m.megolm.v1.aes-sha2\") {\n            settings.algorithm = RustSdkCryptoJs.EncryptionAlgorithm.MegolmV1AesSha2;\n        } else {\n            // Among other situations, this happens if the crypto state event is redacted.\n            this.logger.warn(`Room ${room.roomId}: ignoring crypto event with invalid algorithm ${config.algorithm}`);\n            return;\n        }\n\n        try {\n            settings.sessionRotationPeriodMs = config.rotation_period_ms;\n            settings.sessionRotationPeriodMessages = config.rotation_period_msgs;\n            await this.olmMachine.setRoomSettings(new RustSdkCryptoJs.RoomId(room.roomId), settings);\n        } catch (e) {\n            this.logger.warn(`Room ${room.roomId}: ignoring crypto event which caused error: ${e}`);\n            return;\n        }\n\n        // If we got this far, the SDK found the event acceptable.\n        // We need to either create or update the active RoomEncryptor.\n        const existingEncryptor = this.roomEncryptors[room.roomId];\n        if (existingEncryptor) {\n            existingEncryptor.onCryptoEvent(config);\n        } else {\n            this.roomEncryptors[room.roomId] = new RoomEncryptor(\n                this.olmMachine,\n                this.keyClaimManager,\n                this.outgoingRequestsManager,\n                room,\n                config,\n            );\n        }\n    }\n\n    /** called by the sync loop after processing each sync.\n     *\n     * TODO: figure out something equivalent for sliding sync.\n     *\n     * @param syncState - information on the completed sync.\n     */\n    public onSyncCompleted(syncState: OnSyncCompletedData): void {\n        // Processing the /sync may have produced new outgoing requests which need sending, so kick off the outgoing\n        // request loop, if it's not already running.\n        this.outgoingRequestsManager.doProcessOutgoingRequests().catch((e) => {\n            this.logger.warn(\"onSyncCompleted: Error processing outgoing requests\", e);\n        });\n    }\n\n    /**\n     * Handle an incoming m.key.verification.request event, received either in-room or in a to-device message.\n     *\n     * @param sender - the sender of the event\n     * @param transactionId - the transaction ID for the verification. For to-device messages, this comes from the\n     *    content of the message; for in-room messages it is the event ID.\n     */\n    private onIncomingKeyVerificationRequest(sender: string, transactionId: string): void {\n        const request: RustSdkCryptoJs.VerificationRequest | undefined = this.olmMachine.getVerificationRequest(\n            new RustSdkCryptoJs.UserId(sender),\n            transactionId,\n        );\n\n        if (request) {\n            this.emit(\n                CryptoEvent.VerificationRequestReceived,\n                new RustVerificationRequest(\n                    this.olmMachine,\n                    request,\n                    this.outgoingRequestProcessor,\n                    this._supportedVerificationMethods,\n                ),\n            );\n        } else {\n            // There are multiple reasons this can happen; probably the most likely is that the event is an\n            // in-room event which is too old.\n            this.logger.info(\n                `Ignoring just-received verification request ${transactionId} which did not start a rust-side verification`,\n            );\n        }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // Other public functions\n    //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    /** called by the MatrixClient on a room membership event\n     *\n     * @param event - The matrix event which caused this event to fire.\n     * @param member - The member whose RoomMember.membership changed.\n     * @param oldMembership - The previous membership state. Null if it's a new member.\n     */\n    public onRoomMembership(event: MatrixEvent, member: RoomMember, oldMembership?: string): void {\n        const enc = this.roomEncryptors[event.getRoomId()!];\n        if (!enc) {\n            // not encrypting in this room\n            return;\n        }\n        enc.onRoomMembership(member);\n    }\n\n    /** Callback for OlmMachine.registerRoomKeyUpdatedCallback\n     *\n     * Called by the rust-sdk whenever there is an update to (megolm) room keys. We\n     * check if we have any events waiting for the given keys, and schedule them for\n     * a decryption retry if so.\n     *\n     * @param keys - details of the updated keys\n     */\n    public async onRoomKeysUpdated(keys: RustSdkCryptoJs.RoomKeyInfo[]): Promise<void> {\n        for (const key of keys) {\n            this.onRoomKeyUpdated(key);\n        }\n        this.backupManager.maybeUploadKey();\n    }\n\n    private onRoomKeyUpdated(key: RustSdkCryptoJs.RoomKeyInfo): void {\n        if (this.stopped) return;\n        this.logger.debug(\n            `Got update for session ${key.sessionId} from sender ${key.senderKey.toBase64()} in ${key.roomId.toString()}`,\n        );\n        const pendingList = this.eventDecryptor.getEventsPendingRoomKey(key.roomId.toString(), key.sessionId);\n        if (pendingList.length === 0) return;\n\n        this.logger.debug(\n            \"Retrying decryption on events:\",\n            pendingList.map((e) => `${e.getId()}`),\n        );\n\n        // Have another go at decrypting events with this key.\n        //\n        // We don't want to end up blocking the callback from Rust, which could otherwise end up dropping updates,\n        // so we don't wait for the decryption to complete. In any case, there is no need to wait:\n        // MatrixEvent.attemptDecryption ensures that there is only one decryption attempt happening at once,\n        // and deduplicates repeated attempts for the same event.\n        for (const ev of pendingList) {\n            ev.attemptDecryption(this, { isRetry: true }).catch((_e) => {\n                this.logger.info(`Still unable to decrypt event ${ev.getId()} after receiving key`);\n            });\n        }\n    }\n\n    /**\n     * Callback for `OlmMachine.registerRoomKeyWithheldCallback`.\n     *\n     * Called by the rust sdk whenever we are told that a key has been withheld. We see if we had any events that\n     * failed to decrypt for the given session, and update their status if so.\n     *\n     * @param withheld - Details of the withheld sessions.\n     */\n    public async onRoomKeysWithheld(withheld: RustSdkCryptoJs.RoomKeyWithheldInfo[]): Promise<void> {\n        for (const session of withheld) {\n            this.logger.debug(`Got withheld message for session ${session.sessionId} in ${session.roomId.toString()}`);\n            const pendingList = this.eventDecryptor.getEventsPendingRoomKey(\n                session.roomId.toString(),\n                session.sessionId,\n            );\n            if (pendingList.length === 0) return;\n\n            // The easiest way to update the status of the event is to have another go at decrypting it.\n            this.logger.debug(\n                \"Retrying decryption on events:\",\n                pendingList.map((e) => `${e.getId()}`),\n            );\n\n            for (const ev of pendingList) {\n                ev.attemptDecryption(this, { isRetry: true }).catch((_e) => {\n                    // It's somewhat expected that we still can't decrypt here.\n                });\n            }\n        }\n    }\n\n    /**\n     * Callback for `OlmMachine.registerUserIdentityUpdatedCallback`\n     *\n     * Called by the rust-sdk whenever there is an update to any user's cross-signing status. We re-check their trust\n     * status and emit a `UserTrustStatusChanged` event, as well as a `KeysChanged` if it is our own identity that changed.\n     *\n     * @param userId - the user with the updated identity\n     */\n    public async onUserIdentityUpdated(userId: RustSdkCryptoJs.UserId): Promise<void> {\n        const newVerification = await this.getUserVerificationStatus(userId.toString());\n        this.emit(CryptoEvent.UserTrustStatusChanged, userId.toString(), newVerification);\n\n        // If our own user identity has changed, we may now trust the key backup where we did not before.\n        // So, re-check the key backup status and enable it if available.\n        if (userId.toString() === this.userId) {\n            this.emit(CryptoEvent.KeysChanged, {});\n            await this.checkKeyBackupAndEnable();\n        }\n    }\n\n    /**\n     * Callback for `OlmMachine.registerDevicesUpdatedCallback`\n     *\n     * Called when users' devices have updated. Emits `WillUpdateDevices` and `DevicesUpdated`. In the JavaScript\n     * crypto backend, these events are called at separate times, with `WillUpdateDevices` being emitted just before\n     * the devices are saved, and `DevicesUpdated` being emitted just after. But the OlmMachine only gives us\n     * one event, so we emit both events here.\n     *\n     * @param userIds - an array of user IDs of users whose devices have updated.\n     */\n    public async onDevicesUpdated(userIds: string[]): Promise<void> {\n        this.emit(CryptoEvent.WillUpdateDevices, userIds, false);\n        this.emit(CryptoEvent.DevicesUpdated, userIds, false);\n    }\n\n    /**\n     * Handles secret received from the rust secret inbox.\n     *\n     * The gossipped secrets are received using the `m.secret.send` event type\n     * and are guaranteed to have been received over a 1-to-1 Olm\n     * Session from a verified device.\n     *\n     * The only secret currently handled in this way is `m.megolm_backup.v1`.\n     *\n     * @param name - the secret name\n     * @param value - the secret value\n     */\n    private async handleSecretReceived(name: string, value: string): Promise<boolean> {\n        this.logger.debug(`onReceiveSecret: Received secret ${name}`);\n        if (name === \"m.megolm_backup.v1\") {\n            return await this.backupManager.handleBackupSecretReceived(value);\n            // XXX at this point we should probably try to download the backup and import the keys,\n            // or at least retry for the current decryption failures?\n            // Maybe add some signaling when a new secret is received, and let clients handle it?\n            // as it's where the restore from backup APIs are exposed.\n        }\n        return false;\n    }\n\n    /**\n     * Called when a new secret is received in the rust secret inbox.\n     *\n     * Will poll the secret inbox and handle the secrets received.\n     *\n     * @param name - The name of the secret received.\n     */\n    public async checkSecrets(name: string): Promise<void> {\n        const pendingValues: string[] = await this.olmMachine.getSecretsFromInbox(name);\n        for (const value of pendingValues) {\n            if (await this.handleSecretReceived(name, value)) {\n                // If we have a valid secret for that name there is no point of processing the other secrets values.\n                // It's probably the same secret shared by another device.\n                break;\n            }\n        }\n\n        // Important to call this after handling the secrets as good hygiene.\n        await this.olmMachine.deleteSecretsFromInbox(name);\n    }\n\n    /**\n     * Handle a live event received via /sync.\n     * See {@link ClientEventHandlerMap#event}\n     *\n     * @param event - live event\n     */\n    public async onLiveEventFromSync(event: MatrixEvent): Promise<void> {\n        // Ignore state event or remote echo\n        // transaction_id is provided in case of remote echo {@link https://spec.matrix.org/v1.7/client-server-api/#local-echo}\n        if (event.isState() || !!event.getUnsigned().transaction_id) return;\n\n        const processEvent = async (evt: MatrixEvent): Promise<void> => {\n            // Process only verification event\n            if (isVerificationEvent(event)) {\n                await this.onKeyVerificationEvent(evt);\n            }\n        };\n\n        // If the event is encrypted of in failure, we wait for decryption\n        if (event.isDecryptionFailure() || event.isEncrypted()) {\n            // 5 mins\n            const TIMEOUT_DELAY = 5 * 60 * 1000;\n\n            // After 5mins, we are not expecting the event to be decrypted\n            const timeoutId = setTimeout(() => event.off(MatrixEventEvent.Decrypted, onDecrypted), TIMEOUT_DELAY);\n\n            const onDecrypted = (decryptedEvent: MatrixEvent, error?: Error): void => {\n                if (error) return;\n\n                clearTimeout(timeoutId);\n                event.off(MatrixEventEvent.Decrypted, onDecrypted);\n                processEvent(decryptedEvent);\n            };\n\n            event.on(MatrixEventEvent.Decrypted, onDecrypted);\n        } else {\n            await processEvent(event);\n        }\n    }\n\n    /**\n     * Handle an in-room key verification event.\n     *\n     * @param event - a key validation request event.\n     */\n    private async onKeyVerificationEvent(event: MatrixEvent): Promise<void> {\n        const roomId = event.getRoomId();\n\n        if (!roomId) {\n            throw new Error(\"missing roomId in the event\");\n        }\n\n        this.logger.debug(\n            `Incoming verification event ${event.getId()} type ${event.getType()} from ${event.getSender()}`,\n        );\n\n        await this.olmMachine.receiveVerificationEvent(\n            JSON.stringify({\n                event_id: event.getId(),\n                type: event.getType(),\n                sender: event.getSender(),\n                state_key: event.getStateKey(),\n                content: event.getContent(),\n                origin_server_ts: event.getTs(),\n            }),\n            new RustSdkCryptoJs.RoomId(roomId),\n        );\n\n        if (\n            event.getType() === EventType.RoomMessage &&\n            event.getContent().msgtype === MsgType.KeyVerificationRequest\n        ) {\n            this.onIncomingKeyVerificationRequest(event.getSender()!, event.getId()!);\n        }\n\n        // that may have caused us to queue up outgoing requests, so make sure we send them.\n        this.outgoingRequestsManager.doProcessOutgoingRequests().catch((e) => {\n            this.logger.warn(\"onKeyVerificationRequest: Error processing outgoing requests\", e);\n        });\n    }\n\n    /**\n     * Returns the cross-signing user identity of the current user.\n     *\n     * Not part of the public crypto-api interface.\n     * Used during migration from legacy js-crypto to update local trust if needed.\n     */\n    public async getOwnIdentity(): Promise<RustSdkCryptoJs.OwnUserIdentity | undefined> {\n        return await this.olmMachine.getIdentity(new RustSdkCryptoJs.UserId(this.userId));\n    }\n}\n\nclass EventDecryptor {\n    /**\n     * Events which we couldn't decrypt due to unknown sessions / indexes.\n     *\n     * Map from roomId to sessionId to Set of MatrixEvents\n     */\n    private eventsPendingKey = new MapWithDefault<string, MapWithDefault<string, Set<MatrixEvent>>>(\n        () => new MapWithDefault<string, Set<MatrixEvent>>(() => new Set()),\n    );\n\n    public constructor(\n        private readonly logger: Logger,\n        private readonly olmMachine: RustSdkCryptoJs.OlmMachine,\n        private readonly perSessionBackupDownloader: PerSessionKeyBackupDownloader,\n    ) {}\n\n    public async attemptEventDecryption(\n        event: MatrixEvent,\n        isolationMode: DeviceIsolationMode,\n    ): Promise<IEventDecryptionResult> {\n        // add the event to the pending list *before* attempting to decrypt.\n        // then, if the key turns up while decryption is in progress (and\n        // decryption fails), we will schedule a retry.\n        // (fixes https://github.com/vector-im/element-web/issues/5001)\n        this.addEventToPendingList(event);\n\n        let trustRequirement;\n\n        switch (isolationMode.kind) {\n            case DeviceIsolationModeKind.AllDevicesIsolationMode:\n                trustRequirement = RustSdkCryptoJs.TrustRequirement.Untrusted;\n                break;\n            case DeviceIsolationModeKind.OnlySignedDevicesIsolationMode:\n                trustRequirement = RustSdkCryptoJs.TrustRequirement.CrossSignedOrLegacy;\n                break;\n        }\n\n        try {\n            const res = (await this.olmMachine.decryptRoomEvent(\n                stringifyEvent(event),\n                new RustSdkCryptoJs.RoomId(event.getRoomId()!),\n                new RustSdkCryptoJs.DecryptionSettings(trustRequirement),\n            )) as RustSdkCryptoJs.DecryptedRoomEvent;\n\n            // Success. We can remove the event from the pending list, if\n            // that hasn't already happened.\n            this.removeEventFromPendingList(event);\n\n            return {\n                clearEvent: JSON.parse(res.event),\n                claimedEd25519Key: res.senderClaimedEd25519Key,\n                senderCurve25519Key: res.senderCurve25519Key,\n                forwardingCurve25519KeyChain: res.forwardingCurve25519KeyChain,\n            };\n        } catch (err) {\n            if (err instanceof RustSdkCryptoJs.MegolmDecryptionError) {\n                this.onMegolmDecryptionError(event, err, await this.perSessionBackupDownloader.getServerBackupInfo());\n            } else {\n                throw new DecryptionError(DecryptionFailureCode.UNKNOWN_ERROR, \"Unknown error\");\n            }\n        }\n    }\n\n    /**\n     * Handle a `MegolmDecryptionError` returned by the rust SDK.\n     *\n     * Fires off a request to the `perSessionBackupDownloader`, if appropriate, and then throws a `DecryptionError`.\n     *\n     * @param event - The event which could not be decrypted.\n     * @param err - The error from the Rust SDK.\n     * @param serverBackupInfo - Details about the current backup from the server. `null` if there is no backup.\n     *     `undefined` if our attempt to check failed.\n     */\n    private onMegolmDecryptionError(\n        event: MatrixEvent,\n        err: RustSdkCryptoJs.MegolmDecryptionError,\n        serverBackupInfo: KeyBackupInfo | null | undefined,\n    ): never {\n        const content = event.getWireContent();\n        const errorDetails = { sender_key: content.sender_key, session_id: content.session_id };\n\n        // If the error looks like it might be recoverable from backup, queue up a request to try that.\n        if (\n            err.code === RustSdkCryptoJs.DecryptionErrorCode.MissingRoomKey ||\n            err.code === RustSdkCryptoJs.DecryptionErrorCode.UnknownMessageIndex\n        ) {\n            this.perSessionBackupDownloader.onDecryptionKeyMissingError(event.getRoomId()!, content.session_id!);\n\n            // If the server is telling us our membership at the time the event\n            // was sent, and it isn't \"join\", we use a different error code.\n            const membership = event.getMembershipAtEvent();\n            if (membership && membership !== KnownMembership.Join && membership !== KnownMembership.Invite) {\n                throw new DecryptionError(\n                    DecryptionFailureCode.HISTORICAL_MESSAGE_USER_NOT_JOINED,\n                    \"This message was sent when we were not a member of the room.\",\n                    errorDetails,\n                );\n            }\n\n            // If the event was sent before this device was created, we use some different error codes.\n            if (event.getTs() <= this.olmMachine.deviceCreationTimeMs) {\n                if (serverBackupInfo === null) {\n                    throw new DecryptionError(\n                        DecryptionFailureCode.HISTORICAL_MESSAGE_NO_KEY_BACKUP,\n                        \"This message was sent before this device logged in, and there is no key backup on the server.\",\n                        errorDetails,\n                    );\n                } else if (!this.perSessionBackupDownloader.isKeyBackupDownloadConfigured()) {\n                    throw new DecryptionError(\n                        DecryptionFailureCode.HISTORICAL_MESSAGE_BACKUP_UNCONFIGURED,\n                        \"This message was sent before this device logged in, and key backup is not working.\",\n                        errorDetails,\n                    );\n                } else {\n                    throw new DecryptionError(\n                        DecryptionFailureCode.HISTORICAL_MESSAGE_WORKING_BACKUP,\n                        \"This message was sent before this device logged in. Key backup is working, but we still do not (yet) have the key.\",\n                        errorDetails,\n                    );\n                }\n            }\n        }\n\n        // If we got a withheld code, expose that.\n        if (err.maybe_withheld) {\n            // Unfortunately the Rust SDK API doesn't let us distinguish between different withheld cases, other than\n            // by string-matching.\n            const failureCode =\n                err.maybe_withheld === \"The sender has disabled encrypting to unverified devices.\"\n                    ? DecryptionFailureCode.MEGOLM_KEY_WITHHELD_FOR_UNVERIFIED_DEVICE\n                    : DecryptionFailureCode.MEGOLM_KEY_WITHHELD;\n            throw new DecryptionError(failureCode, err.maybe_withheld, errorDetails);\n        }\n\n        switch (err.code) {\n            case RustSdkCryptoJs.DecryptionErrorCode.MissingRoomKey:\n                throw new DecryptionError(\n                    DecryptionFailureCode.MEGOLM_UNKNOWN_INBOUND_SESSION_ID,\n                    \"The sender's device has not sent us the keys for this message.\",\n                    errorDetails,\n                );\n\n            case RustSdkCryptoJs.DecryptionErrorCode.UnknownMessageIndex:\n                throw new DecryptionError(\n                    DecryptionFailureCode.OLM_UNKNOWN_MESSAGE_INDEX,\n                    \"The sender's device has not sent us the keys for this message at this index.\",\n                    errorDetails,\n                );\n\n            case RustSdkCryptoJs.DecryptionErrorCode.SenderIdentityPreviouslyVerified:\n                // We're refusing to decrypt due to not trusting the sender,\n                // rather than failing to decrypt due to lack of keys, so we\n                // don't need to keep it on the pending list.\n                this.removeEventFromPendingList(event);\n                throw new DecryptionError(\n                    DecryptionFailureCode.SENDER_IDENTITY_PREVIOUSLY_VERIFIED,\n                    \"The sender identity is unverified, but was previously verified.\",\n                );\n\n            case RustSdkCryptoJs.DecryptionErrorCode.UnknownSenderDevice:\n                // We're refusing to decrypt due to not trusting the sender,\n                // rather than failing to decrypt due to lack of keys, so we\n                // don't need to keep it on the pending list.\n                this.removeEventFromPendingList(event);\n                throw new DecryptionError(\n                    DecryptionFailureCode.UNKNOWN_SENDER_DEVICE,\n                    \"The sender device is not known.\",\n                );\n\n            case RustSdkCryptoJs.DecryptionErrorCode.UnsignedSenderDevice:\n                // We're refusing to decrypt due to not trusting the sender,\n                // rather than failing to decrypt due to lack of keys, so we\n                // don't need to keep it on the pending list.\n                this.removeEventFromPendingList(event);\n                throw new DecryptionError(\n                    DecryptionFailureCode.UNSIGNED_SENDER_DEVICE,\n                    \"The sender identity is not cross-signed.\",\n                );\n\n            // We don't map MismatchedIdentityKeys for now, as there is no equivalent in legacy.\n            // Just put it on the `UNKNOWN_ERROR` bucket.\n            default:\n                throw new DecryptionError(DecryptionFailureCode.UNKNOWN_ERROR, err.description, errorDetails);\n        }\n    }\n\n    public async getEncryptionInfoForEvent(event: MatrixEvent): Promise<EventEncryptionInfo | null> {\n        if (!event.getClearContent() || event.isDecryptionFailure()) {\n            // not successfully decrypted\n            return null;\n        }\n\n        // special-case outgoing events, which the rust crypto-sdk will barf on\n        if (event.status !== null) {\n            return { shieldColour: EventShieldColour.NONE, shieldReason: null };\n        }\n\n        const encryptionInfo = await this.olmMachine.getRoomEventEncryptionInfo(\n            stringifyEvent(event),\n            new RustSdkCryptoJs.RoomId(event.getRoomId()!),\n        );\n\n        return rustEncryptionInfoToJsEncryptionInfo(this.logger, encryptionInfo);\n    }\n\n    /**\n     * Look for events which are waiting for a given megolm session\n     *\n     * Returns a list of events which were encrypted by `session` and could not be decrypted\n     */\n    public getEventsPendingRoomKey(roomId: string, sessionId: string): MatrixEvent[] {\n        const roomPendingEvents = this.eventsPendingKey.get(roomId);\n        if (!roomPendingEvents) return [];\n\n        const sessionPendingEvents = roomPendingEvents.get(sessionId);\n        if (!sessionPendingEvents) return [];\n\n        return [...sessionPendingEvents];\n    }\n\n    /**\n     * Add an event to the list of those awaiting their session keys.\n     */\n    private addEventToPendingList(event: MatrixEvent): void {\n        const roomId = event.getRoomId();\n        // We shouldn't have events without a room id here.\n        if (!roomId) return;\n\n        const roomPendingEvents = this.eventsPendingKey.getOrCreate(roomId);\n        const sessionPendingEvents = roomPendingEvents.getOrCreate(event.getWireContent().session_id);\n        sessionPendingEvents.add(event);\n    }\n\n    /**\n     * Remove an event from the list of those awaiting their session keys.\n     */\n    private removeEventFromPendingList(event: MatrixEvent): void {\n        const roomId = event.getRoomId();\n        if (!roomId) return;\n\n        const roomPendingEvents = this.eventsPendingKey.getOrCreate(roomId);\n        if (!roomPendingEvents) return;\n\n        const sessionPendingEvents = roomPendingEvents.get(event.getWireContent().session_id);\n        if (!sessionPendingEvents) return;\n\n        sessionPendingEvents.delete(event);\n\n        // also clean up the higher-level maps if they are now empty\n        if (sessionPendingEvents.size === 0) {\n            roomPendingEvents.delete(event.getWireContent().session_id);\n            if (roomPendingEvents.size === 0) {\n                this.eventsPendingKey.delete(roomId);\n            }\n        }\n    }\n}\n\nfunction stringifyEvent(event: MatrixEvent): string {\n    return JSON.stringify({\n        event_id: event.getId(),\n        type: event.getWireType(),\n        sender: event.getSender(),\n        state_key: event.getStateKey(),\n        content: event.getWireContent(),\n        origin_server_ts: event.getTs(),\n    });\n}\n\nfunction rustEncryptionInfoToJsEncryptionInfo(\n    logger: Logger,\n    encryptionInfo: RustSdkCryptoJs.EncryptionInfo | undefined,\n): EventEncryptionInfo | null {\n    if (encryptionInfo === undefined) {\n        // not decrypted here\n        return null;\n    }\n\n    // TODO: use strict shield semantics.\n    const shieldState = encryptionInfo.shieldState(false);\n\n    let shieldColour: EventShieldColour;\n    switch (shieldState.color) {\n        case RustSdkCryptoJs.ShieldColor.Grey:\n            shieldColour = EventShieldColour.GREY;\n            break;\n        case RustSdkCryptoJs.ShieldColor.None:\n            shieldColour = EventShieldColour.NONE;\n            break;\n        default:\n            shieldColour = EventShieldColour.RED;\n    }\n\n    let shieldReason: EventShieldReason | null;\n    if (shieldState.message === undefined) {\n        shieldReason = null;\n    } else if (shieldState.message === \"Encrypted by an unverified user.\") {\n        // this case isn't actually used with lax shield semantics.\n        shieldReason = EventShieldReason.UNVERIFIED_IDENTITY;\n    } else if (shieldState.message === \"Encrypted by a device not verified by its owner.\") {\n        shieldReason = EventShieldReason.UNSIGNED_DEVICE;\n    } else if (\n        shieldState.message === \"The authenticity of this encrypted message can't be guaranteed on this device.\"\n    ) {\n        shieldReason = EventShieldReason.AUTHENTICITY_NOT_GUARANTEED;\n    } else if (shieldState.message === \"Encrypted by an unknown or deleted device.\") {\n        shieldReason = EventShieldReason.UNKNOWN_DEVICE;\n    } else {\n        logger.warn(`Unknown shield state message '${shieldState.message}'`);\n        shieldReason = EventShieldReason.UNKNOWN;\n    }\n\n    return { shieldColour, shieldReason };\n}\n\ntype CryptoEvents = (typeof CryptoEvent)[keyof typeof CryptoEvent];\ntype RustCryptoEvents = Exclude<CryptoEvents, CryptoEvent.LegacyCryptoStoreMigrationProgress>;\n","/*\nCopyright 2023-2024 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport { Logger } from \"../logger.ts\";\nimport { CryptoStore, MigrationState, SecretStorePrivateKeys } from \"../crypto/store/base.ts\";\nimport { IndexedDBCryptoStore } from \"../crypto/store/indexeddb-crypto-store.ts\";\nimport { IHttpOpts, MatrixHttpApi } from \"../http-api/index.ts\";\nimport { requestKeyBackupVersion } from \"./backup.ts\";\nimport { IRoomEncryption } from \"../crypto/RoomList.ts\";\nimport { CrossSigningKeyInfo, Curve25519AuthData } from \"../crypto-api/index.ts\";\nimport { RustCrypto } from \"./rust-crypto.ts\";\nimport { KeyBackupInfo } from \"../crypto-api/keybackup.ts\";\nimport { sleep } from \"../utils.ts\";\nimport { encodeBase64 } from \"../base64.ts\";\nimport decryptAESSecretStorageItem from \"../utils/decryptAESSecretStorageItem.ts\";\nimport { AESEncryptedSecretStoragePayload } from \"../@types/AESEncryptedSecretStoragePayload.ts\";\n\n/**\n * Determine if any data needs migrating from the legacy store, and do so.\n *\n * This migrates the base account data, and olm and megolm sessions. It does *not* migrate the room list, which should\n * happen after an `OlmMachine` is created, via {@link migrateRoomSettingsFromLegacyCrypto}.\n *\n * @param args - Arguments object.\n */\nexport async function migrateFromLegacyCrypto(args: {\n    /** A `Logger` instance that will be used for debug output. */\n    logger: Logger;\n\n    /**\n     * Low-level HTTP interface: used to make outgoing requests required by the rust SDK.\n     * We expect it to set the access token, etc.\n     */\n    http: MatrixHttpApi<IHttpOpts & { onlyData: true }>;\n\n    /** Store to migrate data from. */\n    legacyStore: CryptoStore;\n\n    /** Pickle key for `legacyStore`. */\n    legacyPickleKey?: string;\n\n    /** Local user's User ID. */\n    userId: string;\n\n    /** Local user's Device ID. */\n    deviceId: string;\n\n    /** Rust crypto store to migrate data into. */\n    storeHandle: RustSdkCryptoJs.StoreHandle;\n\n    /**\n     * A callback which will receive progress updates on migration from `legacyStore`.\n     *\n     * Called with (-1, -1) to mark the end of migration.\n     */\n    legacyMigrationProgressListener?: (progress: number, total: number) => void;\n}): Promise<void> {\n    const { logger, legacyStore } = args;\n\n    // initialise the rust matrix-sdk-crypto-wasm, if it hasn't already been done\n    await RustSdkCryptoJs.initAsync();\n\n    // enable tracing in the rust-sdk\n    new RustSdkCryptoJs.Tracing(RustSdkCryptoJs.LoggerLevel.Debug).turnOn();\n\n    if (!(await legacyStore.containsData())) {\n        // This store was never used. Nothing to migrate.\n        return;\n    }\n\n    await legacyStore.startup();\n\n    let accountPickle: string | null = null;\n    await legacyStore.doTxn(\"readonly\", [IndexedDBCryptoStore.STORE_ACCOUNT], (txn) => {\n        legacyStore.getAccount(txn, (acctPickle) => {\n            accountPickle = acctPickle;\n        });\n    });\n    if (!accountPickle) {\n        // This store is not properly set up. Nothing to migrate.\n        logger.debug(\"Legacy crypto store is not set up (no account found). Not migrating.\");\n        return;\n    }\n\n    let migrationState = await legacyStore.getMigrationState();\n\n    if (migrationState >= MigrationState.MEGOLM_SESSIONS_MIGRATED) {\n        // All migration is done for now. The room list comes later, once we have an OlmMachine.\n        return;\n    }\n\n    const nOlmSessions = await countOlmSessions(logger, legacyStore);\n    const nMegolmSessions = await countMegolmSessions(logger, legacyStore);\n    const totalSteps = 1 + nOlmSessions + nMegolmSessions;\n    logger.info(\n        `Migrating data from legacy crypto store. ${nOlmSessions} olm sessions and ${nMegolmSessions} megolm sessions to migrate.`,\n    );\n\n    let stepsDone = 0;\n    function onProgress(steps: number): void {\n        stepsDone += steps;\n        args.legacyMigrationProgressListener?.(stepsDone, totalSteps);\n    }\n    onProgress(0);\n\n    const pickleKey = new TextEncoder().encode(args.legacyPickleKey);\n\n    if (migrationState === MigrationState.NOT_STARTED) {\n        logger.info(\"Migrating data from legacy crypto store. Step 1: base data\");\n        await migrateBaseData(args.http, args.userId, args.deviceId, legacyStore, pickleKey, args.storeHandle, logger);\n\n        migrationState = MigrationState.INITIAL_DATA_MIGRATED;\n        await legacyStore.setMigrationState(migrationState);\n    }\n    onProgress(1);\n\n    if (migrationState === MigrationState.INITIAL_DATA_MIGRATED) {\n        logger.info(\n            `Migrating data from legacy crypto store. Step 2: olm sessions (${nOlmSessions} sessions to migrate).`,\n        );\n        await migrateOlmSessions(logger, legacyStore, pickleKey, args.storeHandle, onProgress);\n\n        migrationState = MigrationState.OLM_SESSIONS_MIGRATED;\n        await legacyStore.setMigrationState(migrationState);\n    }\n\n    if (migrationState === MigrationState.OLM_SESSIONS_MIGRATED) {\n        logger.info(\n            `Migrating data from legacy crypto store. Step 3: megolm sessions (${nMegolmSessions} sessions to migrate).`,\n        );\n        await migrateMegolmSessions(logger, legacyStore, pickleKey, args.storeHandle, onProgress);\n\n        migrationState = MigrationState.MEGOLM_SESSIONS_MIGRATED;\n        await legacyStore.setMigrationState(migrationState);\n    }\n\n    // Migration is done.\n    args.legacyMigrationProgressListener?.(-1, -1);\n    logger.info(\"Migration from legacy crypto store complete\");\n}\n\nasync function migrateBaseData(\n    http: MatrixHttpApi<IHttpOpts & { onlyData: true }>,\n    userId: string,\n    deviceId: string,\n    legacyStore: CryptoStore,\n    pickleKey: Uint8Array,\n    storeHandle: RustSdkCryptoJs.StoreHandle,\n    logger: Logger,\n): Promise<void> {\n    const migrationData = new RustSdkCryptoJs.BaseMigrationData();\n    migrationData.userId = new RustSdkCryptoJs.UserId(userId);\n    migrationData.deviceId = new RustSdkCryptoJs.DeviceId(deviceId);\n\n    await legacyStore.doTxn(\"readonly\", [IndexedDBCryptoStore.STORE_ACCOUNT], (txn) =>\n        legacyStore.getAccount(txn, (a) => {\n            migrationData.pickledAccount = a ?? \"\";\n        }),\n    );\n\n    const recoveryKey = await getAndDecryptCachedSecretKey(legacyStore, pickleKey, \"m.megolm_backup.v1\");\n\n    // If we have a backup recovery key, we need to try to figure out which backup version it is for.\n    // All we can really do is ask the server for the most recent version and check if the cached key we have matches.\n    // It is possible that the backup has changed since last time his session was opened.\n    if (recoveryKey) {\n        let backupCallDone = false;\n        let backupInfo: KeyBackupInfo | null = null;\n        while (!backupCallDone) {\n            try {\n                backupInfo = await requestKeyBackupVersion(http);\n                backupCallDone = true;\n            } catch (e) {\n                logger.info(\"Failed to get backup version during migration, retrying in 2 seconds\", e);\n                // Retry until successful, use simple constant delay\n                await sleep(2000);\n            }\n        }\n        if (backupInfo && backupInfo.algorithm == \"m.megolm_backup.v1.curve25519-aes-sha2\") {\n            // check if the recovery key matches, as the active backup version may have changed since the key was cached\n            // and the migration started.\n            try {\n                const decryptionKey = RustSdkCryptoJs.BackupDecryptionKey.fromBase64(recoveryKey);\n                const publicKey = (backupInfo.auth_data as Curve25519AuthData)?.public_key;\n                const isValid = decryptionKey.megolmV1PublicKey.publicKeyBase64 == publicKey;\n                if (isValid) {\n                    migrationData.backupVersion = backupInfo.version;\n                    migrationData.backupRecoveryKey = recoveryKey;\n                } else {\n                    logger.debug(\n                        \"The backup key to migrate does not match the active backup version\",\n                        `Cached pub key: ${decryptionKey.megolmV1PublicKey.publicKeyBase64}`,\n                        `Active pub key: ${publicKey}`,\n                    );\n                }\n            } catch (e) {\n                logger.warn(\"Failed to check if the backup key to migrate matches the active backup version\", e);\n            }\n        }\n    }\n\n    migrationData.privateCrossSigningMasterKey = await getAndDecryptCachedSecretKey(legacyStore, pickleKey, \"master\");\n    migrationData.privateCrossSigningSelfSigningKey = await getAndDecryptCachedSecretKey(\n        legacyStore,\n        pickleKey,\n        \"self_signing\",\n    );\n    migrationData.privateCrossSigningUserSigningKey = await getAndDecryptCachedSecretKey(\n        legacyStore,\n        pickleKey,\n        \"user_signing\",\n    );\n    await RustSdkCryptoJs.Migration.migrateBaseData(migrationData, pickleKey, storeHandle);\n}\n\nasync function countOlmSessions(logger: Logger, legacyStore: CryptoStore): Promise<number> {\n    logger.debug(\"Counting olm sessions to be migrated\");\n    let nSessions: number;\n    await legacyStore.doTxn(\"readonly\", [IndexedDBCryptoStore.STORE_SESSIONS], (txn) =>\n        legacyStore.countEndToEndSessions(txn, (n) => (nSessions = n)),\n    );\n    return nSessions!;\n}\n\nasync function countMegolmSessions(logger: Logger, legacyStore: CryptoStore): Promise<number> {\n    logger.debug(\"Counting megolm sessions to be migrated\");\n    return await legacyStore.countEndToEndInboundGroupSessions();\n}\n\nasync function migrateOlmSessions(\n    logger: Logger,\n    legacyStore: CryptoStore,\n    pickleKey: Uint8Array,\n    storeHandle: RustSdkCryptoJs.StoreHandle,\n    onBatchDone: (batchSize: number) => void,\n): Promise<void> {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        const batch = await legacyStore.getEndToEndSessionsBatch();\n        if (batch === null) return;\n\n        logger.debug(`Migrating batch of ${batch.length} olm sessions`);\n        const migrationData: RustSdkCryptoJs.PickledSession[] = [];\n        for (const session of batch) {\n            const pickledSession = new RustSdkCryptoJs.PickledSession();\n            pickledSession.senderKey = session.deviceKey!;\n            pickledSession.pickle = session.session!;\n            pickledSession.lastUseTime = pickledSession.creationTime = new Date(session.lastReceivedMessageTs!);\n            migrationData.push(pickledSession);\n        }\n\n        await RustSdkCryptoJs.Migration.migrateOlmSessions(migrationData, pickleKey, storeHandle);\n        await legacyStore.deleteEndToEndSessionsBatch(batch);\n        onBatchDone(batch.length);\n    }\n}\n\nasync function migrateMegolmSessions(\n    logger: Logger,\n    legacyStore: CryptoStore,\n    pickleKey: Uint8Array,\n    storeHandle: RustSdkCryptoJs.StoreHandle,\n    onBatchDone: (batchSize: number) => void,\n): Promise<void> {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        const batch = await legacyStore.getEndToEndInboundGroupSessionsBatch();\n        if (batch === null) return;\n\n        logger.debug(`Migrating batch of ${batch.length} megolm sessions`);\n        const migrationData: RustSdkCryptoJs.PickledInboundGroupSession[] = [];\n        for (const session of batch) {\n            const sessionData = session.sessionData!;\n\n            const pickledSession = new RustSdkCryptoJs.PickledInboundGroupSession();\n            pickledSession.pickle = sessionData.session;\n            pickledSession.roomId = new RustSdkCryptoJs.RoomId(sessionData.room_id);\n            pickledSession.senderKey = session.senderKey;\n            pickledSession.senderSigningKey = sessionData.keysClaimed?.[\"ed25519\"];\n            pickledSession.backedUp = !session.needsBackup;\n\n            // The Rust SDK `imported` flag is used to indicate the authenticity status of a Megolm\n            // session, which tells us whether we can reliably tell which Olm device is the owner\n            // (creator) of the session.\n            //\n            // If `imported` is true, then we have no cryptographic proof that the session is owned\n            // by the device with the identity key `senderKey`.\n            //\n            // Only Megolm sessions received directly from the owning device via an encrypted\n            // `m.room_key` to-device message should have `imported` flag set to false. Megolm\n            // sessions received by any other currently available means (i.e. from a\n            // `m.forwarded_room_key`, from v1 asymmetric server-side key backup, imported from a\n            // file, etc) should have the `imported` flag set to true.\n            //\n            // Messages encrypted with such Megolm sessions will have a grey shield in the UI\n            // (\"Authenticity of this message cannot be guaranteed\").\n            //\n            // However, we don't want to bluntly mark all sessions as `imported` during migration\n            // because users will suddenly start seeing all their historic messages decorated with a\n            // grey shield, which would be seen as a non-actionable regression.\n            //\n            // In the legacy crypto stack, the flag encoding similar information was called\n            // `InboundGroupSessionData.untrusted`. The value of this flag was set as follows:\n            //\n            // - For outbound Megolm sessions created by our own device, `untrusted` is `undefined`.\n            // - For Megolm sessions received via a `m.room_key` to-device message, `untrusted` is\n            //   `undefined`.\n            // - For Megolm sessions received via a `m.forwarded_room_key` to-device message,\n            //   `untrusted` is `true`.\n            // - For Megolm sessions imported from a (v1 asymmetric / \"legacy\") server-side key\n            //   backup, `untrusted` is `true`.\n            // - For Megolm sessions imported from a file, untrusted is `undefined`.\n            //\n            // The main difference between the legacy crypto stack and the Rust crypto stack is that\n            // the Rust stack considers sessions imported from a file as `imported` (not\n            // authenticated). This is because the Megolm session export file format does not\n            // encode this authenticity information.\n            //\n            // Given this migration is only a one-time thing, we make a concession to accept the\n            // loss of information in this case, to avoid degrading UX in a non-actionable way.\n            pickledSession.imported = sessionData.untrusted === true;\n\n            migrationData.push(pickledSession);\n        }\n\n        await RustSdkCryptoJs.Migration.migrateMegolmSessions(migrationData, pickleKey, storeHandle);\n        await legacyStore.deleteEndToEndInboundGroupSessionsBatch(batch);\n        onBatchDone(batch.length);\n    }\n}\n\n/**\n * Determine if any room settings need migrating from the legacy store, and do so.\n *\n * @param args - Arguments object.\n */\nexport async function migrateRoomSettingsFromLegacyCrypto({\n    logger,\n    legacyStore,\n    olmMachine,\n}: {\n    /** A `Logger` instance that will be used for debug output. */\n    logger: Logger;\n\n    /** Store to migrate data from. */\n    legacyStore: CryptoStore;\n\n    /** OlmMachine to store the new data on. */\n    olmMachine: RustSdkCryptoJs.OlmMachine;\n}): Promise<void> {\n    if (!(await legacyStore.containsData())) {\n        // This store was never used. Nothing to migrate.\n        return;\n    }\n\n    const migrationState = await legacyStore.getMigrationState();\n\n    if (migrationState >= MigrationState.ROOM_SETTINGS_MIGRATED) {\n        // We've already migrated the room settings.\n        return;\n    }\n\n    let rooms: Record<string, IRoomEncryption> = {};\n\n    await legacyStore.doTxn(\"readwrite\", [IndexedDBCryptoStore.STORE_ROOMS], (txn) => {\n        legacyStore.getEndToEndRooms(txn, (result) => {\n            rooms = result;\n        });\n    });\n\n    logger.debug(`Migrating ${Object.keys(rooms).length} sets of room settings`);\n    for (const [roomId, legacySettings] of Object.entries(rooms)) {\n        try {\n            const rustSettings = new RustSdkCryptoJs.RoomSettings();\n\n            if (legacySettings.algorithm !== \"m.megolm.v1.aes-sha2\") {\n                logger.warn(`Room ${roomId}: ignoring room with invalid algorithm ${legacySettings.algorithm}`);\n                continue;\n            }\n            rustSettings.algorithm = RustSdkCryptoJs.EncryptionAlgorithm.MegolmV1AesSha2;\n            rustSettings.sessionRotationPeriodMs = legacySettings.rotation_period_ms;\n            rustSettings.sessionRotationPeriodMessages = legacySettings.rotation_period_msgs;\n            await olmMachine.setRoomSettings(new RustSdkCryptoJs.RoomId(roomId), rustSettings);\n\n            // We don't attempt to clear out the settings from the old store, or record where we've gotten up to,\n            // which means that if the app gets restarted while we're in the middle of this migration, we'll start\n            // again from scratch. So be it. Given that legacy crypto loads the whole room list into memory on startup\n            // anyway, we know it can't be that big.\n        } catch (e) {\n            logger.warn(`Room ${roomId}: ignoring settings ${JSON.stringify(legacySettings)} which caused error ${e}`);\n        }\n    }\n\n    logger.debug(`Completed room settings migration`);\n    await legacyStore.setMigrationState(MigrationState.ROOM_SETTINGS_MIGRATED);\n}\n\nasync function getAndDecryptCachedSecretKey(\n    legacyStore: CryptoStore,\n    legacyPickleKey: Uint8Array,\n    name: string,\n): Promise<string | undefined> {\n    const key = await new Promise<any>((resolve) => {\n        legacyStore.doTxn(\"readonly\", [IndexedDBCryptoStore.STORE_ACCOUNT], (txn) => {\n            legacyStore.getSecretStorePrivateKey(txn, resolve, name as keyof SecretStorePrivateKeys);\n        });\n    });\n\n    if (key && key.ciphertext && key.iv && key.mac) {\n        return await decryptAESSecretStorageItem(key as AESEncryptedSecretStoragePayload, legacyPickleKey, name);\n    } else if (key instanceof Uint8Array) {\n        // This is a legacy backward compatibility case where the key was stored in clear.\n        return encodeBase64(key);\n    } else {\n        return undefined;\n    }\n}\n\n/**\n * Check if the user's published identity (ie, public cross-signing keys) was trusted by the legacy session,\n * and if so mark it as trusted in the Rust session if needed.\n *\n * By default, if the legacy session didn't have the private MSK, the migrated session will revert to unverified,\n * even if the user has verified the session in the past.\n *\n * This only occurs if the private MSK was not cached in the crypto store (USK and SSK private keys won't help\n * to establish trust: the trust is rooted in the MSK).\n *\n * Rust crypto will only consider the current session as trusted if we import the private MSK itself.\n *\n * We could prompt the user to verify the session again, but it's probably better to just mark the user identity\n * as locally verified if it was before.\n *\n * See https://github.com/element-hq/element-web/issues/27079\n *\n * @param args - Argument object.\n */\nexport async function migrateLegacyLocalTrustIfNeeded(args: {\n    /** The legacy crypto store that is migrated. */\n    legacyCryptoStore: CryptoStore;\n    /** The migrated rust crypto stack. */\n    rustCrypto: RustCrypto;\n    /** The logger to use */\n    logger: Logger;\n}): Promise<void> {\n    const { legacyCryptoStore, rustCrypto, logger } = args;\n    // Get the public cross-signing identity from rust.\n    const rustOwnIdentity = await rustCrypto.getOwnIdentity();\n    if (!rustOwnIdentity) {\n        // There are no cross-signing keys published server side, so nothing to do here.\n        return;\n    }\n    if (rustOwnIdentity.isVerified()) {\n        // The rust session already trusts the keys, so again, nothing to do.\n        return;\n    }\n\n    const legacyLocallyTrustedMSK = await getLegacyTrustedPublicMasterKeyBase64(legacyCryptoStore);\n    if (!legacyLocallyTrustedMSK) {\n        // The user never verified their identity in the legacy session, so nothing to do.\n        return;\n    }\n\n    const mskInfo: CrossSigningKeyInfo = JSON.parse(rustOwnIdentity.masterKey);\n    if (!mskInfo.keys || Object.keys(mskInfo.keys).length === 0) {\n        // This should not happen, but let's be safe\n        logger.error(\"Post Migration | Unexpected error: no master key in the rust session.\");\n        return;\n    }\n    const rustSeenMSK = Object.values(mskInfo.keys)[0];\n\n    if (rustSeenMSK && rustSeenMSK == legacyLocallyTrustedMSK) {\n        logger.info(`Post Migration: Migrating legacy trusted MSK: ${legacyLocallyTrustedMSK} to locally verified.`);\n        // Let's mark the user identity as locally verified as part of the migration.\n        await rustOwnIdentity!.verify();\n        // As well as marking the MSK as trusted, `OlmMachine.verify` returns a\n        // `SignatureUploadRequest` which will publish a signature of the MSK using\n        // this device. In this case, we ignore the request: since the user hasn't\n        // actually re-verified the MSK, we don't publish a new signature. (`.verify`\n        // doesn't store the signature, and if we drop the request here it won't be\n        // retried.)\n        //\n        // Not publishing the signature is consistent with the behaviour of\n        // matrix-crypto-sdk when the private key is imported via\n        // `importCrossSigningKeys`, and when the identity is verified via interactive\n        // verification.\n        //\n        // [Aside: device signatures on the MSK are not considered by the rust-sdk to\n        // establish the trust of the user identity so in any case, what we actually do\n        // here is somewhat moot.]\n    }\n}\n\n/**\n * Checks if the legacy store has a trusted public master key, and returns it if so.\n *\n * @param legacyStore - The legacy store to check.\n *\n * @returns `null` if there were no cross signing keys or if they were not trusted. The trusted public master key if it was.\n */\nasync function getLegacyTrustedPublicMasterKeyBase64(legacyStore: CryptoStore): Promise<string | null> {\n    let maybeTrustedKeys: string | null = null;\n    await legacyStore.doTxn(\"readonly\", \"account\", (txn) => {\n        legacyStore.getCrossSigningKeys(txn, (keys) => {\n            // can be an empty object after resetting cross-signing keys, see storeTrustedSelfKeys\n            const msk = keys?.master;\n            if (msk && Object.keys(msk.keys).length != 0) {\n                // `msk.keys` is an object with { [`ed25519:${pubKey}`]: pubKey }\n                maybeTrustedKeys = Object.values(msk.keys)[0];\n            }\n        });\n    });\n\n    return maybeTrustedKeys;\n}\n","/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport { StoreHandle } from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport { RustCrypto } from \"./rust-crypto.ts\";\nimport { IHttpOpts, MatrixHttpApi } from \"../http-api/index.ts\";\nimport { ServerSideSecretStorage } from \"../secret-storage.ts\";\nimport { Logger } from \"../logger.ts\";\nimport { CryptoStore, MigrationState } from \"../crypto/store/base.ts\";\nimport {\n    migrateFromLegacyCrypto,\n    migrateLegacyLocalTrustIfNeeded,\n    migrateRoomSettingsFromLegacyCrypto,\n} from \"./libolm_migration.ts\";\nimport { CryptoCallbacks } from \"../crypto-api/index.ts\";\n\n/**\n * Create a new `RustCrypto` implementation\n *\n * @param args - Parameter object\n * @internal\n */\nexport async function initRustCrypto(args: {\n    /** A `Logger` instance that will be used for debug output. */\n    logger: Logger;\n\n    /**\n     * Low-level HTTP interface: used to make outgoing requests required by the rust SDK.\n     * We expect it to set the access token, etc.\n     */\n    http: MatrixHttpApi<IHttpOpts & { onlyData: true }>;\n\n    /** The local user's User ID. */\n    userId: string;\n\n    /** The local user's Device ID. */\n    deviceId: string;\n\n    /** Interface to server-side secret storage. */\n    secretStorage: ServerSideSecretStorage;\n\n    /** Crypto callbacks provided by the application. */\n    cryptoCallbacks: CryptoCallbacks;\n\n    /**\n     * The prefix to use on the indexeddbs created by rust-crypto.\n     * If `null`, a memory store will be used.\n     */\n    storePrefix: string | null;\n\n    /**\n     * A passphrase to use to encrypt the indexeddb created by rust-crypto.\n     *\n     * Ignored if `storePrefix` is null, or `storeKey` is set.  If neither this nor `storeKey` is set\n     * (and `storePrefix` is not null), the indexeddb will be unencrypted.\n     */\n    storePassphrase?: string;\n\n    /**\n     * A key to use to encrypt the indexeddb created by rust-crypto.\n     *\n     * Ignored if `storePrefix` is null. Otherwise, if it is set, it must be a 32-byte cryptographic key, which\n     * will be used to encrypt the indexeddb. See also `storePassphrase`.\n     */\n    storeKey?: Uint8Array;\n\n    /** If defined, we will check if any data needs migrating from this store to the rust store. */\n    legacyCryptoStore?: CryptoStore;\n\n    /** The pickle key for `legacyCryptoStore` */\n    legacyPickleKey?: string;\n\n    /**\n     * A callback which will receive progress updates on migration from `legacyCryptoStore`.\n     *\n     * Called with (-1, -1) to mark the end of migration.\n     */\n    legacyMigrationProgressListener?: (progress: number, total: number) => void;\n}): Promise<RustCrypto> {\n    const { logger } = args;\n\n    // initialise the rust matrix-sdk-crypto-wasm, if it hasn't already been done\n    logger.debug(\"Initialising Rust crypto-sdk WASM artifact\");\n    await RustSdkCryptoJs.initAsync();\n\n    // enable tracing in the rust-sdk\n    new RustSdkCryptoJs.Tracing(RustSdkCryptoJs.LoggerLevel.Debug).turnOn();\n\n    logger.debug(\"Opening Rust CryptoStore\");\n    let storeHandle;\n    if (args.storePrefix) {\n        if (args.storeKey) {\n            storeHandle = await StoreHandle.openWithKey(args.storePrefix, args.storeKey);\n        } else {\n            storeHandle = await StoreHandle.open(args.storePrefix, args.storePassphrase);\n        }\n    } else {\n        storeHandle = await StoreHandle.open();\n    }\n\n    if (args.legacyCryptoStore) {\n        // We have a legacy crypto store, which we may need to migrate from.\n        await migrateFromLegacyCrypto({\n            legacyStore: args.legacyCryptoStore,\n            storeHandle,\n            ...args,\n        });\n    }\n\n    const rustCrypto = await initOlmMachine(\n        logger,\n        args.http,\n        args.userId,\n        args.deviceId,\n        args.secretStorage,\n        args.cryptoCallbacks,\n        storeHandle,\n        args.legacyCryptoStore,\n    );\n\n    storeHandle.free();\n\n    logger.debug(\"Completed rust crypto-sdk setup\");\n    return rustCrypto;\n}\n\nasync function initOlmMachine(\n    logger: Logger,\n    http: MatrixHttpApi<IHttpOpts & { onlyData: true }>,\n    userId: string,\n    deviceId: string,\n    secretStorage: ServerSideSecretStorage,\n    cryptoCallbacks: CryptoCallbacks,\n    storeHandle: StoreHandle,\n    legacyCryptoStore?: CryptoStore,\n): Promise<RustCrypto> {\n    logger.debug(\"Init OlmMachine\");\n\n    const olmMachine = await RustSdkCryptoJs.OlmMachine.initFromStore(\n        new RustSdkCryptoJs.UserId(userId),\n        new RustSdkCryptoJs.DeviceId(deviceId),\n        storeHandle,\n    );\n\n    // A final migration step, now that we have an OlmMachine.\n    if (legacyCryptoStore) {\n        await migrateRoomSettingsFromLegacyCrypto({\n            logger,\n            legacyStore: legacyCryptoStore,\n            olmMachine,\n        });\n    }\n\n    // Disable room key requests, per https://github.com/vector-im/element-web/issues/26524.\n    olmMachine.roomKeyRequestsEnabled = false;\n\n    const rustCrypto = new RustCrypto(logger, olmMachine, http, userId, deviceId, secretStorage, cryptoCallbacks);\n\n    await olmMachine.registerRoomKeyUpdatedCallback((sessions: RustSdkCryptoJs.RoomKeyInfo[]) =>\n        rustCrypto.onRoomKeysUpdated(sessions),\n    );\n    await olmMachine.registerRoomKeysWithheldCallback((withheld: RustSdkCryptoJs.RoomKeyWithheldInfo[]) =>\n        rustCrypto.onRoomKeysWithheld(withheld),\n    );\n    await olmMachine.registerUserIdentityUpdatedCallback((userId: RustSdkCryptoJs.UserId) =>\n        rustCrypto.onUserIdentityUpdated(userId),\n    );\n    await olmMachine.registerDevicesUpdatedCallback((userIds: string[]) => rustCrypto.onDevicesUpdated(userIds));\n\n    // Check if there are any key backup secrets pending processing. There may be multiple secrets to process if several devices have gossiped them.\n    // The `registerReceiveSecretCallback` function will only be triggered for new secrets. If the client is restarted before processing them, the secrets will need to be manually handled.\n    rustCrypto.checkSecrets(\"m.megolm_backup.v1\");\n\n    // Register a callback to be notified when a new secret is received, as for now only the key backup secret is supported (the cross signing secrets are handled automatically by the OlmMachine)\n    await olmMachine.registerReceiveSecretCallback((name: string, _value: string) =>\n        // Instead of directly checking the secret value, we poll the inbox to get all values for that secret type.\n        // Once we have all the values, we can safely clear the secret inbox.\n        rustCrypto.checkSecrets(name),\n    );\n\n    // Tell the OlmMachine to think about its outgoing requests before we hand control back to the application.\n    //\n    // This is primarily a fudge to get it to correctly populate the `users_for_key_query` list, so that future\n    // calls to getIdentity (etc) block until the key queries are performed.\n    //\n    // Note that we don't actually need to *make* any requests here; it is sufficient to tell the Rust side to think\n    // about them.\n    //\n    // XXX: find a less hacky way to do this.\n    await olmMachine.outgoingRequests();\n\n    if (legacyCryptoStore && (await legacyCryptoStore.containsData())) {\n        const migrationState = await legacyCryptoStore.getMigrationState();\n        if (migrationState < MigrationState.INITIAL_OWN_KEY_QUERY_DONE) {\n            logger.debug(`Performing initial key query after migration`);\n            // We need to do an initial keys query so that the rust stack can properly update trust of\n            // the user device and identity from the migrated private keys.\n            // If not done, there is a short period where the own device/identity trust will be undefined after migration.\n            let initialKeyQueryDone = false;\n            while (!initialKeyQueryDone) {\n                try {\n                    await rustCrypto.userHasCrossSigningKeys(userId);\n                    initialKeyQueryDone = true;\n                } catch (e) {\n                    // If the initial key query fails, we retry until it succeeds.\n                    logger.error(\"Failed to check for cross-signing keys after migration, retrying\", e);\n                }\n            }\n\n            // If the private master cross-signing key was not cached in the legacy store, the rust session\n            // will not be able to establish the trust of the user identity.\n            // That means that after migration the session could revert to unverified.\n            // In order to avoid asking the users to re-verify their sessions, we need to migrate the legacy local trust\n            // (if the legacy session was already verified) to the new session.\n            await migrateLegacyLocalTrustIfNeeded({ legacyCryptoStore, rustCrypto, logger });\n\n            await legacyCryptoStore.setMigrationState(MigrationState.INITIAL_OWN_KEY_QUERY_DONE);\n        }\n    }\n\n    return rustCrypto;\n}\n"],"names":["RoomEncryptor","constructor","olmMachine","keyClaimManager","outgoingRequestManager","room","encryptionSettings","_defineProperty","Promise","resolve","this","prefixedLogger","logger","getChild","roomId","members","getJoinedMembers","updateTrackedUsers","map","u","RustSdkCryptoJs","userId","catch","e","error","onCryptoEvent","config","JSON","stringify","Error","onRoomMembership","member","membership","KnownMembership","Join","Invite","shouldEncryptForInvitedMembers","UserId","prepareForEncryption","globalBlacklistUnverifiedDevices","deviceIsolationMode","encryptEvent","event","_event$getTxnId","LogSpan","getTxnId","prom","currentEncryptionPromise","then","async","logDuration","ensureEncryptionSession","encryptEventInner","algorithm","debug","getEncryptionTargetMembers","lazyLoadedMembersResolved","doProcessOutgoingRequests","userList","ensureSessionsForUsers","rustEncryptionSettings","EncryptionSettings","historyVisibility","visibility","HistoryVisibility","Invited","RustHistoryVisibility","Joined","Shared","WorldReadable","toRustHistoryVisibility","getHistoryVisibility","EncryptionAlgorithm","MegolmV1AesSha2","rotation_period_ms","rotationPeriod","BigInt","rotation_period_msgs","rotationPeriodMessages","kind","DeviceIsolationModeKind","AllDevicesIsolationMode","_this$room$getBlackli","onlyAllowTrustedDevices","getBlacklistUnverifiedDevices","sharingStrategy","CollectStrategy","deviceBasedStrategy","errorOnVerifiedUserProblems","OnlySignedDevicesIsolationMode","identityBasedStrategy","shareMessages","shareRoomKey","RoomId","m","outgoingRequestProcessor","makeOutgoingRequest","forceDiscardSession","invalidateGroupSession","info","encryptedContent","encryptRoomEvent","getType","getContent","makeEncrypted","EventType","RoomMessageEncrypted","parse","identityKeys","curve25519","toBase64","ed25519","UnstablePrefix","SECRET_STORAGE_NAME","DehydratedDeviceManager","http","secretStorage","isSupported","authedRequest","Method","Get","undefined","prefix","err","errcode","start","createNewKey","stop","rehydrateDeviceIfAvailable","resetKey","scheduleDeviceDehydration","isKeyStored","Boolean","isStored","key","Uint8Array","globalThis","crypto","getRandomValues","store","encodeUnpaddedBase64","getKey","create","keyB64","get","decodeBase64","dehydratedDeviceResp","rehydratedDevice","dehydratedDevices","rehydrate","device_id","device_data","nextBatch","toDeviceCount","roomKeyCount","path","encodeUri","$device_id","eventResp","Post","next_batch","events","length","receiveEvents","createAndUploadDehydratedDevice","dehydratedDevice","request","keysForUpload","intervalId","setInterval","clearInterval","OutgoingRequestProcessor","msg","uiaCallback","resp","KeysUploadRequest","requestWithRetry","body","KeysQueryRequest","KeysClaimRequest","SignatureUploadRequest","KeysBackupRequest","Put","version","ToDeviceRequest","sendToDeviceRequest","RoomMessageRequest","encodeURIComponent","room_id","event_type","txn_id","UploadSigningKeysRequest","makeRequestWithUIA","PutDehydratedDeviceRequest","DehydrationUnstablePrefix","rawJsonRequest","warn","Object","getPrototypeOf","id","type","markRequestAsSent","message","log","trace","parsedBody","messageList","perUserMessages","entries","messages","deviceId","push","ToDeviceMessageId","method","queryParams","newBody","_objectSpread","auth","currentRetryCount","backoff","calculateRetryBackoff","sleep","json","headers","KeyClaimManager","currentClaimPromise","stopped","ensureSessionsForUsersInner","claimRequest","getMissingSessions","clone","rustDeviceToJsDevice","device","keys","Map","keyId","set","toString","verified","DeviceVerification","Unverified","isBlacklisted","Blocked","isVerified","Verified","signatures","mayBeSignatureMap","convertedSignatures","value","isValid","signature","rustAlgorithms","algorithms","Set","forEach","add","OlmV1Curve25519AesSha2","Device","Array","from","displayName","dehydrated","isDehydrated","downloadDeviceToJsDevice","_device$unsigned","unsigned","device_display_name","user_id","CrossSigningIdentity","bootstrapCrossSigning","opts","setupNewCrossSigning","resetCrossSigning","authUploadDeviceSigningKeys","olmDeviceStatus","crossSigningStatus","masterKeyFromSecretStorage","selfSigningKeyFromSecretStorage","userSigningKeyFromSecretStorage","privateKeysInSecretStorage","olmDeviceHasKeys","hasMaster","hasUserSigning","hasSelfSigning","olmDeviceHasMaster","olmDeviceHasUserSigning","olmDeviceHasSelfSigning","hasKey","exportCrossSigningKeysToStorage","importCrossSigningKeys","getDevice","verify","free","outgoingRequests","req","uploadKeysRequest","uploadSigningKeysRequest","uploadSignaturesRequest","exported","exportCrossSigningKeys","masterKey","self_signing_key","userSigningKey","secretStorageContainsCrossSigningKeys","secretStorageCanAccessSecrets","secretNames","defaultKeyId","getDefaultKeyId","secretName","RustVerificationRequest","TypedEventEmitter","inner","supportedVerificationMethods","super","reEmitter","TypedReEmitter","weakThis","WeakRef","registerChangesCallback","_weakThis$deref","deref","onChange","verification","getVerification","_verifier","RustQrCodeVerifier","setVerifier","RustSASVerifier","replaceInner","emit","VerificationRequestEvent","Change","verifier","stopReEmitting","reEmit","transactionId","flowId","_this$inner$roomId","initiatedByMe","weStarted","otherUserId","otherDeviceId","_this$inner$otherDevi","getOtherDevice","isSelfVerification","phase","Created","Requested","VerificationPhase","Ready","_accepting","Transitioned","verificationPhase","Done","Cancelled","pending","isPassive","accepting","declining","_cancelling","timeout","timeRemainingMillis","methods","chosenMethod","Started","VerificationMethod","Sas","Reciprocate","otherPartySupportsMethod","theirMethods","theirSupportedMethods","requiredMethod","verificationMethodsByIdentifier","some","accept","acceptWithMethods","verificationMethodIdentifierToMethod","cancel","params","beginKeyVerification","targetDevice","startVerification","res","startSas","scanQRCode","uint8Array","scan","fromBytes","Uint8ClampedArray","scanQrCode","reciprocate","getQRCodeBytes","generateQRCode","innerVerifier","generateQrCode","Buffer","toBytes","cancellationCode","_this$inner$cancelInf","_this$inner$cancelInf2","cancelInfo","cancelCode","cancellingUserId","cancelledbyUs","BaseRustVerifer","completionDeferred","defer","_weakThis$deref2","promise","isDone","isCancelled","reject","reason","hasBeenCancelled","getShowSasCallbacks","getReciprocateQrCodeCallbacks","callbacks","hasBeenScanned","confirm","confirmScanning","VerifierEvent","ShowReciprocateQr","state","QrState","Scanned","Confirmed","Reciprocated","_verificationRequest","sendAccept","emoji","decimal","decimals","sas","symbol","description","requests","mismatch","cancelWithCode","ShowSas","_weakThis$deref3","SasV1","ScanQrCode","QrCodeScanV1","ShowQrCode","QrCodeShowV1","ReciprocateV1","meth","RustBackupManager","getActiveBackupVersion","isBackupEnabled","activeBackupVersion","getServerBackupInfo","checkKeyBackupAndEnable","serverBackupInfo","isKeyBackupTrusted","signatureVerification","verifyBackup","backupKeys","getBackupKeys","decryptionKey","matchesDecryptionKey","backupInfoMatchesBackupDecryptionKey","trusted","force","checkedForBackup","keyBackupCheckInProgress","doCheckKeyBackup","finally","handleBackupSecretReceived","secret","_backupCheck$backupIn","backupCheck","backupInfo","trustInfo","backupDecryptionKey","fromBase64","saveBackupDecryptionKey","CryptoEvent","KeyBackupDecryptionKeyCached","importRoomKeys","importRoomKeysAsJson","jsonKeys","importExportedRoomKeys","progress","total","_opts$progressCallbac","importOpt","Number","successes","stage","failures","progressCallback","call","importBackedUpRoomKeys","backupVersion","keysByRoom","has","session_id","_opts$progressCallbac2","requestKeyBackupVersion","activeVersion","disableKeyBackup","enableKeyBackup","enableBackupV1","auth_data","public_key","KeyBackupStatus","backupKeysLoop","maybeUploadKey","disableBackup","maxDelay","backupKeysLoopRunning","delay","Math","random","numFailures","remainingToUploadCount","isFirstIteration","backupRoomKeys","KeyBackupSessionsRemaining","keyCount","roomKeyCounts","backedUp","keysCountInBatch","max","MatrixError","errCode","data","KeyBackupFailed","isRateLimitError","waitTime","getRetryAfterMs","pow","min","batch","countKeysInBackup","setupKeyBackup","signObject","deleteAllKeyBackupVersions","randomKey","createRandomKey","pubKey","megolmV1PublicKey","authData","publicKeyBase64","ClientPrefix","V3","_await$this$requestKe","_await$this$requestKe2","current","_await$this$requestKe3","_await$this$requestKe4","deleteKeyBackupVersion","$version","Delete","createBackupDecryptor","RustBackupDecryptor","restoreKeyBackup","backupDecryptor","_opts$progressCallbac3","keyBackup","downloadKeyBackup","importKeyBackup","totalKeyCount","totalImported","totalFailures","handleChunkCallback","_opts$progressCallbac4","currentChunk","roomChunks","decryptSessions","session","groupChunkCount","chunkGroupByRoom","roomData","rooms","sessions","sessionId","imported","_info$auth_data","sourceTrusted","ciphertexts","sessionData","decrypted","decryptV1","session_data","ephemeral","mac","ciphertext","decryptionKeyMatchesKeyBackupInfo","keyBackupInfo","count","values","OutgoingRequestsManager","nextLoopDeferred","result","outgoingRequestLoopRunning","outgoingRequestLoop","deferred","processOutgoingRequests","KEY_BACKUP_BACKOFF","KeyDownloadErrorCode","KeyDownloadError","code","name","KeyDownloadRateLimitError","retryMillis","PerSessionKeyBackupDownloader","backupManager","hasConfigurationProblem","configuration","getOrCreateBackupConfiguration","downloadKeysLoop","on","onBackupStatusChanged","isKeyBackupDownloadConfigured","onDecryptionKeyMissingError","megolmSessionId","isAlreadyInQueue","wasRequestedRecently","queuedRequests","off","markAsNotFoundInBackup","now","Date","sessionLastCheckAttemptedTime","size","filter","sid","ts","lastCheck","getBackupDecryptionKey","requestRoomKeyFromBackup","$roomId","$sessionId","downloadLoopRunning","queryKeyBackup","decryptAndImport","shift","MISSING_DECRYPTION_KEY","NETWORK_ERROR","STOPPED","targetRoomId","targetSessionId","_waitTime","_e$getRetryAfterMs","sessionInfo","sessionsToImport","decryptor","k","currentBackupVersionCheck","internalCheckFromServer","_currentServerVersion","_currentServerVersion2","_currentServerVersion4","currentServerVersion","_currentServerVersion3","ALL_VERIFICATION_METHODS","RustCrypto","_deviceId","cryptoCallbacks","outgoingRequestsManager","perSessionBackupDownloader","dehydratedDeviceManager","eventDecryptor","EventDecryptor","reemitter","crossSigningIdentity","getOlmMachineOrThrow","ClientStoppedError","globalErrorOnUnknownDevices","_v","close","_room","getRoomId","encryptor","roomEncryptors","decryptEvent","attemptEventDecryption","getEventEncryptionInfo","_event$getSenderKey","ret","senderKey","getSenderKey","getWireContent","encrypted","authenticated","mismatchedSender","checkUserTrust","UserVerificationStatus","getStoredCrossSigningForUser","checkOwnCrossSigningTrust","getBackupDecryptor","privKey","encodeBase64","getVersion","versions","matrix_sdk_crypto","git_sha","vodozemac","setDeviceIsolationMode","isolationMode","isEncryptionEnabledInRoom","roomSettings","getRoomSettings","getOwnDeviceKeys","prepareToEncrypt","_this$roomEncryptors$","exportRoomKeys","raw","exportRoomKeysAsJson","userHasCrossSigningKeys","downloadUncached","rustTrackedUsers","trackedUsers","rustTrackedUser","queryKeysForUsers","userIdentity","getIdentity","_keyResult$master_key","downloadDeviceList","master_keys","getUserDeviceInfo","userIds","deviceMapByUserId","rustUserId","untrackedUsers","getUserDevices","queryResult","device_keys","deviceKeys","deviceKeysToDeviceMap","userDevices","deviceArray","devices","d","queryBody","user","getTrustCrossSignedDevices","_trustCrossSignedDevices","setTrustCrossSignedDevices","val","setDeviceVerified","setLocalTrust","Unset","crossSignDevice","outgoingRequest","getDeviceVerificationStatus","DeviceVerificationStatus","signedByOwner","isCrossSignedByOwner","crossSigningVerified","isCrossSigningTrusted","localVerified","isLocallyTrusted","trustCrossSignedDevices","getUserVerificationStatus","wasVerified","wasPreviouslyVerified","needsUserApproval","identityNeedsUserApproval","pinCurrentUserIdentity","pinCurrentMasterKey","isCrossSigningReady","privateKeysCachedLocally","getCrossSigningStatus","hasKeysInCache","selfSigningKey","identity","getOwnIdentity","getCrossSigningKeyId","CrossSigningKey","Master","SelfSigning","UserSigning","parsedKey","isSecretStorageReady","secretsToCheck","bootstrapSecretStorage","createSecretStorageKey","setupNewSecretStorage","setupNewKeyBackup","isNewSecretStorageKeyNeeded","secretStorageHasAESKey","recoveryKey","addSecretStorageKeyToSecretStorage","crossSigningPrivateKeys","resetKeyBackup","secretStorageKey","_secretStorageKey$key","_secretStorageKey$key2","_this$cryptoCallbacks","_this$cryptoCallbacks2","secretStorageKeyObject","addKey","SECRET_STORAGE_ALGORITHM_V1_AES","passphrase","keyInfo","privateKey","setDefaultKeyId","cacheSecretStorageKey","secretStorageKeyTuple","publicKeysOnDevice","createRecoveryKeyFromPassphrase","password","salt","randomString","deriveRecoveryKeyFromPassphrase","RECOVERY_KEY_DERIVATION_ITERATIONS","iterations","encodedPrivateKey","encodeRecoveryKey","getEncryptionInfoForEvent","getVerificationRequestsToDeviceInProgress","getVerificationRequests","_supportedVerificationMethods","findVerificationRequestDMInProgress","find","_request$roomId","requestVerificationDM","verificationEventContent","verificationRequestContent","eventId","sendVerificationRequestContent","requestVerification","txId","event_id","setSupportedVerificationMethods","requestOwnUserVerification","requestDeviceVerification","getSessionBackupPrivateKey","storeSessionBackupPrivateKey","base64Key","loadSessionBackupPrivateKeyFromSecretStorage","backupKey","getActiveSessionBackupVersion","getKeyBackupInfo","o","obj","sigs","userSignatures","canonalizedJson","anotherjson","sign","asJSON","fromEntries","restoreKeyBackupWithPassphrase","keyFromAuthData","decodedDecryptionKey","isDehydrationSupported","startDehydration","importSecretsBundle","secrets","secretsBundle","from_json","exportSecretsBundle","to_json","encryptToDeviceMessages","eventType","payload","uniqueUsers","all","encryptedPayload","encryptToDeviceEvent","receiveSyncChanges","oneTimeKeysCounts","unusedFallbackKeys","preprocessToDeviceMessages","processed","KeyVerificationRequest","sender","content","transaction_id","onIncomingKeyVerificationRequest","processKeyCounts","mapOneTimeKeysCount","setUnusedFallbackKeys","processDeviceLists","deviceLists","_deviceLists$changed","_deviceLists$left","changed","left","settings","sessionRotationPeriodMs","sessionRotationPeriodMessages","setRoomSettings","existingEncryptor","onSyncCompleted","syncState","getVerificationRequest","VerificationRequestReceived","oldMembership","enc","onRoomKeysUpdated","onRoomKeyUpdated","pendingList","getEventsPendingRoomKey","getId","ev","attemptDecryption","isRetry","_e","onRoomKeysWithheld","withheld","onUserIdentityUpdated","newVerification","UserTrustStatusChanged","KeysChanged","onDevicesUpdated","WillUpdateDevices","DevicesUpdated","handleSecretReceived","checkSecrets","pendingValues","getSecretsFromInbox","deleteSecretsFromInbox","onLiveEventFromSync","isState","getUnsigned","processEvent","KeyVerificationCancel","KeyVerificationDone","KeyVerificationMac","KeyVerificationStart","KeyVerificationKey","KeyVerificationReady","KeyVerificationAccept","RoomMessage","msgtype","MsgType","isVerificationEvent","onKeyVerificationEvent","evt","isDecryptionFailure","isEncrypted","timeoutId","setTimeout","MatrixEventEvent","Decrypted","onDecrypted","decryptedEvent","clearTimeout","getSender","receiveVerificationEvent","state_key","getStateKey","origin_server_ts","getTs","MapWithDefault","trustRequirement","addEventToPendingList","Untrusted","CrossSignedOrLegacy","decryptRoomEvent","stringifyEvent","removeEventFromPendingList","clearEvent","claimedEd25519Key","senderClaimedEd25519Key","senderCurve25519Key","forwardingCurve25519KeyChain","DecryptionError","DecryptionFailureCode","UNKNOWN_ERROR","onMegolmDecryptionError","errorDetails","sender_key","MissingRoomKey","UnknownMessageIndex","getMembershipAtEvent","HISTORICAL_MESSAGE_USER_NOT_JOINED","deviceCreationTimeMs","HISTORICAL_MESSAGE_NO_KEY_BACKUP","HISTORICAL_MESSAGE_WORKING_BACKUP","HISTORICAL_MESSAGE_BACKUP_UNCONFIGURED","maybe_withheld","failureCode","MEGOLM_KEY_WITHHELD_FOR_UNVERIFIED_DEVICE","MEGOLM_KEY_WITHHELD","MEGOLM_UNKNOWN_INBOUND_SESSION_ID","OLM_UNKNOWN_MESSAGE_INDEX","SenderIdentityPreviouslyVerified","SENDER_IDENTITY_PREVIOUSLY_VERIFIED","UnknownSenderDevice","UNKNOWN_SENDER_DEVICE","UnsignedSenderDevice","UNSIGNED_SENDER_DEVICE","getClearContent","status","shieldColour","EventShieldColour","NONE","shieldReason","encryptionInfo","getRoomEventEncryptionInfo","shieldState","color","Grey","GREY","None","RED","EventShieldReason","UNVERIFIED_IDENTITY","UNSIGNED_DEVICE","AUTHENTICITY_NOT_GUARANTEED","UNKNOWN_DEVICE","UNKNOWN","rustEncryptionInfoToJsEncryptionInfo","roomPendingEvents","eventsPendingKey","sessionPendingEvents","getOrCreate","delete","getWireType","migrateFromLegacyCrypto","args","_args$legacyMigration2","legacyStore","Debug","turnOn","containsData","startup","accountPickle","doTxn","IndexedDBCryptoStore","STORE_ACCOUNT","txn","getAccount","acctPickle","migrationState","getMigrationState","MigrationState","MEGOLM_SESSIONS_MIGRATED","nOlmSessions","nSessions","STORE_SESSIONS","countEndToEndSessions","n","countOlmSessions","nMegolmSessions","countEndToEndInboundGroupSessions","countMegolmSessions","totalSteps","stepsDone","onProgress","steps","_args$legacyMigration","legacyMigrationProgressListener","pickleKey","TextEncoder","encode","legacyPickleKey","NOT_STARTED","storeHandle","migrationData","a","pickledAccount","getAndDecryptCachedSecretKey","backupCallDone","_backupInfo$auth_data","publicKey","backupRecoveryKey","privateCrossSigningMasterKey","privateCrossSigningSelfSigningKey","privateCrossSigningUserSigningKey","migrateBaseData","INITIAL_DATA_MIGRATED","setMigrationState","onBatchDone","getEndToEndSessionsBatch","pickledSession","deviceKey","pickle","lastUseTime","creationTime","lastReceivedMessageTs","migrateOlmSessions","deleteEndToEndSessionsBatch","OLM_SESSIONS_MIGRATED","getEndToEndInboundGroupSessionsBatch","_sessionData$keysClai","senderSigningKey","keysClaimed","needsBackup","untrusted","migrateMegolmSessions","deleteEndToEndInboundGroupSessionsBatch","getSecretStorePrivateKey","iv","decryptAESSecretStorageItem","migrateLegacyLocalTrustIfNeeded","legacyCryptoStore","rustCrypto","rustOwnIdentity","legacyLocallyTrustedMSK","maybeTrustedKeys","getCrossSigningKeys","msk","master","getLegacyTrustedPublicMasterKeyBase64","mskInfo","rustSeenMSK","initRustCrypto","storePrefix","storeKey","StoreHandle","openWithKey","open","storePassphrase","initFromStore","ROOM_SETTINGS_MIGRATED","STORE_ROOMS","getEndToEndRooms","legacySettings","rustSettings","migrateRoomSettingsFromLegacyCrypto","roomKeyRequestsEnabled","registerRoomKeyUpdatedCallback","registerRoomKeysWithheldCallback","registerUserIdentityUpdatedCallback","registerDevicesUpdatedCallback","registerReceiveSecretCallback","_value","INITIAL_OWN_KEY_QUERY_DONE","initialKeyQueryDone","initOlmMachine"],"sourceRoot":""}