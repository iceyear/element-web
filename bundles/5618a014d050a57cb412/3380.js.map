{"version":3,"file":"bundles/5618a014d050a57cb412/3380.js","mappings":"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","sources":["webpack://element-web/./node_modules/@matrix-org/matrix-sdk-crypto-wasm/pkg/matrix_sdk_crypto_wasm_bg.js","webpack://element-web/./node_modules/@matrix-org/matrix-sdk-crypto-wasm/index-wasm-esm.mjs"],"sourcesContent":["let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nconst CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(state => {\n    wasm.__wbindgen_export_2.get(state.dtor)(state.a, state.b)\n});\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state);\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\nfunction __wbg_adapter_56(arg0, arg1, arg2) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h8b01e5822120501e(retptr, arg0, arg1, addHeapObject(arg2));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        if (r1) {\n            throw takeObject(r0);\n        }\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nfunction __wbg_adapter_59(arg0, arg1) {\n    wasm._dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h421ff8a63e364c82(arg0, arg1);\n}\n\nfunction __wbg_adapter_62(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hf01ec3d0f56b9a66(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction makeClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        try {\n            return f(state.a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_2.get(state.dtor)(state.a, state.b);\n                state.a = 0;\n                CLOSURE_DTORS.unregister(state);\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\nfunction __wbg_adapter_65(arg0, arg1) {\n    wasm._dyn_core__ops__function__Fn_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h979574dda83929ee(arg0, arg1);\n}\n\nfunction __wbg_adapter_68(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__Fn__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h763dc4f7c27cfc89(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8ArrayMemory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction passArrayJsValueToWasm0(array, malloc) {\n    const ptr = malloc(array.length * 4, 4) >>> 0;\n    const mem = getDataViewMemory0();\n    for (let i = 0; i < array.length; i++) {\n        mem.setUint32(ptr + 4 * i, addHeapObject(array[i]), true);\n    }\n    WASM_VECTOR_LEN = array.length;\n    return ptr;\n}\n\nlet stack_pointer = 128;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n\nfunction getArrayJsValueFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    const mem = getDataViewMemory0();\n    const result = [];\n    for (let i = ptr; i < ptr + 4 * len; i += 4) {\n        result.push(takeObject(mem.getUint32(i, true)));\n    }\n    return result;\n}\n\nlet cachedUint16ArrayMemory0 = null;\n\nfunction getUint16ArrayMemory0() {\n    if (cachedUint16ArrayMemory0 === null || cachedUint16ArrayMemory0.byteLength === 0) {\n        cachedUint16ArrayMemory0 = new Uint16Array(wasm.memory.buffer);\n    }\n    return cachedUint16ArrayMemory0;\n}\n\nfunction getArrayU16FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint16ArrayMemory0().subarray(ptr / 2, ptr / 2 + len);\n}\n/**\n* Get the versions of the Rust libraries we are using.\n* @returns {Versions}\n*/\nexport function getVersions() {\n    const ret = wasm.getVersions();\n    return Versions.__wrap(ret);\n}\n\n/**\n* Run some stuff when the Wasm module is instantiated.\n*\n* Right now, it does the following:\n*\n* * Redirect Rust panics to JavaScript console.\n*/\nexport function start() {\n    wasm.start();\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction __wbg_adapter_748(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__h1b141f68d4959757(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\n/**\n* Who can see a room's history.\n*/\nexport const HistoryVisibility = Object.freeze({\n/**\n* Previous events are accessible to newly joined members from\n* the point they were invited onwards.\n*\n* Events stop being accessible when the member's state changes\n* to something other than *invite* or *join*.\n*/\nInvited:0,\"0\":\"Invited\",\n/**\n* Previous events are accessible to newly joined members from\n* the point they joined the room onwards.\n*\n* Events stop being accessible when the member's state changes\n* to something other than *join*.\n*/\nJoined:1,\"1\":\"Joined\",\n/**\n* Previous events are always accessible to newly joined members.\n*\n* All events in the room are accessible, even those sent when\n* the member was not a part of the room.\n*/\nShared:2,\"2\":\"Shared\",\n/**\n* All events while this is the `HistoryVisibility` value may be\n* shared by any participating homeserver with anyone, regardless\n* of whether they have ever joined the room.\n*/\nWorldReadable:3,\"3\":\"WorldReadable\", });\n/**\n* Logger level.\n*/\nexport const LoggerLevel = Object.freeze({\n/**\n* `TRACE` level.\n*\n* Designate very low priority, often extremely verbose,\n* information.\n*/\nTrace:0,\"0\":\"Trace\",\n/**\n* `DEBUG` level.\n*\n* Designate lower priority information.\n*/\nDebug:1,\"1\":\"Debug\",\n/**\n* `INFO` level.\n*\n* Designate useful information.\n*/\nInfo:2,\"2\":\"Info\",\n/**\n* `WARN` level.\n*\n* Designate hazardous situations.\n*/\nWarn:3,\"3\":\"Warn\",\n/**\n* `ERROR` level.\n*\n* Designate very serious errors.\n*/\nError:4,\"4\":\"Error\", });\n/**\n* List of VerificationRequestState phases\n*/\nexport const VerificationRequestPhase = Object.freeze({\n/**\n* The verification request has been newly created by us.\n*/\nCreated:0,\"0\":\"Created\",\n/**\n* The verification request was received from the other party.\n*/\nRequested:1,\"1\":\"Requested\",\n/**\n* The verification request is ready to start a verification flow.\n*/\nReady:2,\"2\":\"Ready\",\n/**\n* The verification request has transitioned into a concrete verification\n* flow. For example it transitioned into the emoji based SAS\n* verification.\n*/\nTransitioned:3,\"3\":\"Transitioned\",\n/**\n* The verification flow that was started with this request has finished.\n*/\nDone:4,\"4\":\"Done\",\n/**\n* The verification process has been cancelled.\n*/\nCancelled:5,\"5\":\"Cancelled\", });\n/**\n* List of available verification methods.\n*/\nexport const VerificationMethod = Object.freeze({\n/**\n* The `m.sas.v1` verification method.\n*\n* SAS means Short Authentication String.\n*/\nSasV1:0,\"0\":\"SasV1\",\n/**\n* The `m.qr_code.scan.v1` verification method.\n*/\nQrCodeScanV1:1,\"1\":\"QrCodeScanV1\",\n/**\n* The `m.qr_code.show.v1` verification method.\n*/\nQrCodeShowV1:2,\"2\":\"QrCodeShowV1\",\n/**\n* The `m.reciprocate.v1` verification method.\n*/\nReciprocateV1:3,\"3\":\"ReciprocateV1\", });\n/**\n* List of `Qr` states\n*/\nexport const QrState = Object.freeze({\n/**\n* We have received the other device's details (from the\n* `m.key.verification.request` or `m.key.verification.ready`) and\n* established the shared secret, so can\n* display the QR code.\n*/\nCreated:0,\"0\":\"Created\",\n/**\n* The other side has scanned our QR code and sent an\n* `m.key.verification.start` message with `method: m.reciprocate.v1` with\n* matching shared secret.\n*/\nScanned:1,\"1\":\"Scanned\",\n/**\n* Our user has confirmed that the other device scanned successfully. We\n* have sent an `m.key.verification.done`.\n*/\nConfirmed:2,\"2\":\"Confirmed\",\n/**\n* We have scanned the other side's QR code and are able to send a\n* `m.key.verification.start` message with `method: m.reciprocate.v1`.\n*\n* Call `Qr::reciprocate` to build the start message.\n*\n* Note that, despite the name of this state, we have not necessarily\n* yet sent the `m.reciprocate.v1` message.\n*/\nReciprocated:3,\"3\":\"Reciprocated\",\n/**\n* Verification complete: we have received an `m.key.verification.done`\n* from the other side.\n*/\nDone:4,\"4\":\"Done\",\n/**\n* Verification cancelled or failed.\n*/\nCancelled:5,\"5\":\"Cancelled\", });\n/**\n* The result of a signature check.\n*/\nexport const SignatureState = Object.freeze({\n/**\n* The signature is missing.\n*/\nMissing:0,\"0\":\"Missing\",\n/**\n* The signature is invalid.\n*/\nInvalid:1,\"1\":\"Invalid\",\n/**\n* The signature is valid but the device or user identity that created the\n* signature is not trusted.\n*/\nValidButNotTrusted:2,\"2\":\"ValidButNotTrusted\",\n/**\n* The signature is valid and the device or user identity that created the\n* signature is trusted.\n*/\nValidAndTrusted:3,\"3\":\"ValidAndTrusted\", });\n/**\n* An encryption algorithm to be used to encrypt messages sent to a\n* room.\n*/\nexport const EncryptionAlgorithm = Object.freeze({\n/**\n* Olm version 1 using Curve25519, AES-256, and SHA-256.\n*/\nOlmV1Curve25519AesSha2:0,\"0\":\"OlmV1Curve25519AesSha2\",\n/**\n* Megolm version 1 using AES-256 and SHA-256.\n*/\nMegolmV1AesSha2:1,\"1\":\"MegolmV1AesSha2\",\n/**\n* Unsupported algorithm.\n*\n* Applications should ignore this value if it is received, and should\n* never set it.\n*/\nUnknown:2,\"2\":\"Unknown\", });\n/**\n* The local trust state of a device.\n*/\nexport const LocalTrust = Object.freeze({\n/**\n* The device has been verified and is trusted.\n*/\nVerified:0,\"0\":\"Verified\",\n/**\n* The device been blacklisted from communicating.\n*/\nBlackListed:1,\"1\":\"BlackListed\",\n/**\n* The trust state of the device is being ignored.\n*/\nIgnored:2,\"2\":\"Ignored\",\n/**\n* The trust state is unset.\n*/\nUnset:3,\"3\":\"Unset\", });\n/**\n* The basic key algorithm names in the specification.\n*/\nexport const DeviceKeyAlgorithmName = Object.freeze({\n/**\n* The Ed25519 signature algorithm.\n*/\nEd25519:0,\"0\":\"Ed25519\",\n/**\n* The Curve25519 ECDH algorithm.\n*/\nCurve25519:1,\"1\":\"Curve25519\",\n/**\n* An unknown device key algorithm.\n*/\nUnknown:3,\"3\":\"Unknown\", });\n/**\n* Decryption error codes\n*/\nexport const DecryptionErrorCode = Object.freeze({\n/**\n* The room key is not known\n*/\nMissingRoomKey:0,\"0\":\"MissingRoomKey\",\n/**\n* The room key is known but ratcheted\n*/\nUnknownMessageIndex:1,\"1\":\"UnknownMessageIndex\",\n/**\n* Decryption failed because of a mismatch between the identity keys of the\n* device we received the room key from and the identity keys recorded in\n* the plaintext of the room key to-device message.\n*/\nMismatchedIdentityKeys:2,\"2\":\"MismatchedIdentityKeys\",\n/**\n* We weren't able to link the message back to any known device.\n*/\nUnknownSenderDevice:3,\"3\":\"UnknownSenderDevice\",\n/**\n* The sender device is not cross-signed.\n*/\nUnsignedSenderDevice:4,\"4\":\"UnsignedSenderDevice\",\n/**\n* The sender's identity is unverified, but was previously verified.\n*/\nSenderIdentityVerificationViolation:5,\"5\":\"SenderIdentityVerificationViolation\",\n/**\n* Other failure.\n*/\nUnableToDecrypt:6,\"6\":\"UnableToDecrypt\", });\n/**\n* The mode of the QR code login.\n*\n* The QR code login mechanism supports both, the new device, as well as the\n* existing device to display the QR code.\n*\n* The different modes have an explicit one-byte identifier which gets added to\n* the QR code data.\n*/\nexport const QrCodeMode = Object.freeze({\n/**\n* The new device is displaying the QR code.\n*/\nLogin:0,\"0\":\"Login\",\n/**\n* The existing device is displaying the QR code.\n*/\nReciprocate:1,\"1\":\"Reciprocate\", });\n/**\n* The trust level required to decrypt an event\n*/\nexport const TrustRequirement = Object.freeze({\n/**\n* Decrypt events from everyone regardless of trust\n*/\nUntrusted:0,\"0\":\"Untrusted\",\n/**\n* Only decrypt events from cross-signed or legacy devices\n*/\nCrossSignedOrLegacy:1,\"1\":\"CrossSignedOrLegacy\",\n/**\n* Only decrypt events from cross-signed devices\n*/\nCrossSigned:2,\"2\":\"CrossSigned\", });\n/**\n* Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]\n* for more info.\n*/\nexport const ShieldColor = Object.freeze({\n/**\n* Important warning\n*/\nRed:0,\"0\":\"Red\",\n/**\n* Low warning\n*/\nGrey:1,\"1\":\"Grey\",\n/**\n* No warning\n*/\nNone:2,\"2\":\"None\", });\n/**\n* An enum over the different key types a device can have.\n*\n* Currently devices have a curve25519 and ed25519 keypair. The keys\n* transport format is a base64 encoded string, any unknown key type\n* will be left as such a string.\n*/\nexport const DeviceKeyName = Object.freeze({\n/**\n* The curve25519 device key.\n*/\nCurve25519:0,\"0\":\"Curve25519\",\n/**\n* The ed25519 device key.\n*/\nEd25519:1,\"1\":\"Ed25519\",\n/**\n* An unknown device key.\n*/\nUnknown:2,\"2\":\"Unknown\", });\n/**\n* Represent the type of a request.\n*/\nexport const RequestType = Object.freeze({\n/**\n* Represents a `KeysUploadRequest`.\n*/\nKeysUpload:0,\"0\":\"KeysUpload\",\n/**\n* Represents a `KeysQueryRequest`.\n*/\nKeysQuery:1,\"1\":\"KeysQuery\",\n/**\n* Represents a `KeysClaimRequest`.\n*/\nKeysClaim:2,\"2\":\"KeysClaim\",\n/**\n* Represents a `ToDeviceRequest`.\n*/\nToDevice:3,\"3\":\"ToDevice\",\n/**\n* Represents a `SignatureUploadRequest`.\n*/\nSignatureUpload:4,\"4\":\"SignatureUpload\",\n/**\n* Represents a `RoomMessageRequest`.\n*/\nRoomMessage:5,\"5\":\"RoomMessage\",\n/**\n* Represents a `KeysBackupRequest`.\n*/\nKeysBackup:6,\"6\":\"KeysBackup\", });\n/**\n* A machine-readable representation of the authenticity for a `ShieldState`.\n*/\nexport const ShieldStateCode = Object.freeze({\n/**\n* Not enough information available to check the authenticity.\n*/\nAuthenticityNotGuaranteed:0,\"0\":\"AuthenticityNotGuaranteed\",\n/**\n* The sending device isn't yet known by the Client.\n*/\nUnknownDevice:1,\"1\":\"UnknownDevice\",\n/**\n* The sending device hasn't been verified by the sender.\n*/\nUnsignedDevice:2,\"2\":\"UnsignedDevice\",\n/**\n* The sender hasn't been verified by the Client's user.\n*/\nUnverifiedIdentity:3,\"3\":\"UnverifiedIdentity\",\n/**\n* An unencrypted event in an encrypted room.\n*/\nSentInClear:4,\"4\":\"SentInClear\",\n/**\n* The sender was previously verified but changed their identity.\n*/\nVerificationViolation:5,\"5\":\"VerificationViolation\", });\n\nconst AttachmentFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_attachment_free(ptr >>> 0, 1));\n/**\n* A type to encrypt and to decrypt anything that can fit in an\n* `Uint8Array`, usually big buffer.\n*/\nexport class Attachment {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AttachmentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_attachment_free(ptr, 0);\n    }\n    /**\n    * Encrypt the content of the `Uint8Array`.\n    *\n    * It produces an `EncryptedAttachment`, which can be used to\n    * retrieve the media encryption information, or the encrypted\n    * data.\n    * @param {Uint8Array} array\n    * @returns {EncryptedAttachment}\n    */\n    static encrypt(array) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(array, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.attachment_encrypt(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return EncryptedAttachment.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Decrypt an `EncryptedAttachment`.\n    *\n    * The encrypted attachment can be created manually, or from the\n    * `encrypt` method.\n    *\n    * **Warning**: The encrypted attachment can be used only\n    * **once**! The encrypted data will still be present, but the\n    * media encryption info (which contain secrets) will be\n    * destroyed. It is still possible to get a JSON-encoded backup\n    * by calling `EncryptedAttachment.mediaEncryptionInfo`.\n    * @param {EncryptedAttachment} attachment\n    * @returns {Uint8Array}\n    */\n    static decrypt(attachment) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(attachment, EncryptedAttachment);\n            wasm.attachment_decrypt(retptr, attachment.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst BackupDecryptionKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupdecryptionkey_free(ptr >>> 0, 1));\n/**\n* The private part of the backup key, the one used for recovery.\n*/\nexport class BackupDecryptionKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupDecryptionKey.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupDecryptionKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupDecryptionKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupdecryptionkey_free(ptr, 0);\n    }\n    /**\n    * Create a new random [`BackupDecryptionKey`].\n    * @returns {BackupDecryptionKey}\n    */\n    static createRandomKey() {\n        const ret = wasm.backupdecryptionkey_createRandomKey();\n        return BackupDecryptionKey.__wrap(ret);\n    }\n    /**\n    * Try to create a [`BackupDecryptionKey`] from a base 64 encoded string.\n    * @param {string} key\n    * @returns {BackupDecryptionKey}\n    */\n    static fromBase64(key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.backupdecryptionkey_fromBase64(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BackupDecryptionKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Convert the backup decryption key to a base 64 encoded string.\n    * @returns {string}\n    */\n    toBase64() {\n        const ret = wasm.backupdecryptionkey_toBase64(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get the public part of the backup key.\n    * @returns {MegolmV1BackupKey}\n    */\n    get megolmV1PublicKey() {\n        const ret = wasm.backupdecryptionkey_megolmV1PublicKey(this.__wbg_ptr);\n        return MegolmV1BackupKey.__wrap(ret);\n    }\n    /**\n    * Try to decrypt a message that was encrypted using the public part of the\n    * backup key.\n    * @param {string} ephemeral_key\n    * @param {string} mac\n    * @param {string} ciphertext\n    * @returns {string}\n    */\n    decryptV1(ephemeral_key, mac, ciphertext) {\n        let deferred5_0;\n        let deferred5_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ephemeral_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(mac, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len2 = WASM_VECTOR_LEN;\n            wasm.backupdecryptionkey_decryptV1(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr4 = r0;\n            var len4 = r1;\n            if (r3) {\n                ptr4 = 0; len4 = 0;\n                throw takeObject(r2);\n            }\n            deferred5_0 = ptr4;\n            deferred5_1 = len4;\n            return getStringFromWasm0(ptr4, len4);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred5_0, deferred5_1, 1);\n        }\n    }\n}\n\nconst BackupKeysFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupkeys_free(ptr >>> 0, 1));\n/**\n* Stored versions of the backup keys.\n*/\nexport class BackupKeys {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupKeys.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupKeysFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupKeysFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupkeys_free(ptr, 0);\n    }\n    /**\n    * The key used to decrypt backed up room keys\n    * @returns {BackupDecryptionKey | undefined}\n    */\n    get decryptionKey() {\n        const ret = wasm.__wbg_get_backupkeys_decryptionKey(this.__wbg_ptr);\n        return ret === 0 ? undefined : BackupDecryptionKey.__wrap(ret);\n    }\n    /**\n    * The key used to decrypt backed up room keys\n    * @param {BackupDecryptionKey | undefined} [arg0]\n    */\n    set decryptionKey(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, BackupDecryptionKey);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_backupkeys_decryptionKey(this.__wbg_ptr, ptr0);\n    }\n    /**\n    * The version that we are using for backups.\n    * @returns {string | undefined}\n    */\n    get backupVersion() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_backupkeys_backupVersion(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The version that we are using for backups.\n    * @param {string | undefined} [arg0]\n    */\n    set backupVersion(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupkeys_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * The key used to decrypt backed up room keys, encoded as base64\n    *\n    * @deprecated Use `BackupKeys.decryptionKey.toBase64()`\n    * @returns {string | undefined}\n    */\n    get decryptionKeyBase64() {\n        const ret = wasm.backupkeys_decryptionKeyBase64(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst BackupSecretsBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupsecretsbundle_free(ptr >>> 0, 1));\n/**\n* The backup-specific parts of a secrets bundle.\n*/\nexport class BackupSecretsBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupSecretsBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupSecretsBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupSecretsBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupsecretsbundle_free(ptr, 0);\n    }\n    /**\n    * The backup decryption key, encoded as unpadded base64.\n    * @returns {string}\n    */\n    get key() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_backupsecretsbundle_key(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The backup decryption key, encoded as unpadded base64.\n    * @param {string} arg0\n    */\n    set key(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * The backup version which this backup decryption key is used with.\n    * @returns {string}\n    */\n    get backup_version() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_backupsecretsbundle_backup_version(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The backup version which this backup decryption key is used with.\n    * @param {string} arg0\n    */\n    set backup_version(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst BaseMigrationDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_basemigrationdata_free(ptr >>> 0, 1));\n/**\n* The base dataset that is important to migrate to the Rust SDK.\n*\n* Can be imported into the rust store with {@link #migrateBaseData}.\n*/\nexport class BaseMigrationData {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BaseMigrationDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_basemigrationdata_free(ptr, 0);\n    }\n    /**\n    * The user id of the account owner.\n    * @returns {UserId | undefined}\n    */\n    get userId() {\n        const ret = wasm.__wbg_get_basemigrationdata_userId(this.__wbg_ptr);\n        return ret === 0 ? undefined : UserId.__wrap(ret);\n    }\n    /**\n    * The user id of the account owner.\n    * @param {UserId | undefined} [arg0]\n    */\n    set userId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, UserId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_basemigrationdata_userId(this.__wbg_ptr, ptr0);\n    }\n    /**\n    * The device ID of the account owner.\n    * @returns {DeviceId | undefined}\n    */\n    get deviceId() {\n        const ret = wasm.__wbg_get_basemigrationdata_deviceId(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n    * The device ID of the account owner.\n    * @param {DeviceId | undefined} [arg0]\n    */\n    set deviceId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, DeviceId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_basemigrationdata_deviceId(this.__wbg_ptr, ptr0);\n    }\n    /**\n    * The pickle string holding the Olm Account, as returned by\n    * `olm_pickle_account` in libolm.\n    * @returns {string}\n    */\n    get pickledAccount() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_backupsecretsbundle_key(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The pickle string holding the Olm Account, as returned by\n    * `olm_pickle_account` in libolm.\n    * @param {string} arg0\n    */\n    set pickledAccount(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * The backup version that is currently active.\n    * @returns {string | undefined}\n    */\n    get backupVersion() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_basemigrationdata_backupVersion(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The backup version that is currently active.\n    * @param {string | undefined} [arg0]\n    */\n    set backupVersion(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * The backup recovery key, as a base64-encoded string.\n    * @returns {string | undefined}\n    */\n    get backupRecoveryKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_basemigrationdata_backupRecoveryKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The backup recovery key, as a base64-encoded string.\n    * @param {string | undefined} [arg0]\n    */\n    set backupRecoveryKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupRecoveryKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * The private, base64-encoded, master cross-signing key.\n    * @returns {string | undefined}\n    */\n    get privateCrossSigningMasterKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_basemigrationdata_privateCrossSigningMasterKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The private, base64-encoded, master cross-signing key.\n    * @param {string | undefined} [arg0]\n    */\n    set privateCrossSigningMasterKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningMasterKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * The private, base64-encoded, self-signing key.\n    * @returns {string | undefined}\n    */\n    get privateCrossSigningSelfSigningKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_basemigrationdata_privateCrossSigningSelfSigningKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The private, base64-encoded, self-signing key.\n    * @param {string | undefined} [arg0]\n    */\n    set privateCrossSigningSelfSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningSelfSigningKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * The private, base64-encoded, user-signing key.\n    * @returns {string | undefined}\n    */\n    get privateCrossSigningUserSigningKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_basemigrationdata_privateCrossSigningUserSigningKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The private, base64-encoded, user-signing key.\n    * @param {string | undefined} [arg0]\n    */\n    set privateCrossSigningUserSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningUserSigningKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * Create a new `BaseMigrationData` with default values.\n    */\n    constructor() {\n        const ret = wasm.basemigrationdata_new();\n        this.__wbg_ptr = ret >>> 0;\n        BaseMigrationDataFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst CancelInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_cancelinfo_free(ptr >>> 0, 1));\n/**\n* Information about the cancellation of a verification request or\n* verification flow.\n*/\nexport class CancelInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CancelInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        CancelInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CancelInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cancelinfo_free(ptr, 0);\n    }\n    /**\n    * Get the human readable reason of the cancellation.\n    * @returns {string}\n    */\n    reason() {\n        const ret = wasm.cancelinfo_reason(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get the `code` (e.g. `m.user`) that was used to cancel the\n    * verification.\n    * @returns {string}\n    */\n    cancelCode() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cancelinfo_cancelCode(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Was the verification cancelled by us?\n    * @returns {boolean}\n    */\n    cancelledbyUs() {\n        const ret = wasm.cancelinfo_cancelledbyUs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst CheckCodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_checkcode_free(ptr >>> 0, 1));\n/**\n* A check code that can be used to confirm that two [`EstablishedEcies`]\n* objects share the same secret. This is supposed to be shared out-of-band to\n* protect against active Man-in-the-middle (MITM) attacks.\n*\n* Since the initiator device can always tell whether a MITM attack is in\n* progress after channel establishment, this code technically carries only a\n* single bit of information, representing whether the initiator has determined\n* that the channel is \"secure\" or \"not secure\".\n*\n* However, given this will need to be interactively confirmed by the user,\n* there is risk that the user would confirm the dialogue without paying\n* attention to its content. By expanding this single bit into a deterministic\n* two-digit check code, the user is forced to pay more attention by having to\n* enter it instead of just clicking through a dialogue.\n*/\nexport class CheckCode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CheckCode.prototype);\n        obj.__wbg_ptr = ptr;\n        CheckCodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CheckCodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_checkcode_free(ptr, 0);\n    }\n    /**\n    * Convert the check code to an array of two bytes.\n    *\n    * The bytes can be converted to a more user-friendly representation. The\n    * [`CheckCode::to_digit`] converts the bytes to a two-digit number.\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.checkcode_as_bytes(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Convert the check code to two base-10 numbers.\n    *\n    * The number should be displayed with a leading 0 in case the first digit\n    * is a 0.\n    * @returns {number}\n    */\n    to_digit() {\n        const ret = wasm.checkcode_to_digit(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst CollectStrategyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_collectstrategy_free(ptr >>> 0, 1));\n/**\n* Strategy to collect the devices that should receive room keys for the\n* current discussion.\n*/\nexport class CollectStrategy {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CollectStrategy.prototype);\n        obj.__wbg_ptr = ptr;\n        CollectStrategyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CollectStrategyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_collectstrategy_free(ptr, 0);\n    }\n    /**\n    * Tests for equality between two [`CollectStrategy`]s.\n    * @param {CollectStrategy} other\n    * @returns {boolean}\n    */\n    eq(other) {\n        _assertClass(other, CollectStrategy);\n        const ret = wasm.collectstrategy_eq(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Device based sharing strategy.\n    *\n    * If `only_allow_trusted_devices` is `true`, devices that are not trusted\n    * will be excluded from the conversation. A device is trusted if any of\n    * the following is true:\n    *     - It was manually marked as trusted.\n    *     - It was marked as verified via interactive verification.\n    *     - It is signed by its owner identity, and this identity has been\n    *       trusted via interactive verification.\n    *     - It is the current own device of the user.\n    *\n    * If `error_on_verified_user` is `true`, and a verified user has an\n    * unsigned device, key sharing will fail with an error.\n    *\n    * If `error_on_verified_user` is `true`, and a verified user has replaced\n    * their identity, key sharing will fail with an error.\n    *\n    * Otherwise, keys are shared with unsigned devices as normal.\n    *\n    * Once the problematic devices are blacklisted or whitelisted the\n    * caller can retry to share a second time.\n    * @param {boolean} only_allow_trusted_devices\n    * @param {boolean} error_on_verified_user_problem\n    * @returns {CollectStrategy}\n    */\n    static deviceBasedStrategy(only_allow_trusted_devices, error_on_verified_user_problem) {\n        const ret = wasm.collectstrategy_deviceBasedStrategy(only_allow_trusted_devices, error_on_verified_user_problem);\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n    * Share based on identity. Only distribute to devices signed by their\n    * owner. If a user has no published identity he will not receive\n    * any room keys.\n    * @returns {CollectStrategy}\n    */\n    static identityBasedStrategy() {\n        const ret = wasm.collectstrategy_identityBasedStrategy();\n        return CollectStrategy.__wrap(ret);\n    }\n}\n\nconst CrossSigningBootstrapRequestsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningbootstraprequests_free(ptr >>> 0, 1));\n/**\n* A set of requests to be executed when bootstrapping cross-signing using\n* {@link OlmMachine.bootstrapCrossSigning}.\n*/\nexport class CrossSigningBootstrapRequests {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningBootstrapRequests.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningBootstrapRequestsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningBootstrapRequestsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningbootstraprequests_free(ptr, 0);\n    }\n    /**\n    * An optional request to upload a device key.\n    *\n    * This will either be `undefined`, or an \"outgoing request\" as returned by\n    * {@link OlmMachine.outgoingRequests}.\n    *\n    * If it is defined, the request should be sent first, and the result sent\n    * back with {@link OlmMachine.markRequestAsSent}.\n    * @returns {any}\n    */\n    get uploadKeysRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadKeysRequest(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Request to upload the cross-signing keys.\n    *\n    * Should be sent second.\n    * @returns {UploadSigningKeysRequest}\n    */\n    get uploadSigningKeysRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadSigningKeysRequest(this.__wbg_ptr);\n        return UploadSigningKeysRequest.__wrap(ret);\n    }\n    /**\n    * Request to upload key signatures, including those for the cross-signing\n    * keys, and maybe some for the optional uploaded key too.\n    *\n    * Should be sent last.\n    * @returns {SignatureUploadRequest}\n    */\n    get uploadSignaturesRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadSignaturesRequest(this.__wbg_ptr);\n        return SignatureUploadRequest.__wrap(ret);\n    }\n}\n\nconst CrossSigningKeyExportFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningkeyexport_free(ptr >>> 0, 1));\n/**\n* A struct containing private cross signing keys that can be backed\n* up or uploaded to the secret store.\n*/\nexport class CrossSigningKeyExport {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningKeyExport.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningKeyExportFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningKeyExportFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningkeyexport_free(ptr, 0);\n    }\n    /**\n    * The seed of the master key encoded as unpadded base64.\n    * @returns {string | undefined}\n    */\n    get masterKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.crosssigningkeyexport_masterKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The seed of the self signing key encoded as unpadded base64.\n    * @returns {string | undefined}\n    */\n    get self_signing_key() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.crosssigningkeyexport_self_signing_key(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The seed of the user signing key encoded as unpadded base64.\n    * @returns {string | undefined}\n    */\n    get userSigningKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.crosssigningkeyexport_userSigningKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst CrossSigningStatusFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningstatus_free(ptr >>> 0, 1));\n/**\n* Struct representing the state of our private cross signing keys,\n* it shows which private cross signing keys we have locally stored.\n*/\nexport class CrossSigningStatus {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningStatus.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningStatusFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningStatusFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningstatus_free(ptr, 0);\n    }\n    /**\n    * Do we have the master key?\n    * @returns {boolean}\n    */\n    get hasMaster() {\n        const ret = wasm.crosssigningstatus_hasMaster(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Do we have the self signing key? This one is necessary to sign\n    * our own devices.\n    * @returns {boolean}\n    */\n    get hasSelfSigning() {\n        const ret = wasm.crosssigningstatus_hasSelfSigning(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Do we have the user signing key? This one is necessary to sign\n    * other users.\n    * @returns {boolean}\n    */\n    get hasUserSigning() {\n        const ret = wasm.crosssigningstatus_hasUserSigning(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst Curve25519PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_curve25519publickey_free(ptr >>> 0, 1));\n/**\n* A Curve25519 public key.\n*/\nexport class Curve25519PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Curve25519PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Curve25519PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Curve25519PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_curve25519publickey_free(ptr, 0);\n    }\n    /**\n    * Create a new [`Curve25519PublicKey`] from a base64 encoded string.\n    * @param {string} key\n    */\n    constructor(key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.curve25519publickey_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            Curve25519PublicKeyFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The number of bytes a Curve25519 public key has.\n    * @returns {number}\n    */\n    get length() {\n        const ret = wasm.curve25519publickey_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Serialize an Curve25519 public key to an unpadded base64\n    * representation.\n    * @returns {string}\n    */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.curve25519publickey_toBase64(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DecryptedRoomEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptedroomevent_free(ptr >>> 0, 1));\n/**\n* A decrypted room event.\n*/\nexport class DecryptedRoomEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DecryptedRoomEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        DecryptedRoomEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptedRoomEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptedroomevent_free(ptr, 0);\n    }\n    /**\n    * The JSON-encoded decrypted event.\n    * @returns {string}\n    */\n    get event() {\n        const ret = wasm.__wbg_get_decryptedroomevent_event(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * The user ID of the event sender, note this is untrusted data\n    * unless the `verification_state` is as well trusted.\n    * @returns {UserId | undefined}\n    */\n    get sender() {\n        const ret = wasm.decryptedroomevent_sender(this.__wbg_ptr);\n        return ret === 0 ? undefined : UserId.__wrap(ret);\n    }\n    /**\n    * The device ID of the device that sent us the event, note this\n    * is untrusted data unless `verification_state` is as well\n    * trusted.\n    * @returns {DeviceId | undefined}\n    */\n    get senderDevice() {\n        const ret = wasm.decryptedroomevent_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n    * The Curve25519 key of the device that created the megolm\n    * decryption key originally.\n    * @returns {string | undefined}\n    */\n    get senderCurve25519Key() {\n        const ret = wasm.decryptedroomevent_senderCurve25519Key(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * The signing Ed25519 key that have created the megolm key that\n    * was used to decrypt this session.\n    * @returns {string | undefined}\n    */\n    get senderClaimedEd25519Key() {\n        const ret = wasm.decryptedroomevent_senderClaimedEd25519Key(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Returns an empty array\n    *\n    * Previously, this returned the chain of Curve25519 keys through which\n    * this session was forwarded, via `m.forwarded_room_key` events.\n    * However, that is not cryptographically reliable, and clients should not\n    * be using it.\n    *\n    * @see https://github.com/matrix-org/matrix-spec/issues/1089\n    * @returns {Array<any>}\n    */\n    get forwardingCurve25519KeyChain() {\n        const ret = wasm.decryptedroomevent_forwardingCurve25519KeyChain(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * The verification state of the device that sent us the event.\n    * Note this is the state of the device at the time of\n    * decryption. It may change in the future if a device gets\n    * verified or deleted.\n    * @param {boolean} strict\n    * @returns {ShieldState | undefined}\n    */\n    shieldState(strict) {\n        const ret = wasm.decryptedroomevent_shieldState(this.__wbg_ptr, strict);\n        return ret === 0 ? undefined : ShieldState.__wrap(ret);\n    }\n}\n\nconst DecryptionSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptionsettings_free(ptr >>> 0, 1));\n/**\n* Settings for decrypting messages\n*/\nexport class DecryptionSettings {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptionSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptionsettings_free(ptr, 0);\n    }\n    /**\n    * The trust level required to decrypt the event\n    * @returns {TrustRequirement}\n    */\n    get sender_device_trust_requirement() {\n        const ret = wasm.__wbg_get_decryptionsettings_sender_device_trust_requirement(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * The trust level required to decrypt the event\n    * @param {TrustRequirement} arg0\n    */\n    set sender_device_trust_requirement(arg0) {\n        wasm.__wbg_set_decryptionsettings_sender_device_trust_requirement(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Create a new `DecryptionSettings` with the given trust requirement.\n    * @param {TrustRequirement} sender_device_trust_requirement\n    */\n    constructor(sender_device_trust_requirement) {\n        const ret = wasm.decryptionsettings_new(sender_device_trust_requirement);\n        this.__wbg_ptr = ret >>> 0;\n        DecryptionSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst DehydratedDeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevice_free(ptr >>> 0, 1));\n/**\n* A dehydrated device that can be uploaded to the server\n*/\nexport class DehydratedDevice {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDevice.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevice_free(ptr, 0);\n    }\n    /**\n    * Create the request to upload the dehydrated device\n    * @param {string} initial_device_display_name\n    * @param {Uint8Array} pickle_key\n    * @returns {Promise<PutDehydratedDeviceRequest>}\n    */\n    keysForUpload(initial_device_display_name, pickle_key) {\n        const ret = wasm.dehydrateddevice_keysForUpload(this.__wbg_ptr, addHeapObject(initial_device_display_name), addHeapObject(pickle_key));\n        return takeObject(ret);\n    }\n}\n\nconst DehydratedDevicesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevices_free(ptr >>> 0, 1));\n/**\n* Struct collecting methods to create and rehydrate dehydrated devices.\n*/\nexport class DehydratedDevices {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDevices.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDevicesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDevicesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevices_free(ptr, 0);\n    }\n    /**\n    * Create a new [`DehydratedDevice`] which can be uploaded to the server.\n    * @returns {Promise<DehydratedDevice>}\n    */\n    create() {\n        const ret = wasm.dehydrateddevices_create(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Rehydrate a dehydrated device.\n    * @param {Uint8Array} pickle_key\n    * @param {DeviceId} device_id\n    * @param {string} device_data\n    * @returns {Promise<RehydratedDevice>}\n    */\n    rehydrate(pickle_key, device_id, device_data) {\n        _assertClass(device_id, DeviceId);\n        const ptr0 = passStringToWasm0(device_data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.dehydrateddevices_rehydrate(this.__wbg_ptr, addHeapObject(pickle_key), device_id.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n}\n\nconst DeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_device_free(ptr >>> 0, 1));\n/**\n* A device represents a E2EE capable client of an user.\n*/\nexport class Device {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Device.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_device_free(ptr, 0);\n    }\n    /**\n    * Request an interactive verification with this device.\n    *\n    * Returns a 2-element array `[VerificationRequest, ToDeviceRequest]`.\n    * @param {any[] | undefined} [methods]\n    * @returns {Array<any>}\n    */\n    requestVerification(methods) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.device_requestVerification(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encrypt a to-device message to be sent to this device, using Olm\n    * encryption.\n    *\n    * Prior to calling this method you must ensure that an Olm session is\n    * available for the target device. This can be done by calling\n    * {@link OlmMachine.getMissingSessions}.\n    *\n    * The caller is responsible for sending the encrypted\n    * event to the target device. If multiple messages are\n    * encrypted for the same device using this method they should be sent in\n    * the same order as they are encrypted.\n    *\n    * # Returns\n    *\n    * Returns a promise for a JSON string containing the `content` of an\n    * encrypted event, which be used to create the payload for a\n    * `/sendToDevice` API.\n    * @param {string} event_type\n    * @param {any} content\n    * @returns {Promise<string>}\n    */\n    encryptToDeviceEvent(event_type, content) {\n        const ptr0 = passStringToWasm0(event_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.device_encryptToDeviceEvent(this.__wbg_ptr, ptr0, len0, addHeapObject(content));\n        return takeObject(ret);\n    }\n    /**\n    * Is this device considered to be verified.\n    *\n    * This method returns true if either the `is_locally_trusted`\n    * method returns `true` or if the `is_cross_signing_trusted`\n    * method returns `true`.\n    * @returns {boolean}\n    */\n    isVerified() {\n        const ret = wasm.device_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Is this device considered to be verified using cross signing.\n    * @returns {boolean}\n    */\n    isCrossSigningTrusted() {\n        const ret = wasm.device_isCrossSigningTrusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Is this device cross-signed by its owner?\n    * @returns {boolean}\n    */\n    isCrossSignedByOwner() {\n        const ret = wasm.device_isCrossSignedByOwner(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Set the local trust state of the device to the given state.\n    *\n    * This won’t affect any cross signing trust state, this only\n    * sets a flag marking to have the given trust state.\n    *\n    * `trust_state` represents the new trust state that should be\n    * set for the device.\n    * @param {LocalTrust} local_state\n    * @returns {Promise<any>}\n    */\n    setLocalTrust(local_state) {\n        const ret = wasm.device_setLocalTrust(this.__wbg_ptr, local_state);\n        return takeObject(ret);\n    }\n    /**\n    * The user ID of the device owner.\n    * @returns {UserId}\n    */\n    get userId() {\n        const ret = wasm.device_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n    * The unique ID of the device.\n    * @returns {DeviceId}\n    */\n    get deviceId() {\n        const ret = wasm.device_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n    * Get the human readable name of the device.\n    * @returns {string | undefined}\n    */\n    get displayName() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.device_displayName(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the key of the given key algorithm belonging to this device.\n    * @param {DeviceKeyAlgorithmName} algorithm\n    * @returns {DeviceKey | undefined}\n    */\n    getKey(algorithm) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.device_getKey(retptr, this.__wbg_ptr, algorithm);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : DeviceKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the Curve25519 key of the given device.\n    * @returns {Curve25519PublicKey | undefined}\n    */\n    get curve25519Key() {\n        const ret = wasm.device_curve25519Key(this.__wbg_ptr);\n        return ret === 0 ? undefined : Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n    * Get the Ed25519 key of the given device.\n    * @returns {Ed25519PublicKey | undefined}\n    */\n    get ed25519Key() {\n        const ret = wasm.device_ed25519Key(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n    * Get a map containing all the device keys.\n    * @returns {Map<any, any>}\n    */\n    get keys() {\n        const ret = wasm.device_keys(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get the list of algorithms this device supports.\n    *\n    * Returns `Array<EncryptionAlgorithm>`.\n    * @returns {Array<any>}\n    */\n    get algorithms() {\n        const ret = wasm.device_algorithms(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get a map containing all the device signatures.\n    * @returns {Signatures}\n    */\n    get signatures() {\n        const ret = wasm.device_signatures(this.__wbg_ptr);\n        return Signatures.__wrap(ret);\n    }\n    /**\n    * Get the trust state of the device.\n    * @returns {LocalTrust}\n    */\n    get localTrustState() {\n        const ret = wasm.device_localTrustState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Is the device locally marked as trusted?\n    * @returns {boolean}\n    */\n    isLocallyTrusted() {\n        const ret = wasm.device_isLocallyTrusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Is the device locally marked as blacklisted?\n    *\n    * Blacklisted devices won’t receive any group sessions.\n    * @returns {boolean}\n    */\n    isBlacklisted() {\n        const ret = wasm.device_isBlacklisted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Is the device deleted?\n    * @returns {boolean}\n    */\n    isDeleted() {\n        const ret = wasm.device_isDeleted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Timestamp representing the first time this device has been seen (in\n    * milliseconds).\n    * @returns {bigint}\n    */\n    firstTimeSeen() {\n        const ret = wasm.device_firstTimeSeen(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * Mark this device as verified.\n    * Works only if the device is owned by the current user.\n    *\n    * Returns a signature upload request that needs to be sent out.\n    * @returns {Promise<any>}\n    */\n    verify() {\n        const ret = wasm.device_verify(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Whether or not the device is a dehydrated device.\n    * @returns {boolean}\n    */\n    get isDehydrated() {\n        const ret = wasm.device_isDehydrated(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst DeviceIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_deviceid_free(ptr >>> 0, 1));\n/**\n* A Matrix key ID.\n*\n* Device identifiers in Matrix are completely opaque character\n* sequences. This type is provided simply for its semantic value.\n*/\nexport class DeviceId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceId.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_deviceid_free(ptr, 0);\n    }\n    /**\n    * Create a new `DeviceId`.\n    * @param {string} id\n    */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.deviceid_new(ptr0, len0);\n        this.__wbg_ptr = ret >>> 0;\n        DeviceIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Return the device ID as a string.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.deviceid_toString(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekey_free(ptr >>> 0, 1));\n/**\n* An enum over the different key types a device can have.\n*\n* Currently devices have a curve25519 and ed25519 keypair. The keys\n* transport format is a base64 encoded string, any unknown key type\n* will be left as such a string.\n*/\nexport class DeviceKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKey.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekey_free(ptr, 0);\n    }\n    /**\n    * Get the name of the device key.\n    * @returns {DeviceKeyName}\n    */\n    get name() {\n        const ret = wasm.devicekey_name(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Get the value associated to the `Curve25519` device key name.\n    * @returns {Curve25519PublicKey | undefined}\n    */\n    get curve25519() {\n        const ret = wasm.devicekey_curve25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n    * Get the value associated to the `Ed25519` device key name.\n    * @returns {Ed25519PublicKey | undefined}\n    */\n    get ed25519() {\n        const ret = wasm.devicekey_ed25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n    * Get the value associated to the `Unknown` device key name.\n    * @returns {string | undefined}\n    */\n    get unknown() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.devicekey_unknown(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Convert the `DeviceKey` into a base64 encoded string.\n    * @returns {string}\n    */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.devicekey_toBase64(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyAlgorithmFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekeyalgorithm_free(ptr >>> 0, 1));\n/**\n* The basic key algorithms in the specification.\n*/\nexport class DeviceKeyAlgorithm {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKeyAlgorithm.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyAlgorithmFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyAlgorithmFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekeyalgorithm_free(ptr, 0);\n    }\n    /**\n    * Read the device key algorithm's name. If the name is\n    * `Unknown`, one may be interested by the `to_string` method to\n    * read the original name.\n    * @returns {DeviceKeyAlgorithmName}\n    */\n    get name() {\n        const ret = wasm.devicekeyalgorithm_name(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Return the device key algorithm as a string.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.devicekeyalgorithm_toString(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekeyid_free(ptr >>> 0, 1));\n/**\n* A Matrix device key ID.\n*\n* A key algorithm and a device ID, combined with a ‘:’.\n*/\nexport class DeviceKeyId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKeyId.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekeyid_free(ptr, 0);\n    }\n    /**\n    * Parse/validate and create a new `DeviceKeyId`.\n    * @param {string} id\n    */\n    constructor(id) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.devicekeyid_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            DeviceKeyIdFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns key algorithm of the device key ID.\n    * @returns {DeviceKeyAlgorithm}\n    */\n    get algorithm() {\n        const ret = wasm.devicekeyid_algorithm(this.__wbg_ptr);\n        return DeviceKeyAlgorithm.__wrap(ret);\n    }\n    /**\n    * Returns device ID of the device key ID.\n    * @returns {DeviceId}\n    */\n    get deviceId() {\n        const ret = wasm.devicekeyid_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n    * Return the device key ID as a string.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.devicekeyid_toString(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceListsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicelists_free(ptr >>> 0, 1));\n/**\n* Information on E2E device updates.\n*/\nexport class DeviceLists {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceListsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicelists_free(ptr, 0);\n    }\n    /**\n    * Create an empty `DeviceLists`.\n    *\n    * `changed` and `left` must be an array of `UserId`.\n    *\n    * Items inside `changed` and `left` will be invalidated by this method. Be\n    * careful not to use the `UserId`s after this method has been called.\n    * @param {(UserId)[] | undefined} [changed]\n    * @param {(UserId)[] | undefined} [left]\n    */\n    constructor(changed, left) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(changed) ? 0 : passArrayJsValueToWasm0(changed, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(left) ? 0 : passArrayJsValueToWasm0(left, wasm.__wbindgen_malloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.devicelists_new(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            DeviceListsFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns true if there are no device list updates.\n    * @returns {boolean}\n    */\n    isEmpty() {\n        const ret = wasm.devicelists_isEmpty(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * List of users who have updated their device identity keys or\n    * who now share an encrypted room with the client since the\n    * previous sync\n    * @returns {(UserId)[]}\n    */\n    get changed() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.devicelists_changed(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * List of users who no longer share encrypted rooms since the\n    * previous sync response.\n    * @returns {(UserId)[]}\n    */\n    get left() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.devicelists_left(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst EciesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ecies_free(ptr >>> 0, 1));\n/**\n* An unestablished ECIES session.\n*/\nexport class Ecies {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EciesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ecies_free(ptr, 0);\n    }\n    /**\n    * Create a new, random, unestablished ECIES session.\n    *\n    * This method will use the\n    * [`MATRIX_QR_CODE_LOGIN`](https://github.com/matrix-org/matrix-spec-proposals/pull/4108)\n    * info for domain separation when creating the session.\n    */\n    constructor() {\n        const ret = wasm.ecies_new();\n        this.__wbg_ptr = ret >>> 0;\n        EciesFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Get our [`Curve25519PublicKey`].\n    *\n    * This public key needs to be sent to the other side to be able to\n    * establish an ECIES channel.\n    * @returns {Curve25519PublicKey}\n    */\n    public_key() {\n        const ret = wasm.ecies_public_key(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n    * Create a [`EstablishedEcies`] from an initial message encrypted by the\n    * other side.\n    * @param {string} initial_message\n    * @returns {InboundCreationResult}\n    */\n    establish_inbound_channel(initial_message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(initial_message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ecies_establish_inbound_channel(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return InboundCreationResult.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create an [`EstablishedEcies`] session using the other side's Curve25519\n    * public key and an initial plaintext.\n    *\n    * After the channel has been established, we can encrypt messages to send\n    * to the other side. The other side uses the initial message to\n    * establishes the same channel on its side.\n    * @param {Curve25519PublicKey} public_key\n    * @param {string} initial_message\n    * @returns {OutboundCreationResult}\n    */\n    establish_outbound_channel(public_key, initial_message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(public_key, Curve25519PublicKey);\n            const ptr0 = passStringToWasm0(initial_message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ecies_establish_outbound_channel(retptr, this.__wbg_ptr, public_key.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return OutboundCreationResult.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst Ed25519PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ed25519publickey_free(ptr >>> 0, 1));\n/**\n* An Ed25519 public key, used to verify digital signatures.\n*/\nexport class Ed25519PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Ed25519PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Ed25519PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Ed25519PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519publickey_free(ptr, 0);\n    }\n    /**\n    * The number of bytes an Ed25519 public key has.\n    * @returns {number}\n    */\n    get length() {\n        const ret = wasm.ed25519publickey_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Serialize an Ed25519 public key to an unpadded base64\n    * representation.\n    * @returns {string}\n    */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519publickey_toBase64(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst Ed25519SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ed25519signature_free(ptr >>> 0, 1));\n/**\n* An Ed25519 digital signature, can be used to verify the\n* authenticity of a message.\n*/\nexport class Ed25519Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Ed25519Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        Ed25519SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Ed25519SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519signature_free(ptr, 0);\n    }\n    /**\n    * Try to create an Ed25519 signature from an unpadded base64\n    * representation.\n    * @param {string} signature\n    */\n    constructor(signature) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519signature_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            Ed25519SignatureFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Serialize a Ed25519 signature to an unpadded base64\n    * representation.\n    * @returns {string}\n    */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519signature_toBase64(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst EmojiFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_emoji_free(ptr >>> 0, 1));\n/**\n* An emoji that is used for interactive verification using a short\n* auth string.\n*\n* This will contain a single emoji and description from the list of\n* emojis from [the specification].\n*\n* [the specification]: https://spec.matrix.org/unstable/client-server-api/#sas-method-emoji\n*/\nexport class Emoji {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Emoji.prototype);\n        obj.__wbg_ptr = ptr;\n        EmojiFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EmojiFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_emoji_free(ptr, 0);\n    }\n    /**\n    * The emoji symbol that represents a part of the short auth\n    * string, for example: 🐶\n    * @returns {string}\n    */\n    get symbol() {\n        const ret = wasm.emoji_symbol(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * The description of the emoji, for example ‘Dog’.\n    * @returns {string}\n    */\n    get description() {\n        const ret = wasm.emoji_description(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst EncryptedAttachmentFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptedattachment_free(ptr >>> 0, 1));\n/**\n* An encrypted attachment, usually created from `Attachment.encrypt`.\n*/\nexport class EncryptedAttachment {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EncryptedAttachment.prototype);\n        obj.__wbg_ptr = ptr;\n        EncryptedAttachmentFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptedAttachmentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptedattachment_free(ptr, 0);\n    }\n    /**\n    * Create a new encrypted attachment manually.\n    *\n    * It needs encrypted data, stored in an `Uint8Array`, and a\n    * [media encryption\n    * information](https://docs.rs/matrix-sdk-crypto/latest/matrix_sdk_crypto/struct.MediaEncryptionInfo.html),\n    * as a JSON-encoded string.\n    *\n    * The media encryption information aren't stored as a string:\n    * they are parsed, validated and fully deserialized.\n    *\n    * See [the specification to learn\n    * more](https://spec.matrix.org/unstable/client-server-api/#extensions-to-mroommessage-msgtypes).\n    * @param {Uint8Array} encrypted_data\n    * @param {string} media_encryption_info\n    */\n    constructor(encrypted_data, media_encryption_info) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(encrypted_data, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(media_encryption_info, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.encryptedattachment_new(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            EncryptedAttachmentFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The actual encrypted data.\n    *\n    * **Warning**: It returns a **copy** of the entire encrypted\n    * data; be nice with your memory.\n    * @returns {Uint8Array}\n    */\n    get encryptedData() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.encryptedattachment_encryptedData(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the media encryption info as a JSON-encoded string. The\n    * structure is fully valid.\n    *\n    * If the media encryption info have been consumed already, it\n    * will return `null`.\n    * @returns {string | undefined}\n    */\n    get mediaEncryptionInfo() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.encryptedattachment_mediaEncryptionInfo(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Check whether the media encryption info has been consumed by\n    * `Attachment.decrypt` already.\n    * @returns {boolean}\n    */\n    get hasMediaEncryptionInfoBeenConsumed() {\n        const ret = wasm.encryptedattachment_hasMediaEncryptionInfoBeenConsumed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst EncryptionInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptioninfo_free(ptr >>> 0, 1));\n/**\n* Struct containing information on how an event was decrypted.\n*/\nexport class EncryptionInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EncryptionInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        EncryptionInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptionInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptioninfo_free(ptr, 0);\n    }\n    /**\n    * The user ID of the event sender. Note this is untrusted data\n    * unless `verification_state` is also trusted.\n    * @returns {UserId}\n    */\n    get sender() {\n        const ret = wasm.encryptioninfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n    * The device ID of the device that sent us the event. Note this\n    * is untrusted data unless `verification_state` is also\n    * trusted.\n    * @returns {DeviceId | undefined}\n    */\n    get senderDevice() {\n        const ret = wasm.encryptioninfo_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n    * The Curve25519 key of the device that created the megolm\n    * decryption key originally.\n    * @returns {string | undefined}\n    */\n    get senderCurve25519Key() {\n        const ret = wasm.encryptioninfo_senderCurve25519Key(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * The signing Ed25519 key that created the megolm key that\n    * was used to decrypt this session.\n    * @returns {string | undefined}\n    */\n    get senderClaimedEd25519Key() {\n        const ret = wasm.encryptioninfo_senderClaimedEd25519Key(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * The verification state of the device that sent us the event.\n    * Note this is the state of the device at the time of\n    * decryption. It may change in the future if a device gets\n    * verified or deleted.\n    *\n    * # Arguments\n    *\n    * * `strict` - whether to enable \"strict mode\" verification. In non-strict\n    *   mode, unverified users are given no shield, and keys that have been\n    *   forwarded or restored from an insecure backup are given a grey shield\n    *   (both get a red shield in strict mode).\n    * @param {boolean} strict\n    * @returns {ShieldState}\n    */\n    shieldState(strict) {\n        const ret = wasm.encryptioninfo_shieldState(this.__wbg_ptr, strict);\n        return ShieldState.__wrap(ret);\n    }\n}\n\nconst EncryptionSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptionsettings_free(ptr >>> 0, 1));\n/**\n* Settings for an encrypted room.\n*\n* This determines the algorithm and rotation periods of a group\n* session.\n*/\nexport class EncryptionSettings {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptionSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptionsettings_free(ptr, 0);\n    }\n    /**\n    * The encryption algorithm that should be used in the room.\n    * @returns {EncryptionAlgorithm}\n    */\n    get algorithm() {\n        const ret = wasm.__wbg_get_encryptionsettings_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * The encryption algorithm that should be used in the room.\n    * @param {EncryptionAlgorithm} arg0\n    */\n    set algorithm(arg0) {\n        wasm.__wbg_set_encryptionsettings_algorithm(this.__wbg_ptr, arg0);\n    }\n    /**\n    * How long the session should be used before changing it,\n    * expressed in microseconds.\n    * @returns {bigint}\n    */\n    get rotationPeriod() {\n        const ret = wasm.__wbg_get_encryptionsettings_rotationPeriod(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * How long the session should be used before changing it,\n    * expressed in microseconds.\n    * @param {bigint} arg0\n    */\n    set rotationPeriod(arg0) {\n        wasm.__wbg_set_encryptionsettings_rotationPeriod(this.__wbg_ptr, arg0);\n    }\n    /**\n    * How many messages should be sent before changing the session.\n    * @returns {bigint}\n    */\n    get rotationPeriodMessages() {\n        const ret = wasm.__wbg_get_encryptionsettings_rotationPeriodMessages(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * How many messages should be sent before changing the session.\n    * @param {bigint} arg0\n    */\n    set rotationPeriodMessages(arg0) {\n        wasm.__wbg_set_encryptionsettings_rotationPeriodMessages(this.__wbg_ptr, arg0);\n    }\n    /**\n    * The history visibility of the room when the session was\n    * created.\n    * @returns {HistoryVisibility}\n    */\n    get historyVisibility() {\n        const ret = wasm.__wbg_get_encryptionsettings_historyVisibility(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * The history visibility of the room when the session was\n    * created.\n    * @param {HistoryVisibility} arg0\n    */\n    set historyVisibility(arg0) {\n        wasm.__wbg_set_encryptionsettings_historyVisibility(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Should untrusted devices receive the room key, or should they be\n    * excluded from the conversation.\n    * @returns {CollectStrategy}\n    */\n    get sharingStrategy() {\n        const ret = wasm.__wbg_get_encryptionsettings_sharingStrategy(this.__wbg_ptr);\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n    * Should untrusted devices receive the room key, or should they be\n    * excluded from the conversation.\n    * @param {CollectStrategy} arg0\n    */\n    set sharingStrategy(arg0) {\n        _assertClass(arg0, CollectStrategy);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_encryptionsettings_sharingStrategy(this.__wbg_ptr, ptr0);\n    }\n    /**\n    * Create a new `EncryptionSettings` with default values.\n    */\n    constructor() {\n        const ret = wasm.encryptionsettings_new();\n        this.__wbg_ptr = ret >>> 0;\n        EncryptionSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst EstablishedEciesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_establishedecies_free(ptr >>> 0, 1));\n/**\n* An established ECIES session.\n*\n* This session can be used to encrypt and decrypt messages between the two\n* sides of the channel.\n*/\nexport class EstablishedEcies {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EstablishedEcies.prototype);\n        obj.__wbg_ptr = ptr;\n        EstablishedEciesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EstablishedEciesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_establishedecies_free(ptr, 0);\n    }\n    /**\n    * Get our [`Curve25519PublicKey`].\n    *\n    * This public key needs to be sent to the other side so that it can\n    * complete the ECIES channel establishment.\n    * @returns {Curve25519PublicKey}\n    */\n    public_key() {\n        const ret = wasm.establishedecies_public_key(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n    * Encrypt the given plaintext using this [`EstablishedEcies`] session.\n    * @param {string} message\n    * @returns {string}\n    */\n    encrypt(message) {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.establishedecies_encrypt(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred2_0 = r0;\n            deferred2_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n    * Decrypt the given message using this [`EstablishedEcies`] session.\n    * @param {string} message\n    * @returns {string}\n    */\n    decrypt(message) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.establishedecies_decrypt(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n    * Get the [`CheckCode`] which uniquely identifies this\n    * [`EstablishedEcies`] session.\n    *\n    * This check code can be used to verify and confirm that both sides of the\n    * session are indeed using the same shared secret.\n    * @returns {CheckCode}\n    */\n    check_code() {\n        const ret = wasm.establishedecies_check_code(this.__wbg_ptr);\n        return CheckCode.__wrap(ret);\n    }\n}\n\nconst EventIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_eventid_free(ptr >>> 0, 1));\n/**\n* A Matrix [event ID].\n*\n* An `EventId` is generated randomly or converted from a string\n* slice, and can be converted back into a string as needed.\n*\n* [event ID]: https://spec.matrix.org/v1.2/appendices/#room-ids-and-event-ids\n*/\nexport class EventId {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EventIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_eventid_free(ptr, 0);\n    }\n    /**\n    * Parse/validate and create a new `EventId`.\n    * @param {string} id\n    */\n    constructor(id) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.eventid_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            EventIdFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the event's localpart.\n    * @returns {string}\n    */\n    get localpart() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.eventid_localpart(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the server name of the event ID.\n    * @returns {ServerName | undefined}\n    */\n    get serverName() {\n        const ret = wasm.eventid_serverName(this.__wbg_ptr);\n        return ret === 0 ? undefined : ServerName.__wrap(ret);\n    }\n    /**\n    * Return the event ID as a string.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.eventid_toString(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst IdentityKeysFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_identitykeys_free(ptr >>> 0, 1));\n/**\n* Struct holding the two public identity keys of an account.\n*/\nexport class IdentityKeys {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(IdentityKeys.prototype);\n        obj.__wbg_ptr = ptr;\n        IdentityKeysFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        IdentityKeysFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_identitykeys_free(ptr, 0);\n    }\n    /**\n    * The Ed25519 public key, used for signing.\n    * @returns {Ed25519PublicKey}\n    */\n    get ed25519() {\n        const ret = wasm.__wbg_get_identitykeys_ed25519(this.__wbg_ptr);\n        return Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n    * The Ed25519 public key, used for signing.\n    * @param {Ed25519PublicKey} arg0\n    */\n    set ed25519(arg0) {\n        _assertClass(arg0, Ed25519PublicKey);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_identitykeys_ed25519(this.__wbg_ptr, ptr0);\n    }\n    /**\n    * The Curve25519 public key, used for establish shared secrets.\n    * @returns {Curve25519PublicKey}\n    */\n    get curve25519() {\n        const ret = wasm.__wbg_get_identitykeys_curve25519(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n    * The Curve25519 public key, used for establish shared secrets.\n    * @param {Curve25519PublicKey} arg0\n    */\n    set curve25519(arg0) {\n        _assertClass(arg0, Curve25519PublicKey);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_identitykeys_curve25519(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst InboundCreationResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_inboundcreationresult_free(ptr >>> 0, 1));\n/**\n* The result of an inbound ECIES channel establishment.\n*/\nexport class InboundCreationResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InboundCreationResult.prototype);\n        obj.__wbg_ptr = ptr;\n        InboundCreationResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InboundCreationResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_inboundcreationresult_free(ptr, 0);\n    }\n    /**\n    * The established ECIES channel.\n    * @returns {EstablishedEcies}\n    */\n    get channel() {\n        const ret = wasm.__wbg_get_inboundcreationresult_channel(this.__wbg_ptr);\n        return EstablishedEcies.__wrap(ret);\n    }\n    /**\n    * The established ECIES channel.\n    * @param {EstablishedEcies} arg0\n    */\n    set channel(arg0) {\n        _assertClass(arg0, EstablishedEcies);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_inboundcreationresult_channel(this.__wbg_ptr, ptr0);\n    }\n    /**\n    * The plaintext of the initial message.\n    * @returns {string}\n    */\n    get message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_backupsecretsbundle_key(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The plaintext of the initial message.\n    * @param {string} arg0\n    */\n    set message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst InboundGroupSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_inboundgroupsession_free(ptr >>> 0, 1));\n/**\n* Inbound group session.\n*\n* Inbound group sessions are used to exchange room messages between a group of\n* participants. Inbound group sessions are used to decrypt the room messages.\n*/\nexport class InboundGroupSession {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InboundGroupSession.prototype);\n        obj.__wbg_ptr = ptr;\n        InboundGroupSessionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InboundGroupSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_inboundgroupsession_free(ptr, 0);\n    }\n    /**\n    * The room where this session is used in.\n    * @returns {RoomId}\n    */\n    get roomId() {\n        const ret = wasm.inboundgroupsession_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n    * The Curve25519 key of the sender of this session, as a\n    * [Curve25519PublicKey].\n    * @returns {Curve25519PublicKey}\n    */\n    get senderKey() {\n        const ret = wasm.inboundgroupsession_senderKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n    * Returns the unique identifier for this session.\n    * @returns {string}\n    */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.inboundgroupsession_sessionId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Has the session been imported from a file or server-side backup? As\n    * opposed to being directly received as an `m.room_key` event.\n    * @returns {boolean}\n    */\n    hasBeenImported() {\n        const ret = wasm.inboundgroupsession_hasBeenImported(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst KeysBackupRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysbackuprequest_free(ptr >>> 0, 1));\n/**\n* A request that will back up a batch of room keys to the server\n* ([specification]).\n*\n* [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3room_keyskeys\n*/\nexport class KeysBackupRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysBackupRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysBackupRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysBackupRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysbackuprequest_free(ptr, 0);\n    }\n    /**\n    * The request ID.\n    * @returns {string}\n    */\n    get id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_id(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A JSON-encoded string containing the rest of the payload: `rooms`.\n    *\n    * It represents the body of the HTTP request.\n    * @returns {string}\n    */\n    get body() {\n        const ret = wasm.__wbg_get_keysbackuprequest_body(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * The backup version that these room keys should be part of.\n    * @returns {string}\n    */\n    get version() {\n        const ret = wasm.__wbg_get_keysbackuprequest_version(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Create a new `KeysBackupRequest`.\n    * @param {string} id\n    * @param {string} body\n    * @param {string} version\n    */\n    constructor(id, body, version) {\n        const ret = wasm.keysbackuprequest_new(addHeapObject(id), addHeapObject(body), addHeapObject(version));\n        this.__wbg_ptr = ret >>> 0;\n        KeysBackupRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Get its request type.\n    * @returns {RequestType}\n    */\n    get type() {\n        const ret = wasm.keysbackuprequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysClaimRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysclaimrequest_free(ptr >>> 0, 1));\n/**\n* Data for a request to the `/keys/claim` API endpoint\n* ([specification]).\n*\n* Claims one-time keys that can be used to establish 1-to-1 E2EE\n* sessions.\n*\n* [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysclaim\n*/\nexport class KeysClaimRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysClaimRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysClaimRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysClaimRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysclaimrequest_free(ptr, 0);\n    }\n    /**\n    * The request ID.\n    * @returns {string}\n    */\n    get id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_id(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A JSON-encoded string containing the rest of the payload: `timeout`,\n    * `one_time_keys`.\n    *\n    * It represents the body of the HTTP request.\n    * @returns {string}\n    */\n    get body() {\n        const ret = wasm.__wbg_get_keysbackuprequest_body(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Create a new `KeysClaimRequest`.\n    * @param {string} id\n    * @param {string} body\n    */\n    constructor(id, body) {\n        const ret = wasm.keysclaimrequest_new(addHeapObject(id), addHeapObject(body));\n        this.__wbg_ptr = ret >>> 0;\n        KeysClaimRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Get its request type.\n    * @returns {RequestType}\n    */\n    get type() {\n        const ret = wasm.keysclaimrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysQueryRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysqueryrequest_free(ptr >>> 0, 1));\n/**\n* Data for a request to the `/keys/query` API endpoint\n* ([specification]).\n*\n* Returns the current devices and identity keys for the given users.\n*\n* [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysquery\n*/\nexport class KeysQueryRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysQueryRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysQueryRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysQueryRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysqueryrequest_free(ptr, 0);\n    }\n    /**\n    * The request ID.\n    * @returns {string}\n    */\n    get id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_id(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A JSON-encoded string containing the rest of the payload: `timeout`,\n    * `device_keys`, `token`.\n    *\n    * It represents the body of the HTTP request.\n    * @returns {string}\n    */\n    get body() {\n        const ret = wasm.__wbg_get_keysbackuprequest_body(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Create a new `KeysQueryRequest`.\n    * @param {string} id\n    * @param {string} body\n    */\n    constructor(id, body) {\n        const ret = wasm.keysclaimrequest_new(addHeapObject(id), addHeapObject(body));\n        this.__wbg_ptr = ret >>> 0;\n        KeysQueryRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Get its request type.\n    * @returns {RequestType}\n    */\n    get type() {\n        const ret = wasm.keysqueryrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysUploadRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysuploadrequest_free(ptr >>> 0, 1));\n/**\n* Outgoing Requests *\n* Data for a request to the `/keys/upload` API endpoint\n* ([specification]).\n*\n* Publishes end-to-end encryption keys for the device.\n*\n* [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysupload\n*/\nexport class KeysUploadRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysUploadRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysUploadRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysUploadRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysuploadrequest_free(ptr, 0);\n    }\n    /**\n    * The request ID.\n    * @returns {string}\n    */\n    get id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_id(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A JSON-encoded string containing the rest of the payload: `device_keys`,\n    * `one_time_keys`, `fallback_keys`.\n    *\n    * It represents the body of the HTTP request.\n    * @returns {string}\n    */\n    get body() {\n        const ret = wasm.__wbg_get_keysbackuprequest_body(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Create a new `KeysUploadRequest`.\n    * @param {string} id\n    * @param {string} body\n    */\n    constructor(id, body) {\n        const ret = wasm.keysclaimrequest_new(addHeapObject(id), addHeapObject(body));\n        this.__wbg_ptr = ret >>> 0;\n        KeysUploadRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Get its request type.\n    * @returns {RequestType}\n    */\n    get type() {\n        const ret = wasm.keysuploadrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MaybeSignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_maybesignature_free(ptr >>> 0, 1));\n/**\n* Represents a signature that is either valid _or_ that could not be\n* decoded.\n*/\nexport class MaybeSignature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MaybeSignature.prototype);\n        obj.__wbg_ptr = ptr;\n        MaybeSignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MaybeSignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_maybesignature_free(ptr, 0);\n    }\n    /**\n    * Check whether the signature has been successfully decoded.\n    * @returns {boolean}\n    */\n    isValid() {\n        const ret = wasm.maybesignature_isValid(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Check whether the signature could not be successfully decoded.\n    * @returns {boolean}\n    */\n    isInvalid() {\n        const ret = wasm.maybesignature_isInvalid(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * The signature, if successfully decoded.\n    * @returns {Signature | undefined}\n    */\n    get signature() {\n        const ret = wasm.maybesignature_signature(this.__wbg_ptr);\n        return ret === 0 ? undefined : Signature.__wrap(ret);\n    }\n    /**\n    * The base64 encoded string that is claimed to contain a\n    * signature but could not be decoded, if any.\n    * @returns {string | undefined}\n    */\n    get invalidSignatureSource() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.maybesignature_invalidSignatureSource(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst MegolmDecryptionErrorFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_megolmdecryptionerror_free(ptr >>> 0, 1));\n/**\n* Js Decryption error with code.\n*/\nexport class MegolmDecryptionError {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MegolmDecryptionError.prototype);\n        obj.__wbg_ptr = ptr;\n        MegolmDecryptionErrorFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MegolmDecryptionErrorFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_megolmdecryptionerror_free(ptr, 0);\n    }\n    /**\n    * Description code for the error. See `DecryptionErrorCode`\n    * @returns {DecryptionErrorCode}\n    */\n    get code() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_code(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * detailed description\n    * @returns {string}\n    */\n    get description() {\n        const ret = wasm.__wbg_get_keysbackuprequest_version(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Withheld code if any. Only for `UnknownMessageIndex` error code\n    * @returns {string | undefined}\n    */\n    get maybe_withheld() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_maybe_withheld(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst MegolmV1BackupKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_megolmv1backupkey_free(ptr >>> 0, 1));\n/**\n* The public part of the backup key.\n*/\nexport class MegolmV1BackupKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MegolmV1BackupKey.prototype);\n        obj.__wbg_ptr = ptr;\n        MegolmV1BackupKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MegolmV1BackupKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_megolmv1backupkey_free(ptr, 0);\n    }\n    /**\n    * The actual base64 encoded public key.\n    * @returns {string}\n    */\n    get publicKeyBase64() {\n        const ret = wasm.megolmv1backupkey_publicKeyBase64(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get the full name of the backup algorithm this backup key supports.\n    * @returns {string}\n    */\n    get algorithm() {\n        const ret = wasm.megolmv1backupkey_algorithm(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst MigrationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_migration_free(ptr >>> 0, 1));\n/**\n* Migration routines\n*\n* The public methods are exposed as static methods on this class, for\n* namespacing and to enable easier mocking in unit tests.\n*/\nexport class Migration {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MigrationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_migration_free(ptr, 0);\n    }\n    /**\n    * Import the base dataset from a libolm-based setup to a vodozemac-based\n    * setup stored in IndexedDB.\n    *\n    * Populates the user credentials, Olm account, backup data, etc. This is\n    * the first step in the migration process. Once this base data is\n    * imported, further data can be imported with {@link\n    * #migrateOlmSessions}, {@link #migrateMegolmSessions}, and TODO room settings.\n    *\n    * # Arguments\n    *\n    * * `data` - The data to be migrated\n    * * `pickle_key` - The libolm pickle key that was used to pickle the olm\n    *   account objects.\n    * * `store_handle` - A connection to the CryptoStore which will be used to\n    *   store the vodozemac data.\n    * @param {BaseMigrationData} data\n    * @param {Uint8Array} pickle_key\n    * @param {StoreHandle} store_handle\n    * @returns {Promise<any>}\n    */\n    static migrateBaseData(data, pickle_key, store_handle) {\n        _assertClass(data, BaseMigrationData);\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateBaseData(data.__wbg_ptr, addHeapObject(pickle_key), store_handle.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Migrate Olm sessions of a libolm-based setup to a vodozemac-based setup\n    * stored in an indexedDB crypto store.\n    *\n    * Before this method can be used, {@link #migrateBaseData} must be used to\n    * import the base data into the crypto store.\n    *\n    * This method should be called a number of times, with separate batches of\n    * `sessions`. If a progress display is given, it can be updated after\n    * each batch is successfully imported.\n    *\n    * # Arguments\n    *\n    * * `sessions` - An `Array` of {@link PickledSession}s to import. Items\n    *   inside `sessions` will be invalidated by this method.\n    * * `pickle_key` - The libolm pickle key that was used to pickle the olm\n    *   session objects.\n    * * `store_handle` - A connection to the CryptoStore which will be used to\n    *   store the vodozemac data.\n    * @param {(PickledSession)[]} sessions\n    * @param {Uint8Array} pickle_key\n    * @param {StoreHandle} store_handle\n    * @returns {Promise<any>}\n    */\n    static migrateOlmSessions(sessions, pickle_key, store_handle) {\n        const ptr0 = passArrayJsValueToWasm0(sessions, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateOlmSessions(ptr0, len0, addHeapObject(pickle_key), store_handle.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Migrate Megolm sessions of a libolm-based setup to a vodozemac-based\n    * setup stored in an indexedDB crypto store.\n    *\n    * Before this method can be used, {@link #migrateBaseData} must be used to\n    * import the base data into the crypto store.\n    *\n    * This method should be called a number of times, with separate batches of\n    * `sessions`. If a progress display is given, it can be updated after\n    * each batch is successfully imported.\n    *\n    * # Arguments\n    *\n    * * `sessions` - An `Array` of {@link PickledInboundGroupSession}s to\n    *   import. Items inside `sessions` will be invalidated by this method.\n    * * `pickle_key` - The libolm pickle key that was used to pickle the\n    *   megolm session objects.\n    * * `store_handle` - A connection to the CryptoStore which will be used to\n    *   store the vodozemac data.\n    * @param {(PickledInboundGroupSession)[]} sessions\n    * @param {Uint8Array} pickle_key\n    * @param {StoreHandle} store_handle\n    * @returns {Promise<any>}\n    */\n    static migrateMegolmSessions(sessions, pickle_key, store_handle) {\n        const ptr0 = passArrayJsValueToWasm0(sessions, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateMegolmSessions(ptr0, len0, addHeapObject(pickle_key), store_handle.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst OlmMachineFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_olmmachine_free(ptr >>> 0, 1));\n/**\n* State machine implementation of the Olm/Megolm encryption protocol\n* used for Matrix end to end encryption.\n*/\nexport class OlmMachine {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OlmMachine.prototype);\n        obj.__wbg_ptr = ptr;\n        OlmMachineFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OlmMachineFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_olmmachine_free(ptr, 0);\n    }\n    /**\n    * Constructor will always fail. To create a new `OlmMachine`, please use\n    * the `initialize` method.\n    *\n    * Why this pattern? `initialize` returns a `Promise`. Returning a\n    */\n    constructor() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.olmmachine_new(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            OlmMachineFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a new `OlmMachine`.\n    *\n    * The created machine will keep the encryption keys either in a IndexedDB\n    * based store, or in a memory store and once the objects is dropped,\n    * the keys will be lost.\n    *\n    * # Arguments\n    *\n    * * `user_id` - represents the unique ID of the user that owns this\n    * machine.\n    *\n    * * `device_id` - represents the unique ID of the device\n    * that owns this machine.\n    *\n    * * `store_name` - The name that should be used to open the IndexedDB\n    *   based database. If this isn't provided, a memory-only store will be\n    *   used. *Note* the memory-only store will lose your E2EE keys when the\n    *   `OlmMachine` gets dropped.\n    *\n    * * `store_passphrase` - The passphrase that should be used to encrypt the\n    *   IndexedDB-based store.\n    * @param {UserId} user_id\n    * @param {DeviceId} device_id\n    * @param {string | undefined} [store_name]\n    * @param {string | undefined} [store_passphrase]\n    * @returns {Promise<any>}\n    */\n    static initialize(user_id, device_id, store_name, store_passphrase) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        var ptr0 = isLikeNone(store_name) ? 0 : passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(store_passphrase) ? 0 : passStringToWasm0(store_passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_initialize(user_id.__wbg_ptr, device_id.__wbg_ptr, ptr0, len0, ptr1, len1);\n        return takeObject(ret);\n    }\n    /**\n    * Create a new `OlmMachine` backed by an existing store.\n    *\n    * # Arguments\n    *\n    * * `user_id` - represents the unique ID of the user that owns this\n    * machine.\n    *\n    * * `device_id` - represents the unique ID of the device\n    * that owns this machine.\n    *\n    * * `store_handle` - the connection to the crypto store to be used for\n    *   this machine.\n    * @param {UserId} user_id\n    * @param {DeviceId} device_id\n    * @param {StoreHandle} store_handle\n    * @returns {Promise<any>}\n    */\n    static initFromStore(user_id, device_id, store_handle) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.olmmachine_initFromStore(user_id.__wbg_ptr, device_id.__wbg_ptr, store_handle.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * The unique user ID that owns this `OlmMachine` instance.\n    * @returns {UserId}\n    */\n    get userId() {\n        const ret = wasm.olmmachine_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n    * The unique device ID that identifies this `OlmMachine`.\n    * @returns {DeviceId}\n    */\n    get deviceId() {\n        const ret = wasm.olmmachine_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n    * The time, in milliseconds since the unix epoch, at which the `Account`\n    * backing this `OlmMachine` was created.\n    *\n    * An `Account` is created when an `OlmMachine` is first instantiated\n    * against a given `Store`, at which point it creates identity keys etc.\n    * This method returns the timestamp, according to the local clock, at\n    * which that happened.\n    * @returns {number}\n    */\n    get deviceCreationTimeMs() {\n        const ret = wasm.olmmachine_deviceCreationTimeMs(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Get the public parts of our Olm identity keys.\n    * @returns {IdentityKeys}\n    */\n    get identityKeys() {\n        const ret = wasm.olmmachine_identityKeys(this.__wbg_ptr);\n        return IdentityKeys.__wrap(ret);\n    }\n    /**\n    * Get the display name of our own device.\n    * @returns {Promise<any>}\n    */\n    get displayName() {\n        const ret = wasm.olmmachine_displayName(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Whether automatic transmission of room key requests is enabled.\n    *\n    * Room key requests allow the device to request room keys that it might\n    * have missed in the original share using `m.room_key_request`\n    * events.\n    * @returns {boolean}\n    */\n    get roomKeyRequestsEnabled() {\n        const ret = wasm.olmmachine_roomKeyRequestsEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Enable or disable automatic transmission of room key requests.\n    * @param {boolean} enabled\n    */\n    set roomKeyRequestsEnabled(enabled) {\n        wasm.olmmachine_set_roomKeyRequestsEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n    * Whether room key forwarding is enabled.\n    *\n    * If room key forwarding is enabled, we will automatically reply to\n    * incoming `m.room_key_request` messages from verified devices by\n    * forwarding the requested key (if we have it).\n    * @returns {boolean}\n    */\n    get roomKeyForwardingEnabled() {\n        const ret = wasm.olmmachine_roomKeyForwardingEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Enable or disable room key forwarding.\n    * @param {boolean} enabled\n    */\n    set roomKeyForwardingEnabled(enabled) {\n        wasm.olmmachine_set_roomKeyForwardingEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n    * Get the list of users whose devices we are currently tracking.\n    *\n    * A user can be marked for tracking using the\n    * [`update_tracked_users`](#method.update_tracked_users) method.\n    *\n    * Returns a `Set<UserId>`.\n    * @returns {Promise<any>}\n    */\n    trackedUsers() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.olmmachine_trackedUsers(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Update the list of tracked users.\n    *\n    * The OlmMachine maintains a list of users whose devices we are keeping\n    * track of: these are known as \"tracked users\". These must be users\n    * that we share a room with, so that the server sends us updates for\n    * their device lists.\n    *\n    * # Arguments\n    *\n    * * `users` - An array of user ids that should be added to the list of\n    *   tracked users\n    *\n    * Any users that hadn't been seen before will be flagged for a key query\n    * immediately, and whenever `receive_sync_changes` receives a\n    * \"changed\" notification for that user in the future.\n    *\n    * Users that were already in the list are unaffected.\n    *\n    * Items inside `users` will be invalidated by this method. Be careful not\n    * to use the `UserId`s after this method has been called.\n    * @param {(UserId)[]} users\n    * @returns {Promise<any>}\n    */\n    updateTrackedUsers(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_updateTrackedUsers(this.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n    * Mark all tracked users as dirty.\n    *\n    * All users *whose device lists we are tracking* are flagged as needing a\n    * key query. Users whose devices we are not tracking are ignored.\n    * @returns {Promise<void>}\n    */\n    markAllTrackedUsersAsDirty() {\n        const ret = wasm.olmmachine_markAllTrackedUsersAsDirty(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Handle to-device events and one-time key counts from a sync\n    * response.\n    *\n    * This will decrypt and handle to-device events returning the\n    * decrypted versions of them.\n    *\n    * To decrypt an event from the room timeline call\n    * `decrypt_room_event`.\n    *\n    * # Arguments\n    *\n    * * `to_device_events`: the JSON-encoded to-device evens from the `/sync`\n    *   response\n    * * `changed_devices`: the mapping of changed and left devices, from the\n    *   `/sync` response\n    * * `one_time_keys_counts`: The number of one-time keys on the server,\n    *   from the `/sync` response. A `Map` from string (encryption algorithm)\n    *   to number (number of keys).\n    * * `unused_fallback_keys`: Optionally, a `Set` of unused fallback keys on\n    *   the server, from the `/sync` response. If this is set, it is used to\n    *   determine if new fallback keys should be uploaded.\n    *\n    * # Returns\n    *\n    * A list of JSON strings, containing the decrypted to-device events.\n    * @param {string} to_device_events\n    * @param {DeviceLists} changed_devices\n    * @param {Map<any, any>} one_time_keys_counts\n    * @param {Set<any> | undefined} [unused_fallback_keys]\n    * @returns {Promise<any>}\n    */\n    receiveSyncChanges(to_device_events, changed_devices, one_time_keys_counts, unused_fallback_keys) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(to_device_events, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(changed_devices, DeviceLists);\n            wasm.olmmachine_receiveSyncChanges(retptr, this.__wbg_ptr, ptr0, len0, changed_devices.__wbg_ptr, addBorrowedObject(one_time_keys_counts), isLikeNone(unused_fallback_keys) ? 0 : addHeapObject(unused_fallback_keys));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Get the outgoing requests that need to be sent out.\n    *\n    * This returns a list of values, each of which can be any of:\n    *   * {@link KeysUploadRequest},\n    *   * {@link KeysQueryRequest},\n    *   * {@link KeysClaimRequest},\n    *   * {@link ToDeviceRequest},\n    *   * {@link SignatureUploadRequest},\n    *   * {@link RoomMessageRequest}, or\n    *   * {@link KeysBackupRequest}.\n    *\n    * Those requests need to be sent out to the server and the\n    * responses need to be passed back to the state machine\n    * using {@link OlmMachine.markRequestAsSent}.\n    * @returns {Promise<any>}\n    */\n    outgoingRequests() {\n        const ret = wasm.olmmachine_outgoingRequests(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Mark the request with the given request ID as sent (see\n    * `outgoing_requests`).\n    *\n    * Arguments are:\n    *\n    * * `request_id` represents the unique ID of the request that was sent\n    *   out. This is needed to couple the response with the now sent out\n    *   request.\n    * * `response_type` represents the type of the request that was sent out.\n    * * `response` represents the response that was received from the server\n    *   after the outgoing request was sent out.\n    * @param {string} request_id\n    * @param {RequestType} request_type\n    * @param {string} response\n    * @returns {Promise<any>}\n    */\n    markRequestAsSent(request_id, request_type, response) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(request_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(response, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.olmmachine_markRequestAsSent(retptr, this.__wbg_ptr, ptr0, len0, request_type, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encrypt a room message for the given room.\n    *\n    * **Note**: A room key needs to be shared with the group of users that are\n    * members in the given room. If this is not done this method will panic.\n    *\n    * The usual flow to encrypt an event using this state machine is as\n    * follows:\n    *\n    * 1. Get the one-time key claim request to establish 1:1 Olm sessions for\n    *    the room members of the room we wish to participate in. This is done\n    *    using the [`get_missing_sessions()`](Self::get_missing_sessions)\n    *    method. This method call should be locked per call.\n    *\n    * 2. Share a room key with all the room members using the\n    *    [`share_room_key()`](Self::share_room_key). This method call should\n    *    be locked per room.\n    *\n    * 3. Encrypt the event using this method.\n    *\n    * 4. Send the encrypted event to the server.\n    *\n    * After the room key is shared steps 1 and 2 will become noops, unless\n    * there's some changes in the room membership or in the list of devices a\n    * member has.\n    *\n    *\n    * `room_id` is the ID of the room for which the message should\n    * be encrypted. `event_type` is the type of the event. `content`\n    * is the plaintext content of the message that should be\n    * encrypted.\n    *\n    * # Panics\n    *\n    * Panics if a group session for the given room wasn't shared\n    * beforehand.\n    * @param {RoomId} room_id\n    * @param {string} event_type\n    * @param {string} content\n    * @returns {Promise<any>}\n    */\n    encryptRoomEvent(room_id, event_type, content) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(room_id, RoomId);\n            const ptr0 = passStringToWasm0(event_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.olmmachine_encryptRoomEvent(retptr, this.__wbg_ptr, room_id.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Decrypt an event from a room timeline.\n    *\n    * # Arguments\n    *\n    * * `event`, the event that should be decrypted.\n    * * `room_id`, the ID of the room where the event was sent to.\n    *\n    * # Returns\n    *\n    * A `Promise` which resolves to a {@link DecryptedRoomEvent} instance, or\n    * rejects with a {@link MegolmDecryptionError} instance.\n    * @param {string} event\n    * @param {RoomId} room_id\n    * @param {DecryptionSettings} decryption_settings\n    * @returns {Promise<any>}\n    */\n    decryptRoomEvent(event, room_id, decryption_settings) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(room_id, RoomId);\n            _assertClass(decryption_settings, DecryptionSettings);\n            wasm.olmmachine_decryptRoomEvent(retptr, this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr, decryption_settings.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get encryption info for a decrypted timeline event.\n    *\n    * This recalculates the `EncryptionInfo` data that is returned by\n    * `decryptRoomEvent`, based on the current\n    * verification status of the sender, etc.\n    *\n    * Returns an error for an unencrypted event.\n    *\n    * # Arguments\n    *\n    * * `event` - The event to get information for.\n    * * `room_id` - The ID of the room where the event was sent to.\n    *\n    * # Returns\n    *\n    * {@link EncryptionInfo}\n    * @param {string} event\n    * @param {RoomId} room_id\n    * @returns {Promise<any>}\n    */\n    getRoomEventEncryptionInfo(event, room_id) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(room_id, RoomId);\n            wasm.olmmachine_getRoomEventEncryptionInfo(retptr, this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the status of the private cross signing keys.\n    *\n    * This can be used to check which private cross signing keys we\n    * have stored locally.\n    * @returns {Promise<any>}\n    */\n    crossSigningStatus() {\n        const ret = wasm.olmmachine_crossSigningStatus(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Export all the secrets we have in the store into a {@link\n    * SecretsBundle}.\n    *\n    * This method will export all the private cross-signing keys and, if\n    * available, the private part of a backup key and its accompanying\n    * version.\n    *\n    * The method will fail if we don't have all three private cross-signing\n    * keys available.\n    *\n    * **Warning**: Only export this and share it with a trusted recipient,\n    * i.e. if an existing device is sharing this with a new device.\n    * @returns {Promise<SecretsBundle>}\n    */\n    exportSecretsBundle() {\n        const ret = wasm.olmmachine_exportSecretsBundle(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Import and persists secrets from a {@link SecretsBundle}.\n    *\n    * This method will import all the private cross-signing keys and, if\n    * available, the private part of a backup key and its accompanying\n    * version into the store.\n    *\n    * **Warning**: Only import this from a trusted source, i.e. if an existing\n    * device is sharing this with a new device. The imported cross-signing\n    * keys will create a {@link OwnUserIdentity} and mark it as verified.\n    *\n    * The backup key will be persisted in the store and can be enabled using\n    * the {@link BackupMachine}.\n    *\n    * The provided `SecretsBundle` is freed by this method; be careful not to\n    * use it once this method has been called.\n    * @param {SecretsBundle} bundle\n    * @returns {Promise<void>}\n    */\n    importSecretsBundle(bundle) {\n        _assertClass(bundle, SecretsBundle);\n        var ptr0 = bundle.__destroy_into_raw();\n        const ret = wasm.olmmachine_importSecretsBundle(this.__wbg_ptr, ptr0);\n        return takeObject(ret);\n    }\n    /**\n    * Export all the private cross signing keys we have.\n    *\n    * The export will contain the seeds for the ed25519 keys as\n    * unpadded base64 encoded strings.\n    *\n    * Returns `null` if we don’t have any private cross signing keys;\n    * otherwise returns a `CrossSigningKeyExport`.\n    * @returns {Promise<any>}\n    */\n    exportCrossSigningKeys() {\n        const ret = wasm.olmmachine_exportCrossSigningKeys(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Import our private cross signing keys.\n    *\n    * The keys should be provided as unpadded-base64-encoded strings.\n    *\n    * Returns a `CrossSigningStatus`.\n    * @param {string | undefined} [master_key]\n    * @param {string | undefined} [self_signing_key]\n    * @param {string | undefined} [user_signing_key]\n    * @returns {Promise<any>}\n    */\n    importCrossSigningKeys(master_key, self_signing_key, user_signing_key) {\n        var ptr0 = isLikeNone(master_key) ? 0 : passStringToWasm0(master_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(self_signing_key) ? 0 : passStringToWasm0(self_signing_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(user_signing_key) ? 0 : passStringToWasm0(user_signing_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importCrossSigningKeys(this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n        return takeObject(ret);\n    }\n    /**\n    * Create a new cross signing identity and get the upload request\n    * to push the new public keys to the server.\n    *\n    * Warning: This will delete any existing cross signing keys that\n    * might exist on the server and thus will reset the trust\n    * between all the devices.\n    *\n    * Uploading these keys will require user interactive auth.\n    *\n    * # Arguments\n    *\n    * * `reset`, whether the method should create a new identity or use the\n    *   existing one during the request. If set to true, the request will\n    *   attempt to upload a new identity. If set to false, the request will\n    *   attempt to upload the existing identity. Since the uploading process\n    *   requires user interactive authentication, which involves sending out\n    *   the same request multiple times, setting this argument to false\n    *   enables you to reuse the same request.\n    *\n    * Returns a {@link CrossSigningBootstrapRequests}.\n    * @param {boolean} reset\n    * @returns {Promise<any>}\n    */\n    bootstrapCrossSigning(reset) {\n        const ret = wasm.olmmachine_bootstrapCrossSigning(this.__wbg_ptr, reset);\n        return takeObject(ret);\n    }\n    /**\n    * Get the cross signing user identity of a user.\n    *\n    * Returns a promise for an {@link identities.OwnUserIdentity}, a\n    * {@link identities.OtherUserIdentity}, or `undefined`.\n    * @param {UserId} user_id\n    * @returns {Promise<any>}\n    */\n    getIdentity(user_id) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getIdentity(this.__wbg_ptr, user_id.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Sign the given message using our device key and if available\n    * cross-signing master key.\n    * @param {string} message\n    * @returns {Promise<any>}\n    */\n    sign(message) {\n        const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_sign(this.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n    * Invalidate the currently active outbound group session for the\n    * given room.\n    *\n    * Returns true if a session was invalidated, false if there was\n    * no session to invalidate.\n    * @param {RoomId} room_id\n    * @returns {Promise<any>}\n    */\n    invalidateGroupSession(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_invalidateGroupSession(this.__wbg_ptr, room_id.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get to-device requests to share a room key with users in a room.\n    *\n    * `room_id` is the room ID. `users` is an array of `UserId`\n    * objects. `encryption_settings` are an `EncryptionSettings`\n    * object.\n    *\n    * Note: Care should be taken that only one such request at a\n    * time is in flight for the same room, e.g. using a lock.\n    *\n    * Returns an array of `ToDeviceRequest`s.\n    *\n    * Items inside `users` will be invalidated by this method. Be careful not\n    * to use the `UserId`s after this method has been called.\n    * @param {RoomId} room_id\n    * @param {(UserId)[]} users\n    * @param {EncryptionSettings} encryption_settings\n    * @returns {Promise<any>}\n    */\n    shareRoomKey(room_id, users, encryption_settings) {\n        _assertClass(room_id, RoomId);\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(encryption_settings, EncryptionSettings);\n        const ret = wasm.olmmachine_shareRoomKey(this.__wbg_ptr, room_id.__wbg_ptr, ptr0, len0, encryption_settings.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Generate an \"out-of-band\" key query request for the given set of users.\n    *\n    * This can be useful if we need the results from `getIdentity` or\n    * `getUserDevices` to be as up-to-date as possible.\n    *\n    * Returns a `KeysQueryRequest` object. The response of the request should\n    * be passed to the `OlmMachine` with the `mark_request_as_sent`.\n    *\n    * Items inside `users` will be invalidated by this method. Be careful not\n    * to use the `UserId`s after this method has been called.\n    * @param {(UserId)[]} users\n    * @returns {KeysQueryRequest}\n    */\n    queryKeysForUsers(users) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.olmmachine_queryKeysForUsers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeysQueryRequest.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the a key claiming request for the user/device pairs that\n    * we are missing Olm sessions for.\n    *\n    * Returns `null` if no key claiming request needs to be sent\n    * out, otherwise it returns a `KeysClaimRequest` object.\n    *\n    * Sessions need to be established between devices so group\n    * sessions for a room can be shared with them.\n    *\n    * This should be called every time a group session needs to be\n    * shared as well as between sync calls. After a sync some\n    * devices may request room keys without us having a valid Olm\n    * session with them, making it impossible to server the room key\n    * request, thus it’s necessary to check for missing sessions\n    * between sync as well.\n    *\n    * Note: Care should be taken that only one such request at a\n    * time is in flight, e.g. using a lock.\n    *\n    * The response of a successful key claiming requests needs to be\n    * passed to the `OlmMachine` with the `mark_request_as_sent`.\n    *\n    * `users` represents the list of users that we should check if\n    * we lack a session with one of their devices. This can be an\n    * empty iterator when calling this method between sync requests.\n    *\n    * Items inside `users` will be invalidated by this method. Be careful not\n    * to use the `UserId`s after this method has been called.\n    * @param {(UserId)[]} users\n    * @returns {Promise<any>}\n    */\n    getMissingSessions(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getMissingSessions(this.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n    * Get a map holding all the devices of a user.\n    *\n    * ### Parameters\n    *\n    * * `user_id` - The unique ID of the user that the device belongs to.\n    *\n    * * `timeout_secs` - The amount of time we should wait for a `/keys/query`\n    *   response before returning if the user's device list has been marked as\n    *   stale. **Note**, this assumes that the requests from {@link\n    *   OlmMachine.outgoingRequests} are being processed and sent out.\n    *\n    *   If unset, we will return immediately even if the device list is stale.\n    *\n    * ### Returns\n    *\n    * A {@link UserDevices} object.\n    * @param {UserId} user_id\n    * @param {number | undefined} [timeout_secs]\n    * @returns {Promise<any>}\n    */\n    getUserDevices(user_id, timeout_secs) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getUserDevices(this.__wbg_ptr, user_id.__wbg_ptr, !isLikeNone(timeout_secs), isLikeNone(timeout_secs) ? 0 : timeout_secs);\n        return takeObject(ret);\n    }\n    /**\n    * Get a specific device of a user.\n    *\n    * ### Parameters\n    *\n    * * `user_id` - The unique ID of the user that the device belongs to.\n    *\n    * * `device_id` - The unique ID of the device.\n    *\n    * * `timeout_secs` - The amount of time we should wait for a `/keys/query`\n    *   response before returning if the user's device list has been marked as\n    *   stale. **Note**, this assumes that the requests from {@link\n    *   OlmMachine.outgoingRequests} are being processed and sent out.\n    *\n    *   If unset, we will return immediately even if the device list is stale.\n    *\n    * ### Returns\n    *\n    * If the device is known, a {@link Device}. Otherwise, `undefined`.\n    * @param {UserId} user_id\n    * @param {DeviceId} device_id\n    * @param {number | undefined} [timeout_secs]\n    * @returns {Promise<any>}\n    */\n    getDevice(user_id, device_id, timeout_secs) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        const ret = wasm.olmmachine_getDevice(this.__wbg_ptr, user_id.__wbg_ptr, device_id.__wbg_ptr, !isLikeNone(timeout_secs), isLikeNone(timeout_secs) ? 0 : timeout_secs);\n        return takeObject(ret);\n    }\n    /**\n    * Get a verification object for the given user ID with the given\n    * flow ID (a to-device request ID if the verification has been\n    * requested by a to-device request, or a room event ID if the\n    * verification has been requested by a room event).\n    *\n    * It returns a “`Verification` object”, which is either a `Sas`\n    * or `Qr` object.\n    * @param {UserId} user_id\n    * @param {string} flow_id\n    * @returns {any}\n    */\n    getVerification(user_id, flow_id) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(user_id, UserId);\n            const ptr0 = passStringToWasm0(flow_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.olmmachine_getVerification(retptr, this.__wbg_ptr, user_id.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a verification request object with the given flow ID.\n    * @param {UserId} user_id\n    * @param {string} flow_id\n    * @returns {VerificationRequest | undefined}\n    */\n    getVerificationRequest(user_id, flow_id) {\n        _assertClass(user_id, UserId);\n        const ptr0 = passStringToWasm0(flow_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getVerificationRequest(this.__wbg_ptr, user_id.__wbg_ptr, ptr0, len0);\n        return ret === 0 ? undefined : VerificationRequest.__wrap(ret);\n    }\n    /**\n    * Get all the verification requests of a given user.\n    * @param {UserId} user_id\n    * @returns {Array<any>}\n    */\n    getVerificationRequests(user_id) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getVerificationRequests(this.__wbg_ptr, user_id.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Receive a verification event.\n    *\n    * This method can be used to pass verification events that are happening\n    * in rooms to the `OlmMachine`. The event should be in the decrypted form.\n    * @param {string} event\n    * @param {RoomId} room_id\n    * @returns {Promise<any>}\n    */\n    receiveVerificationEvent(event, room_id) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(room_id, RoomId);\n            wasm.olmmachine_receiveVerificationEvent(retptr, this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Export the keys that match the given predicate.\n    *\n    * `predicate` is a closure that will be called for every known\n    * `InboundGroupSession`, which represents a room key. If the closure\n    * returns `true`, the `InboundGroupSession` will be included in the\n    * export; otherwise it won't.\n    *\n    * Returns a Promise containing a Result containing a String which is a\n    * JSON-encoded array of ExportedRoomKey objects.\n    * @param {Function} predicate\n    * @returns {Promise<any>}\n    */\n    exportRoomKeys(predicate) {\n        const ret = wasm.olmmachine_exportRoomKeys(this.__wbg_ptr, addHeapObject(predicate));\n        return takeObject(ret);\n    }\n    /**\n    * Import the given room keys into our store.\n    *\n    * Mostly, a deprecated alias for `importExportedRoomKeys`, though the\n    * return type is different.\n    *\n    * Returns a String containing a JSON-encoded object, holding three\n    * properties:\n    *  * `total_count` (the total number of keys found in the export data).\n    *  * `imported_count` (the number of keys that were imported).\n    *  * `keys` (the keys that were imported; a map from room id to a map of\n    *    the sender key to a list of session ids).\n    *\n    * @deprecated Use `importExportedRoomKeys` or `importBackedUpRoomKeys`.\n    * @param {string} exported_room_keys\n    * @param {Function} progress_listener\n    * @returns {Promise<any>}\n    */\n    importRoomKeys(exported_room_keys, progress_listener) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.olmmachine_importRoomKeys(retptr, this.__wbg_ptr, ptr0, len0, addHeapObject(progress_listener));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Import the given room keys into our store.\n    *\n    * `exported_keys` is a JSON-encoded list of previously exported keys that\n    * should be imported into our store. If we already have a better\n    * version of a key, the key will _not_ be imported.\n    *\n    * `progress_listener` is a closure that takes 2 `BigInt` arguments:\n    * `progress` and `total`, and returns nothing.\n    *\n    * Returns a {@link RoomKeyImportResult}.\n    * @param {string} exported_room_keys\n    * @param {Function} progress_listener\n    * @returns {Promise<any>}\n    */\n    importExportedRoomKeys(exported_room_keys, progress_listener) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.olmmachine_importExportedRoomKeys(retptr, this.__wbg_ptr, ptr0, len0, addHeapObject(progress_listener));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Import the given room keys into our store.\n    *\n    * # Arguments\n    *\n    * * `backed_up_room_keys`: keys that were retrieved from backup and that\n    *   should be added to our store (provided they are better than our\n    *   current versions of those keys). Specifically, it should be a Map from\n    *   {@link RoomId}, to a Map from session ID to a (decrypted) session data\n    *   structure.\n    *\n    * * `progress_listener`: an optional callback that takes 3 arguments:\n    *   `progress` (the number of keys that have successfully been imported),\n    *   `total` (the total number of keys), and `failures` (the number of keys\n    *   that failed to import), and returns nothing.\n    *\n    * # Returns\n    *\n    * A {@link RoomKeyImportResult}.\n    * @param {Map<any, any>} backed_up_room_keys\n    * @param {Function | undefined} progress_listener\n    * @param {string} backup_version\n    * @returns {Promise<any>}\n    */\n    importBackedUpRoomKeys(backed_up_room_keys, progress_listener, backup_version) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(backup_version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.olmmachine_importBackedUpRoomKeys(retptr, this.__wbg_ptr, addBorrowedObject(backed_up_room_keys), isLikeNone(progress_listener) ? 0 : addHeapObject(progress_listener), ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Store the backup decryption key in the crypto store.\n    *\n    * This is useful if the client wants to support gossiping of the backup\n    * key.\n    *\n    * Returns `Promise<void>`.\n    * @param {BackupDecryptionKey} decryption_key\n    * @param {string} version\n    * @returns {Promise<any>}\n    */\n    saveBackupDecryptionKey(decryption_key, version) {\n        _assertClass(decryption_key, BackupDecryptionKey);\n        const ptr0 = passStringToWasm0(version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_saveBackupDecryptionKey(this.__wbg_ptr, decryption_key.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n    * Get the backup keys we have saved in our store.\n    * Returns a `Promise` for {@link BackupKeys}.\n    * @returns {Promise<any>}\n    */\n    getBackupKeys() {\n        const ret = wasm.olmmachine_getBackupKeys(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Check if the given backup has been verified by us or by another of our\n    * devices that we trust.\n    *\n    * The `backup_info` should be a Javascript object with the following\n    * format:\n    *\n    * ```json\n    * {\n    *     \"algorithm\": \"m.megolm_backup.v1.curve25519-aes-sha2\",\n    *     \"auth_data\": {\n    *         \"public_key\":\"XjhWTCjW7l59pbfx9tlCBQolfnIQWARoKOzjTOPSlWM\",\n    *         \"signatures\": {}\n    *     }\n    * }\n    * ```\n    *\n    * Returns a {@link SignatureVerification} object.\n    * @param {any} backup_info\n    * @returns {Promise<any>}\n    */\n    verifyBackup(backup_info) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.olmmachine_verifyBackup(retptr, this.__wbg_ptr, addHeapObject(backup_info));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Activate the given backup key to be used with the given backup version.\n    *\n    * **Warning**: The caller needs to make sure that the given `BackupKey` is\n    * trusted, otherwise we might be encrypting room keys that a malicious\n    * party could decrypt.\n    *\n    * The {@link #verifyBackup} method can be used to do so.\n    *\n    * Returns `Promise<void>`.\n    * @param {string} public_key_base_64\n    * @param {string} version\n    * @returns {Promise<any>}\n    */\n    enableBackupV1(public_key_base_64, version) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(public_key_base_64, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.olmmachine_enableBackupV1(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Are we able to encrypt room keys.\n    *\n    * This returns true if we have an active `BackupKey` and backup version\n    * registered with the state machine.\n    *\n    * Returns `Promise<bool>`.\n    * @returns {Promise<any>}\n    */\n    isBackupEnabled() {\n        const ret = wasm.olmmachine_isBackupEnabled(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Disable and reset our backup state.\n    *\n    * This will remove any pending backup request, remove the backup key and\n    * reset the backup state of each room key we have.\n    *\n    * Returns `Promise<void>`.\n    * @returns {Promise<any>}\n    */\n    disableBackup() {\n        const ret = wasm.olmmachine_disableBackup(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Encrypt a batch of room keys and return a request that needs to be sent\n    * out to backup the room keys.\n    *\n    * Returns an optional {@link KeysBackupRequest}.\n    * @returns {Promise<any>}\n    */\n    backupRoomKeys() {\n        const ret = wasm.olmmachine_backupRoomKeys(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get the number of backed up room keys and the total number of room keys.\n    * Returns a {@link RoomKeyCounts}.\n    * @returns {Promise<any>}\n    */\n    roomKeyCounts() {\n        const ret = wasm.olmmachine_roomKeyCounts(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Encrypt the list of exported room keys using the given passphrase.\n    *\n    * `exported_room_keys` is a list of sessions that should be encrypted\n    * (it's generally returned by `export_room_keys`). `passphrase` is the\n    * passphrase that will be used to encrypt the exported room keys. And\n    * `rounds` is the number of rounds that should be used for the key\n    * derivation when the passphrase gets turned into an AES key. More rounds\n    * are increasingly computationnally intensive and as such help against\n    * brute-force attacks. Should be at least `10_000`, while values in the\n    * `100_000` ranges should be preferred.\n    * @param {string} exported_room_keys\n    * @param {string} passphrase\n    * @param {number} rounds\n    * @returns {string}\n    */\n    static encryptExportedRoomKeys(exported_room_keys, passphrase, rounds) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.olmmachine_encryptExportedRoomKeys(retptr, ptr0, len0, ptr1, len1, rounds);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr3 = r0;\n            var len3 = r1;\n            if (r3) {\n                ptr3 = 0; len3 = 0;\n                throw takeObject(r2);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n    /**\n    * Try to decrypt a reader into a list of exported room keys.\n    *\n    * `encrypted_exported_room_keys` is the result from\n    * `encrypt_exported_room_keys`. `passphrase` is the passphrase that was\n    * used when calling `encrypt_exported_room_keys`.\n    * @param {string} encrypted_exported_room_keys\n    * @param {string} passphrase\n    * @returns {string}\n    */\n    static decryptExportedRoomKeys(encrypted_exported_room_keys, passphrase) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(encrypted_exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.olmmachine_decryptExportedRoomKeys(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr3 = r0;\n            var len3 = r1;\n            if (r3) {\n                ptr3 = 0; len3 = 0;\n                throw takeObject(r2);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n    /**\n    * Register a callback which will be called whenever there is an update to\n    * a room key.\n    *\n    * `callback` should be a function that takes a single argument (an array\n    * of {@link RoomKeyInfo}) and returns a Promise.\n    * @param {Function} callback\n    * @returns {Promise<void>}\n    */\n    registerRoomKeyUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerRoomKeyUpdatedCallback(this.__wbg_ptr, addHeapObject(callback));\n        return takeObject(ret);\n    }\n    /**\n    * Register a callback which will be called whenever we receive a\n    * notification that some room keys have been withheld.\n    *\n    * `callback` should be a function that takes a single argument (an array\n    * of {@link RoomKeyWithheldInfo}) and returns a Promise.\n    * @param {Function} callback\n    * @returns {Promise<void>}\n    */\n    registerRoomKeysWithheldCallback(callback) {\n        const ret = wasm.olmmachine_registerRoomKeysWithheldCallback(this.__wbg_ptr, addHeapObject(callback));\n        return takeObject(ret);\n    }\n    /**\n    * Register a callback which will be called whenever there is an update to\n    * a user identity.\n    *\n    * `callback` should be a function that takes a single argument (a {@link\n    * UserId}) and returns a Promise.\n    * @param {Function} callback\n    * @returns {Promise<void>}\n    */\n    registerUserIdentityUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerUserIdentityUpdatedCallback(this.__wbg_ptr, addHeapObject(callback));\n        return takeObject(ret);\n    }\n    /**\n    * Register a callback which will be called whenever there is an update to\n    * a device.\n    *\n    * `callback` should be a function that takes a single argument (an array\n    * of user IDs as strings) and returns a Promise.\n    * @param {Function} callback\n    * @returns {Promise<void>}\n    */\n    registerDevicesUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerDevicesUpdatedCallback(this.__wbg_ptr, addHeapObject(callback));\n        return takeObject(ret);\n    }\n    /**\n    * Register a callback which will be called whenever a secret\n    * (`m.secret.send`) is received.\n    *\n    * The only secret this will currently broadcast is the\n    * `m.megolm_backup.v1` (the cross signing secrets are handled internally).\n    *\n    * To request a secret from other devices, a client sends an\n    * `m.secret.request` device event with `action` set to `request` and\n    * `name` set to the identifier of the secret. A device that wishes to\n    * share the secret will reply with an `m.secret.send` event, encrypted\n    * using olm.\n    *\n    * The secrets are guaranteed to have been received over a 1-to-1 encrypted\n    * to_device message from a one of the user's own verified devices.\n    *\n    * See https://matrix-org.github.io/matrix-rust-sdk/matrix_sdk_crypto/store/struct.Store.html#method.secrets_stream for more information.\n    *\n    * `callback` should be a function that takes 2 arguments: the secret name\n    * (string) and value (string).\n    *\n    * **Note**: if the secret is valid and handled on the javascript side, the\n    * secret inbox should be cleared by calling\n    * `delete_secrets_from_inbox`.\n    * @param {Function} callback\n    * @returns {Promise<void>}\n    */\n    registerReceiveSecretCallback(callback) {\n        const ret = wasm.olmmachine_registerReceiveSecretCallback(this.__wbg_ptr, addHeapObject(callback));\n        return takeObject(ret);\n    }\n    /**\n    * Get all the secrets with the given secret_name we have currently\n    * stored.\n    * The only secret this will currently return is the\n    * `m.megolm_backup.v1` secret.\n    *\n    * Usually you would just register a callback with\n    * [`register_receive_secret_callback`], but if the client is shut down\n    * before handling them, this method can be used to retrieve them.\n    * This method should therefore be called at client startup to retrieve any\n    * secrets received during the previous session.\n    *\n    * The secrets are guaranteed to have been received over a 1-to-1 encrypted\n    * to_device message from one of the user's own verified devices.\n    *\n    * Returns a `Promise` for a `Set` of `String` corresponding to the secret\n    * values.\n    *\n    * If the secret is valid and handled, the secret inbox should be cleared\n    * by calling `delete_secrets_from_inbox`.\n    * @param {string} secret_name\n    * @returns {Promise<Promise<any>>}\n    */\n    getSecretsFromInbox(secret_name) {\n        const ptr0 = passStringToWasm0(secret_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getSecretsFromInbox(this.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n    * Delete all secrets with the given secret name from the inbox.\n    *\n    * Should be called after handling the secrets with\n    * `get_secrets_from_inbox`.\n    *\n    * # Arguments\n    *\n    * * `secret_name` - The name of the secret to delete.\n    * @param {string} secret_name\n    * @returns {Promise<Promise<any>>}\n    */\n    deleteSecretsFromInbox(secret_name) {\n        const ptr0 = passStringToWasm0(secret_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_deleteSecretsFromInbox(this.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n    * Request missing local secrets from our other trusted devices.\n    *\n    * \"Local secrets\" refers to secrets which can be shared between trusted\n    * devices, such as private cross-signing keys, and the megolm backup\n    * decryption key.\n    *\n    * This method will cause the sdk to generated outgoing secret requests\n    * (`m.secret.request`) to get the missing secrets. These requests will\n    * then be returned by a future call to {@link\n    * OlmMachine#outgoing_requests}.\n    *\n    * # Returns\n    *\n    * A `Promise` for a `bool` result, which will be true if  secrets were\n    * missing, and a request was generated.\n    * @returns {Promise<Promise<any>>}\n    */\n    requestMissingSecretsIfNeeded() {\n        const ret = wasm.olmmachine_requestMissingSecretsIfNeeded(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get the stored room settings, such as the encryption algorithm or\n    * whether to encrypt only for trusted devices.\n    *\n    * These settings can be modified via {@link #setRoomSettings}.\n    *\n    * # Returns\n    *\n    * `Promise<RoomSettings|undefined>`\n    * @param {RoomId} room_id\n    * @returns {Promise<any>}\n    */\n    getRoomSettings(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_getRoomSettings(this.__wbg_ptr, room_id.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Store encryption settings for the given room.\n    *\n    * This method checks if the new settings are \"safe\" -- ie, that they do\n    * not represent a downgrade in encryption security from any previous\n    * settings. Attempts to downgrade security will result in an error.\n    *\n    * If the settings are valid, they will be persisted to the crypto store.\n    * These settings are not used directly by this library, but the saved\n    * settings can be retrieved via {@link #getRoomSettings}.\n    * @param {RoomId} room_id\n    * @param {RoomSettings} room_settings\n    * @returns {Promise<void>}\n    */\n    setRoomSettings(room_id, room_settings) {\n        _assertClass(room_id, RoomId);\n        _assertClass(room_settings, RoomSettings);\n        const ret = wasm.olmmachine_setRoomSettings(this.__wbg_ptr, room_id.__wbg_ptr, room_settings.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Manage dehydrated devices\n    * @returns {DehydratedDevices}\n    */\n    dehydratedDevices() {\n        const ret = wasm.olmmachine_dehydratedDevices(this.__wbg_ptr);\n        return DehydratedDevices.__wrap(ret);\n    }\n    /**\n    * Shut down the `OlmMachine`.\n    *\n    * The `OlmMachine` cannot be used after this method has been called.\n    *\n    * All associated resources will be closed too, like IndexedDB\n    * connections.\n    */\n    close() {\n        const ptr = this.__destroy_into_raw();\n        wasm.olmmachine_close(ptr);\n    }\n}\n\nconst OtherUserIdentityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_otheruseridentity_free(ptr >>> 0, 1));\n/**\n* Struct representing a cross signing identity of a user.\n*\n* This is the user identity of a user that isn't our own. Other users will\n* only contain a master key and a self signing key, meaning that only device\n* signatures can be checked with this identity.\n*\n* This struct wraps a read-only version of the struct and allows verifications\n* to be requested to verify our own device with the user identity.\n*/\nexport class OtherUserIdentity {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OtherUserIdentity.prototype);\n        obj.__wbg_ptr = ptr;\n        OtherUserIdentityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OtherUserIdentityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_otheruseridentity_free(ptr, 0);\n    }\n    /**\n    * Is this user identity verified?\n    * @returns {boolean}\n    */\n    isVerified() {\n        const ret = wasm.otheruseridentity_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Manually verify this user.\n    *\n    * This method will attempt to sign the user identity using our private\n    * cross signing key.\n    *\n    * This method fails if we don't have the private part of our user-signing\n    * key.\n    *\n    * Returns a request that needs to be sent out for the user to be marked as\n    * verified.\n    * @returns {Promise<any>}\n    */\n    verify() {\n        const ret = wasm.otheruseridentity_verify(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Create a `VerificationRequest` object after the verification\n    * request content has been sent out.\n    * @param {RoomId} room_id\n    * @param {EventId} request_event_id\n    * @param {any[] | undefined} [methods]\n    * @returns {VerificationRequest}\n    */\n    requestVerification(room_id, request_event_id, methods) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(room_id, RoomId);\n            _assertClass(request_event_id, EventId);\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.otheruseridentity_requestVerification(retptr, this.__wbg_ptr, room_id.__wbg_ptr, request_event_id.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerificationRequest.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Send a verification request to the given user.\n    *\n    * The returned content needs to be sent out into a DM room with the given\n    * user.\n    *\n    * After the content has been sent out a VerificationRequest can be started\n    * with the `request_verification` method.\n    * @param {any[] | undefined} [methods]\n    * @returns {string}\n    */\n    verificationRequestContent(methods) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.otheruseridentity_verificationRequestContent(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n    * Get the master key of the identity.\n    * @returns {string}\n    */\n    get masterKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.otheruseridentity_masterKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n    * Get the self-signing key of the identity.\n    * @returns {string}\n    */\n    get selfSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.otheruseridentity_selfSigningKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n    * Pin the current identity (public part of the master signing key).\n    * @returns {Promise<any>}\n    */\n    pinCurrentMasterKey() {\n        const ret = wasm.otheruseridentity_pinCurrentMasterKey(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Has the identity changed in a way that requires approval from the user?\n    *\n    * A user identity needs approval if it changed after the crypto machine\n    * has already observed (\"pinned\") a different identity for that user,\n    * unless it is an explicitly verified identity (using for example\n    * interactive verification).\n    *\n    * This situation can be resolved by:\n    *\n    * - Verifying the new identity with {@link requestVerification}, or:\n    * - Updating the pin to the new identity with {@link pinCurrentMasterKey}.\n    * @returns {boolean}\n    */\n    identityNeedsUserApproval() {\n        const ret = wasm.otheruseridentity_identityNeedsUserApproval(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * True if we verified this identity (with any own identity, at any\n    * point).\n    *\n    * To set this latch back to false, call {@link withdrawVerification}.\n    * @returns {boolean}\n    */\n    wasPreviouslyVerified() {\n        const ret = wasm.otheruseridentity_wasPreviouslyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Remove the requirement for this identity to be verified.\n    *\n    * If an identity was previously verified and is not anymore it will be\n    * reported to the user. In order to remove this notice users have to\n    * verify again or to withdraw the verification requirement.\n    * @returns {Promise<any>}\n    */\n    withdrawVerification() {\n        const ret = wasm.otheruseridentity_withdrawVerification(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Was this identity verified since initial observation and is not anymore?\n    *\n    * Such a violation should be reported to the local user by the\n    * application, and resolved by\n    *\n    * - Verifying the new identity with {@link requestVerification}, or:\n    * - Withdrawing the verification requirement with {@link\n    *   withdrawVerification}.\n    * @returns {boolean}\n    */\n    hasVerificationViolation() {\n        const ret = wasm.otheruseridentity_hasVerificationViolation(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst OutboundCreationResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_outboundcreationresult_free(ptr >>> 0, 1));\n/**\n* The result of an outbound ECIES channel establishment.\n*/\nexport class OutboundCreationResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OutboundCreationResult.prototype);\n        obj.__wbg_ptr = ptr;\n        OutboundCreationResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OutboundCreationResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_outboundcreationresult_free(ptr, 0);\n    }\n    /**\n    * The established ECIES channel.\n    * @returns {EstablishedEcies}\n    */\n    get channel() {\n        const ret = wasm.__wbg_get_inboundcreationresult_channel(this.__wbg_ptr);\n        return EstablishedEcies.__wrap(ret);\n    }\n    /**\n    * The established ECIES channel.\n    * @param {EstablishedEcies} arg0\n    */\n    set channel(arg0) {\n        _assertClass(arg0, EstablishedEcies);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_inboundcreationresult_channel(this.__wbg_ptr, ptr0);\n    }\n    /**\n    * The initial encrypted message.\n    * @returns {string}\n    */\n    get initial_message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_backupsecretsbundle_key(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The initial encrypted message.\n    * @param {string} arg0\n    */\n    set initial_message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst OwnUserIdentityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ownuseridentity_free(ptr >>> 0, 1));\n/**\n* Struct representing a cross signing identity of a user.\n*\n* This is the user identity of a user that is our own.\n*/\nexport class OwnUserIdentity {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OwnUserIdentity.prototype);\n        obj.__wbg_ptr = ptr;\n        OwnUserIdentityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OwnUserIdentityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ownuseridentity_free(ptr, 0);\n    }\n    /**\n    * Is this user identity verified?\n    * @returns {boolean}\n    */\n    isVerified() {\n        const ret = wasm.ownuseridentity_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Mark our user identity as verified.\n    *\n    * This will mark the identity locally as verified and sign it with our own\n    * device.\n    *\n    * Returns a signature upload request that needs to be sent out.\n    * @returns {Promise<any>}\n    */\n    verify() {\n        const ret = wasm.ownuseridentity_verify(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Send a verification request to our other devices.\n    * @param {any[] | undefined} [methods]\n    * @returns {Promise<any>}\n    */\n    requestVerification(methods) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.ownuseridentity_requestVerification(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Does our user identity trust our own device, i.e. have we signed our own\n    * device keys with our self-signing key?\n    * @returns {Promise<any>}\n    */\n    trustsOurOwnDevice() {\n        const ret = wasm.ownuseridentity_trustsOurOwnDevice(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get the master key of the identity.\n    * @returns {string}\n    */\n    get masterKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ownuseridentity_masterKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n    * Get the self-signing key of the identity.\n    * @returns {string}\n    */\n    get selfSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ownuseridentity_selfSigningKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n    * Get the user-signing key of the identity. This is only present for our\n    * own user identity.\n    * @returns {string}\n    */\n    get userSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ownuseridentity_userSigningKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n    * True if we verified our own identity at some point in the past.\n    *\n    * To reset this latch back to `false`, call {@link withdrawVerification}.\n    * @returns {boolean}\n    */\n    wasPreviouslyVerified() {\n        const ret = wasm.ownuseridentity_wasPreviouslyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Remove the requirement for this identity to be verified.\n    *\n    * If an identity was previously verified and is not any longer, it will be\n    * reported to the user. In order to remove this notice users have to\n    * verify again or to withdraw the verification requirement.\n    * @returns {Promise<any>}\n    */\n    withdrawVerification() {\n        const ret = wasm.ownuseridentity_withdrawVerification(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Was this identity verified since initial observation and is not anymore?\n    *\n    * Such a violation should be reported to the local user by the\n    * application, and resolved by\n    *\n    * - Verifying the new identity with {@link requestVerification}, or:\n    * - Withdrawing the verification requirement with {@link\n    *   withdrawVerification}.\n    * @returns {boolean}\n    */\n    hasVerificationViolation() {\n        const ret = wasm.ownuseridentity_hasVerificationViolation(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst PickledInboundGroupSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pickledinboundgroupsession_free(ptr >>> 0, 1));\n/**\n* A pickled version of an `InboundGroupSession`.\n*\n* Holds all the information that needs to be stored in a database to restore\n* an InboundGroupSession.\n*/\nexport class PickledInboundGroupSession {\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof PickledInboundGroupSession)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PickledInboundGroupSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pickledinboundgroupsession_free(ptr, 0);\n    }\n    /**\n    * The pickle string holding the Megolm Session, as returned by\n    * `olm_pickle_inbound_group_session` in libolm.\n    * @returns {string}\n    */\n    get pickle() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_backupsecretsbundle_key(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The pickle string holding the Megolm Session, as returned by\n    * `olm_pickle_inbound_group_session` in libolm.\n    * @param {string} arg0\n    */\n    set pickle(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * The public curve25519 key of the account that sent us the session.\n    * @returns {string}\n    */\n    get senderKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_backupsecretsbundle_backup_version(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The public curve25519 key of the account that sent us the session.\n    * @param {string} arg0\n    */\n    set senderKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * The public ed25519 key of the account that is believed to have initiated\n    * the session, if known.\n    *\n    * If the session was received directly from the creator via an\n    * Olm-encrypted `m.room_key` event, this value is taken from the `keys`\n    * property of the plaintext payload of that event (see\n    * [`m.olm.v1.curve25519-aes-sha2`]).\n    *\n    * If the session was forwarded to us using an [`m.forwarded_room_key`],\n    * this value is a copy of the `sender_claimed_ed25519_key` from the\n    * content of the event.\n    *\n    * [`m.olm.v1.curve25519-aes-sha2`]: https://spec.matrix.org/v1.9/client-server-api/#molmv1curve25519-aes-sha2\n    * [`m.forwarded_room_key`]: https://spec.matrix.org/v1.9/client-server-api/#mforwarded_room_key\n    * @returns {string | undefined}\n    */\n    get senderSigningKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_basemigrationdata_backupRecoveryKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The public ed25519 key of the account that is believed to have initiated\n    * the session, if known.\n    *\n    * If the session was received directly from the creator via an\n    * Olm-encrypted `m.room_key` event, this value is taken from the `keys`\n    * property of the plaintext payload of that event (see\n    * [`m.olm.v1.curve25519-aes-sha2`]).\n    *\n    * If the session was forwarded to us using an [`m.forwarded_room_key`],\n    * this value is a copy of the `sender_claimed_ed25519_key` from the\n    * content of the event.\n    *\n    * [`m.olm.v1.curve25519-aes-sha2`]: https://spec.matrix.org/v1.9/client-server-api/#molmv1curve25519-aes-sha2\n    * [`m.forwarded_room_key`]: https://spec.matrix.org/v1.9/client-server-api/#mforwarded_room_key\n    * @param {string | undefined} [arg0]\n    */\n    set senderSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupRecoveryKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * The id of the room that the session is used in.\n    *\n    * Nullable so that a `PickledInboundGroupSession` can be constructed\n    * incrementally. Must be populated!\n    * @returns {RoomId | undefined}\n    */\n    get roomId() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n    * The id of the room that the session is used in.\n    *\n    * Nullable so that a `PickledInboundGroupSession` can be constructed\n    * incrementally. Must be populated!\n    * @param {RoomId | undefined} [arg0]\n    */\n    set roomId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, RoomId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_pickledinboundgroupsession_roomId(this.__wbg_ptr, ptr0);\n    }\n    /**\n    * Flag remembering if the session was directly sent to us by the sender\n    * or if it was imported.\n    * @returns {boolean}\n    */\n    get imported() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_imported(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Flag remembering if the session was directly sent to us by the sender\n    * or if it was imported.\n    * @param {boolean} arg0\n    */\n    set imported(arg0) {\n        wasm.__wbg_set_pickledinboundgroupsession_imported(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Flag remembering if the session has been backed up.\n    * @returns {boolean}\n    */\n    get backedUp() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_backedUp(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Flag remembering if the session has been backed up.\n    * @param {boolean} arg0\n    */\n    set backedUp(arg0) {\n        wasm.__wbg_set_pickledinboundgroupsession_backedUp(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Construct a new `PickledInboundGroupSession`, with default values.\n    */\n    constructor() {\n        const ret = wasm.pickledinboundgroupsession_new();\n        this.__wbg_ptr = ret >>> 0;\n        PickledInboundGroupSessionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst PickledSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pickledsession_free(ptr >>> 0, 1));\n/**\n* A pickled version of a `Session`.\n*\n* Holds all the information that needs to be stored in a database to restore\n* an Olm Session. Can be imported into the rust store with {@link\n* #migrateOlmSessions}.\n*/\nexport class PickledSession {\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof PickledSession)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PickledSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pickledsession_free(ptr, 0);\n    }\n    /**\n    * The pickle string holding the Olm Session, as returned by\n    * `olm_pickle_session` in libolm.\n    * @returns {string}\n    */\n    get pickle() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_backupsecretsbundle_key(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The pickle string holding the Olm Session, as returned by\n    * `olm_pickle_session` in libolm.\n    * @param {string} arg0\n    */\n    set pickle(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * The base64-encoded public curve25519 key of the other user that we share\n    * this session with.\n    * @returns {string}\n    */\n    get senderKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_backupsecretsbundle_backup_version(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The base64-encoded public curve25519 key of the other user that we share\n    * this session with.\n    * @param {string} arg0\n    */\n    set senderKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * Was the session created using a fallback key?\n    * @returns {boolean}\n    */\n    get createdUsingFallbackKey() {\n        const ret = wasm.__wbg_get_pickledsession_createdUsingFallbackKey(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Was the session created using a fallback key?\n    * @param {boolean} arg0\n    */\n    set createdUsingFallbackKey(arg0) {\n        wasm.__wbg_set_pickledsession_createdUsingFallbackKey(this.__wbg_ptr, arg0);\n    }\n    /**\n    * When the session was created.\n    * @returns {Date}\n    */\n    get creationTime() {\n        const ret = wasm.__wbg_get_pickledsession_creationTime(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * When the session was created.\n    * @param {Date} arg0\n    */\n    set creationTime(arg0) {\n        wasm.__wbg_set_pickledsession_creationTime(this.__wbg_ptr, addHeapObject(arg0));\n    }\n    /**\n    * When the session was last used.\n    * @returns {Date}\n    */\n    get lastUseTime() {\n        const ret = wasm.__wbg_get_pickledsession_lastUseTime(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * When the session was last used.\n    * @param {Date} arg0\n    */\n    set lastUseTime(arg0) {\n        wasm.__wbg_set_pickledsession_lastUseTime(this.__wbg_ptr, addHeapObject(arg0));\n    }\n    /**\n    * Construct a new `PickledSession`, with default values.\n    */\n    constructor() {\n        const ret = wasm.pickledsession_new();\n        this.__wbg_ptr = ret >>> 0;\n        PickledSessionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst PutDehydratedDeviceRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_putdehydrateddevicerequest_free(ptr >>> 0, 1));\n/**\n* A request that will upload a dehydrated device to the server.\n*/\nexport class PutDehydratedDeviceRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PutDehydratedDeviceRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        PutDehydratedDeviceRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PutDehydratedDeviceRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_putdehydrateddevicerequest_free(ptr, 0);\n    }\n    /**\n    * A JSON-encoded string containing the rest of the payload: `rooms`.\n    *\n    * It represents the body of the HTTP request.\n    * @returns {string}\n    */\n    get body() {\n        const ret = wasm.__wbg_get_putdehydrateddevicerequest_body(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Create a new `PutDehydratedDeviceRequest`\n    * @param {string} body\n    */\n    constructor(body) {\n        const ret = wasm.putdehydrateddevicerequest_new(addHeapObject(body));\n        this.__wbg_ptr = ret >>> 0;\n        PutDehydratedDeviceRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst QrFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qr_free(ptr >>> 0, 1));\n/**\n* QR code based verification.\n*/\nexport class Qr {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Qr.prototype);\n        obj.__wbg_ptr = ptr;\n        QrFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qr_free(ptr, 0);\n    }\n    /**\n    * Get the current state of this request.\n    *\n    * Returns a `QrState`.\n    * @returns {QrState}\n    */\n    state() {\n        const ret = wasm.qr_state(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Has the QR verification been scanned by the other side.\n    *\n    * When the verification object is in this state it’s required\n    * that the user confirms that the other side has scanned the QR\n    * code.\n    * @returns {boolean}\n    */\n    hasBeenScanned() {\n        const ret = wasm.qr_hasBeenScanned(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Has the scanning of the QR code been confirmed by us?\n    * @returns {boolean}\n    */\n    hasBeenConfirmed() {\n        const ret = wasm.qr_hasBeenConfirmed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get our own user ID.\n    * @returns {UserId}\n    */\n    get userId() {\n        const ret = wasm.qr_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n    * Get the user id of the other user that is participating in\n    * this verification flow.\n    * @returns {UserId}\n    */\n    get otherUserId() {\n        const ret = wasm.qr_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n    * Get the device ID of the other side.\n    * @returns {DeviceId}\n    */\n    get otherDeviceId() {\n        const ret = wasm.qr_otherDeviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n    * Did we initiate the verification request?\n    * @returns {boolean}\n    */\n    weStarted() {\n        const ret = wasm.qr_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get info about the cancellation if the verification flow has\n    * been cancelled.\n    * @returns {CancelInfo | undefined}\n    */\n    cancelInfo() {\n        const ret = wasm.qr_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n    * Has the verification flow completed?\n    * @returns {boolean}\n    */\n    isDone() {\n        const ret = wasm.qr_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Has the verification flow been cancelled?\n    * @returns {boolean}\n    */\n    isCancelled() {\n        const ret = wasm.qr_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Is this a verification that is verifying one of our own devices?\n    * @returns {boolean}\n    */\n    isSelfVerification() {\n        const ret = wasm.qr_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Have we successfully scanned the QR code and are able to send\n    * a reciprocation event?\n    * @returns {boolean}\n    */\n    reciprocated() {\n        const ret = wasm.qr_reciprocated(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get the unique ID that identifies this QR verification flow,\n    * be either a to-device request ID or a room event ID.\n    * @returns {string}\n    */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qr_flowId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the room id if the verification is happening inside a\n    * room.\n    * @returns {RoomId | undefined}\n    */\n    get roomId() {\n        const ret = wasm.qr_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n    * Generate a QR code object that is representing this\n    * verification flow.\n    *\n    * The QrCode can then be rendered as an image or as an unicode\n    * string.\n    *\n    * The `to_bytes` method can be used to instead output the raw\n    * bytes that should be encoded as a QR code.\n    *\n    * Returns a `QrCode`.\n    * @returns {QrCode}\n    */\n    toQrCode() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qr_toQrCode(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return QrCode.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Generate a the raw bytes that should be encoded as a QR code\n    * is representing this verification flow.\n    *\n    * The `to_qr_code` method can be used to instead output a QrCode\n    * object that can be rendered.\n    * @returns {Uint8ClampedArray}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qr_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Notify the other side that we have successfully scanned the QR\n    * code and that the QR verification flow can start.\n    *\n    * This will return some OutgoingContent if the object is in the\n    * correct state to start the verification flow, otherwise None.\n    * @returns {any}\n    */\n    reciprocate() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qr_reciprocate(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Confirm that the other side has scanned our QR code.\n    *\n    * Returns either an `OutgoingRequest` which should be sent out, or\n    * `undefined` if the verification is already confirmed.\n    * @returns {any}\n    */\n    confirmScanning() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qr_confirmScanning(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Cancel the verification flow.\n    *\n    * Returns either an `OutgoingRequest` which should be sent out, or\n    * `undefined` if the verification is already cancelled.\n    * @returns {any}\n    */\n    cancel() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qr_cancel(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Cancel the verification.\n    *\n    * This cancels the verification with given code (e.g. `m.user`).\n    *\n    * Returns either an `OutgoingRequest` which should be sent out, or\n    * `undefined` if the verification is already cancelled.\n    * @param {string} code\n    * @returns {any}\n    */\n    cancelWithCode(code) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.qr_cancelWithCode(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Register a callback which will be called whenever there is an update to\n    * the request\n    *\n    * The `callback` is called with no parameters.\n    * @param {Function} callback\n    */\n    registerChangesCallback(callback) {\n        wasm.qr_registerChangesCallback(this.__wbg_ptr, addHeapObject(callback));\n    }\n}\n\nconst QrCodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcode_free(ptr >>> 0, 1));\n/**\n* A QR code.\n*/\nexport class QrCode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCode.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcode_free(ptr, 0);\n    }\n    /**\n    * Render the QR code into a `Uint8ClampedArray` where 1 represents a\n    * dark pixel and 0 a white pixel.\n    * @returns {Uint8ClampedArray}\n    */\n    renderIntoBuffer() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qrcode_renderIntoBuffer(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst QrCodeDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcodedata_free(ptr >>> 0, 1));\n/**\n* Data for the QR code login mechanism.\n*\n* The {@link QrCodeData} can be serialized and encoded as a QR code or it can\n* be decoded from a QR code.\n*/\nexport class QrCodeData {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCodeData.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeDataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcodedata_free(ptr, 0);\n    }\n    /**\n    * Create new {@link QrCodeData} from a given public key, a rendezvous URL\n    * and, optionally, a server name for the homeserver.\n    *\n    * If a server name is given, then the {@link QrCodeData} mode will be\n    * {@link QrCodeMode.Reciprocate}, i.e. the QR code will contain data for\n    * the existing device to display the QR code.\n    *\n    * If no server name is given, the {@link QrCodeData} mode will be\n    * {@link QrCodeMode.Login}, i.e. the QR code will contain data for the\n    * new device to display the QR code.\n    * @param {Curve25519PublicKey} public_key\n    * @param {string} rendezvous_url\n    * @param {string | undefined} [server_name]\n    */\n    constructor(public_key, rendezvous_url, server_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(public_key, Curve25519PublicKey);\n            var ptr0 = public_key.__destroy_into_raw();\n            const ptr1 = passStringToWasm0(rendezvous_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            var ptr2 = isLikeNone(server_name) ? 0 : passStringToWasm0(server_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len2 = WASM_VECTOR_LEN;\n            wasm.qrcodedata_new(retptr, ptr0, ptr1, len1, ptr2, len2);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            QrCodeDataFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Attempt to decode a slice of bytes into a {@link QrCodeData} object.\n    *\n    * The slice of bytes would generally be returned by a QR code decoder.\n    * @param {Uint8Array} bytes\n    * @returns {QrCodeData}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.qrcodedata_fromBytes(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return QrCodeData.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encode the {@link QrCodeData} into a list of bytes.\n    *\n    * The list of bytes can be used by a QR code generator to create an image\n    * containing a QR code.\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qrcodedata_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Attempt to decode a base64 encoded string into a {@link QrCodeData}\n    * object.\n    * @param {string} data\n    * @returns {QrCodeData}\n    */\n    static fromBase64(data) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.qrcodedata_fromBase64(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return QrCodeData.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encode the {@link QrCodeData} into a string using base64.\n    *\n    * This format can be used for debugging purposes and the\n    * [`QrcodeData::from_base64()`] method can be used to parse the string\n    * again.\n    * @returns {string}\n    */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qrcodedata_toBase64(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the Curve25519 public key embedded in the {@link QrCodeData}.\n    *\n    * This Curve25519 public key should be used to establish an\n    * [ECIES](https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme)\n    * (Elliptic Curve Integrated Encryption Scheme) channel with the other\n    * device.\n    * @returns {Curve25519PublicKey}\n    */\n    get publicKey() {\n        const ret = wasm.qrcodedata_publicKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n    * Get the URL of the rendezvous server which will be used to exchange\n    * messages between the two devices.\n    * @returns {string}\n    */\n    get rendezvousUrl() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qrcodedata_rendezvousUrl(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the server name of the homeserver which the new device will be\n    * logged in to.\n    *\n    * This will be only available if the existing device has generated the QR\n    * code and the new device is the one scanning the QR code.\n    * @returns {string | undefined}\n    */\n    get serverName() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qrcodedata_serverName(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the mode of this {@link QrCodeData} instance.\n    * @returns {QrCodeMode}\n    */\n    get mode() {\n        const ret = wasm.qrcodedata_mode(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst QrCodeScanFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcodescan_free(ptr >>> 0, 1));\n/**\n* A scanned QR code.\n*/\nexport class QrCodeScan {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCodeScan.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeScanFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeScanFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcodescan_free(ptr, 0);\n    }\n    /**\n    * Parse the decoded payload of a QR code in byte slice form.\n    *\n    * This method is useful if you would like to do your own custom QR code\n    * decoding.\n    * @param {Uint8ClampedArray} buffer\n    * @returns {QrCodeScan}\n    */\n    static fromBytes(buffer) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.qrcodescan_fromBytes(retptr, addBorrowedObject(buffer));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return QrCodeScan.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\n\nconst RehydratedDeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rehydrateddevice_free(ptr >>> 0, 1));\n/**\n* A rehydrated device\n*\n* This device can receive to-device events to get room keys that were send to\n* it.\n*/\nexport class RehydratedDevice {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RehydratedDevice.prototype);\n        obj.__wbg_ptr = ptr;\n        RehydratedDeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RehydratedDeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rehydrateddevice_free(ptr, 0);\n    }\n    /**\n    * Receive the to-device events that sent to the dehydrated device\n    *\n    * The rehydrated device will decrypt the events and pass the room keys\n    * into the `OlmMachine`.\n    *\n    * `to_device_events` is a JSON-encoded result of the `events` array from\n    * `/dehydrated_device/{device_id}/events`.\n    *\n    * Returns an array of `RoomKeyInfo`, indicating the room keys that were\n    * received.\n    * @param {string} to_device_events\n    * @returns {Promise<Array<any>>}\n    */\n    receiveEvents(to_device_events) {\n        const ptr0 = passStringToWasm0(to_device_events, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.rehydrateddevice_receiveEvents(this.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n}\n\nconst RoomIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomid_free(ptr >>> 0, 1));\n/**\n* A Matrix [room ID].\n*\n* [room ID]: https://spec.matrix.org/v1.2/appendices/#room-ids-and-event-ids\n*/\nexport class RoomId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomId.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof RoomId)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomid_free(ptr, 0);\n    }\n    /**\n    * Parse/validate and create a new `RoomId`.\n    * @param {string} id\n    */\n    constructor(id) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.roomid_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            RoomIdFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the room ID as a string.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.deviceid_toString(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomKeyCountsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeycounts_free(ptr >>> 0, 1));\n/**\n* Struct holding the number of room keys we have.\n*/\nexport class RoomKeyCounts {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyCounts.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyCountsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyCountsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeycounts_free(ptr, 0);\n    }\n    /**\n    * The total number of room keys.\n    * @returns {number}\n    */\n    get total() {\n        const ret = wasm.__wbg_get_roomkeycounts_total(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * The total number of room keys.\n    * @param {number} arg0\n    */\n    set total(arg0) {\n        wasm.__wbg_set_roomkeycounts_total(this.__wbg_ptr, arg0);\n    }\n    /**\n    * The number of backed up room keys.\n    * @returns {number}\n    */\n    get backedUp() {\n        const ret = wasm.__wbg_get_roomkeycounts_backedUp(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * The number of backed up room keys.\n    * @param {number} arg0\n    */\n    set backedUp(arg0) {\n        wasm.__wbg_set_roomkeycounts_backedUp(this.__wbg_ptr, arg0);\n    }\n}\n\nconst RoomKeyImportResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeyimportresult_free(ptr >>> 0, 1));\n/**\n* The result of a call to {@link OlmMachine.importExportedRoomKeys} or\n* {@link OlmMachine.importBackedUpRoomKeys}.\n*/\nexport class RoomKeyImportResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyImportResult.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyImportResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyImportResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeyimportresult_free(ptr, 0);\n    }\n    /**\n    * The number of room keys that were imported.\n    * @returns {number}\n    */\n    get importedCount() {\n        const ret = wasm.__wbg_get_roomkeyimportresult_importedCount(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * The total number of room keys that were found in the export.\n    * @returns {number}\n    */\n    get totalCount() {\n        const ret = wasm.__wbg_get_roomkeyimportresult_totalCount(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * The keys that were imported.\n    *\n    * A Map from room id to a Map of the sender key to a Set of session ids.\n    *\n    * Typescript type: `Map<string, Map<string, Set<string>>`.\n    * @returns {Map<any, any>}\n    */\n    keys() {\n        const ret = wasm.roomkeyimportresult_keys(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst RoomKeyInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeyinfo_free(ptr >>> 0, 1));\n/**\n* Information on a room key that has been received or imported.\n*/\nexport class RoomKeyInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeyinfo_free(ptr, 0);\n    }\n    /**\n    * The {@link EncryptionAlgorithm} that this key is used for. Will be one\n    * of the `m.megolm.*` algorithms.\n    * @returns {EncryptionAlgorithm}\n    */\n    get algorithm() {\n        const ret = wasm.roomkeyinfo_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * The room where the key is used.\n    * @returns {RoomId}\n    */\n    get roomId() {\n        const ret = wasm.roomkeyinfo_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n    * The Curve25519 key of the device which initiated the session originally.\n    * @returns {Curve25519PublicKey}\n    */\n    get senderKey() {\n        const ret = wasm.roomkeyinfo_senderKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n    * The ID of the session that the key is for.\n    * @returns {string}\n    */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.roomkeyinfo_sessionId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomKeyWithheldInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeywithheldinfo_free(ptr >>> 0, 1));\n/**\n* Information on a received `m.room_key.withheld` event.\n*/\nexport class RoomKeyWithheldInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyWithheldInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyWithheldInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyWithheldInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeywithheldinfo_free(ptr, 0);\n    }\n    /**\n    * The User ID of the user that sent us the `m.room_key.withheld` message.\n    * @returns {UserId}\n    */\n    get sender() {\n        const ret = wasm.roomkeywithheldinfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n    * The encryption algorithm of the session that is being withheld.\n    * @returns {EncryptionAlgorithm}\n    */\n    get algorithm() {\n        const ret = wasm.roomkeywithheldinfo_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * The `code` from the `m.room_key.withheld` message, such as\n    * `m.unverified`.\n    * @returns {string}\n    */\n    get withheldCode() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.roomkeywithheldinfo_withheldCode(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The room ID of the session that is being withheld.\n    * @returns {RoomId}\n    */\n    get roomId() {\n        const ret = wasm.roomkeywithheldinfo_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n    * The session ID of the session that is being withheld.\n    * @returns {string}\n    */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.roomkeywithheldinfo_sessionId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomMessageRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roommessagerequest_free(ptr >>> 0, 1));\n/**\n* A customized owned request type for sending out room messages\n* ([specification]).\n*\n* [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3roomsroomidsendeventtypetxnid\n*/\nexport class RoomMessageRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomMessageRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomMessageRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomMessageRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roommessagerequest_free(ptr, 0);\n    }\n    /**\n    * The request ID.\n    * @returns {string}\n    */\n    get id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_id(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A string representing the room to send the event to.\n    * @returns {string}\n    */\n    get room_id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_body(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A string representing the transaction ID for this event.\n    *\n    * Clients should generate an ID unique across requests with the same\n    * access token; it will be used by the server to ensure idempotency of\n    * requests.\n    * @returns {string}\n    */\n    get txn_id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_version(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A string representing the type of event to be sent.\n    * @returns {string}\n    */\n    get event_type() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadKeysRequest(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A JSON-encoded string containing the message's content.\n    * @returns {string}\n    */\n    get body() {\n        const ret = wasm.__wbg_get_roommessagerequest_body(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Create a new `RoomMessageRequest`.\n    * @param {string} id\n    * @param {string} room_id\n    * @param {string} txn_id\n    * @param {string} event_type\n    * @param {string} content\n    */\n    constructor(id, room_id, txn_id, event_type, content) {\n        const ret = wasm.roommessagerequest_new(addHeapObject(id), addHeapObject(room_id), addHeapObject(txn_id), addHeapObject(event_type), addHeapObject(content));\n        this.__wbg_ptr = ret >>> 0;\n        RoomMessageRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Get its request type.\n    * @returns {RequestType}\n    */\n    get type() {\n        const ret = wasm.roommessagerequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RoomSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomsettings_free(ptr >>> 0, 1));\n/**\n* Room encryption settings which are modified by state events or user options\n*/\nexport class RoomSettings {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomSettings.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomSettingsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomsettings_free(ptr, 0);\n    }\n    /**\n    * The encryption algorithm that should be used in the room.\n    *\n    * Should be one of the members of {@link EncryptionAlgorithm}.\n    * @returns {EncryptionAlgorithm}\n    */\n    get algorithm() {\n        const ret = wasm.__wbg_get_roomsettings_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * The encryption algorithm that should be used in the room.\n    *\n    * Should be one of the members of {@link EncryptionAlgorithm}.\n    * @param {EncryptionAlgorithm} arg0\n    */\n    set algorithm(arg0) {\n        wasm.__wbg_set_roomsettings_algorithm(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Whether untrusted devices should receive room keys. If this is `false`,\n    * they will be excluded from the conversation.\n    * @returns {boolean}\n    */\n    get onlyAllowTrustedDevices() {\n        const ret = wasm.__wbg_get_roomsettings_onlyAllowTrustedDevices(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Whether untrusted devices should receive room keys. If this is `false`,\n    * they will be excluded from the conversation.\n    * @param {boolean} arg0\n    */\n    set onlyAllowTrustedDevices(arg0) {\n        wasm.__wbg_set_roomsettings_onlyAllowTrustedDevices(this.__wbg_ptr, arg0);\n    }\n    /**\n    * The maximum time, in milliseconds, that an encryption session should be\n    * used for, before it is rotated.\n    * @returns {number | undefined}\n    */\n    get sessionRotationPeriodMs() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_roomsettings_sessionRotationPeriodMs(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r2 = getDataViewMemory0().getFloat64(retptr + 8 * 1, true);\n            return r0 === 0 ? undefined : r2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The maximum time, in milliseconds, that an encryption session should be\n    * used for, before it is rotated.\n    * @param {number | undefined} [arg0]\n    */\n    set sessionRotationPeriodMs(arg0) {\n        wasm.__wbg_set_roomsettings_sessionRotationPeriodMs(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);\n    }\n    /**\n    * The maximum number of messages an encryption session should be used for,\n    * before it is rotated.\n    * @returns {number | undefined}\n    */\n    get sessionRotationPeriodMessages() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_roomsettings_sessionRotationPeriodMessages(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r2 = getDataViewMemory0().getFloat64(retptr + 8 * 1, true);\n            return r0 === 0 ? undefined : r2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The maximum number of messages an encryption session should be used for,\n    * before it is rotated.\n    * @param {number | undefined} [arg0]\n    */\n    set sessionRotationPeriodMessages(arg0) {\n        wasm.__wbg_set_roomsettings_sessionRotationPeriodMessages(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);\n    }\n    /**\n    * Create a new `RoomSettings` with default values.\n    */\n    constructor() {\n        const ret = wasm.roomsettings_new();\n        this.__wbg_ptr = ret >>> 0;\n        RoomSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst SasFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_sas_free(ptr >>> 0, 1));\n/**\n* Short Authentication String (SAS) verification.\n*/\nexport class Sas {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Sas.prototype);\n        obj.__wbg_ptr = ptr;\n        SasFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SasFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_sas_free(ptr, 0);\n    }\n    /**\n    * Get our own user ID.\n    * @returns {UserId}\n    */\n    get userId() {\n        const ret = wasm.sas_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n    * Get our own device ID.\n    * @returns {DeviceId}\n    */\n    get deviceId() {\n        const ret = wasm.sas_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n    * Get the user id of the other side.\n    * @returns {UserId}\n    */\n    get otherUserId() {\n        const ret = wasm.sas_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n    * Get the device ID of the other side.\n    * @returns {DeviceId}\n    */\n    get otherDeviceId() {\n        const ret = wasm.sas_otherDeviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n    * Get the unique ID that identifies this SAS verification flow,\n    * be either a to-device request ID or a room event ID.\n    * @returns {string}\n    */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sas_flowId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the room ID if the verification is happening inside a\n    * room.\n    * @returns {RoomId | undefined}\n    */\n    get roomId() {\n        const ret = wasm.sas_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n    * Does this verification flow support displaying emoji for the\n    * short authentication string?\n    * @returns {boolean}\n    */\n    supportsEmoji() {\n        const ret = wasm.sas_supportsEmoji(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Did this verification flow start from a verification request?\n    * @returns {boolean}\n    */\n    startedFromRequest() {\n        const ret = wasm.sas_startedFromRequest(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Is this a verification that is verifying one of our own\n    * devices?\n    * @returns {boolean}\n    */\n    isSelfVerification() {\n        const ret = wasm.sas_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Have we confirmed that the short auth string matches?\n    * @returns {boolean}\n    */\n    haveWeConfirmed() {\n        const ret = wasm.sas_haveWeConfirmed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Has the verification been accepted by both parties?\n    * @returns {boolean}\n    */\n    hasBeenAccepted() {\n        const ret = wasm.sas_hasBeenAccepted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get info about the cancellation if the verification flow has\n    * been cancelled.\n    * @returns {CancelInfo | undefined}\n    */\n    cancelInfo() {\n        const ret = wasm.sas_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n    * True if we initiated the verification flow (ie, we sent the\n    * `m.key.verification.request`).\n    * @returns {boolean}\n    */\n    weStarted() {\n        const ret = wasm.sas_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Accept the SAS verification.\n    *\n    * This does nothing (and returns `undefined`) if the verification was\n    * already accepted, otherwise it returns an `OutgoingRequest`\n    * that needs to be sent out.\n    * @returns {any}\n    */\n    accept() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sas_accept(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Confirm the SAS verification.\n    *\n    * This confirms that the short auth strings match on both sides.\n    *\n    * Does nothing if we’re not in a state where we can confirm the\n    * short auth string.\n    *\n    * Returns a `Promise` for an array of `OutgoingRequest`s.\n    * @returns {Promise<any>}\n    */\n    confirm() {\n        const ret = wasm.sas_confirm(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Cancel the verification.\n    *\n    * Returns either an `OutgoingRequest` which should be sent out, or\n    * `undefined` if the verification is already cancelled.\n    * @returns {any}\n    */\n    cancel() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sas_cancel(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Cancel the verification.\n    *\n    * This cancels the verification with given code (e.g. `m.user`).\n    *\n    * Returns either an `OutgoingRequest` which should be sent out, or\n    * `undefined` if the verification is already cancelled.\n    * @param {string} code\n    * @returns {any}\n    */\n    cancelWithCode(code) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.sas_cancelWithCode(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Has the SAS verification flow timed out?\n    * @returns {boolean}\n    */\n    timedOut() {\n        const ret = wasm.sas_timedOut(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Are we in a state where we can show the short auth string?\n    * @returns {boolean}\n    */\n    canBePresented() {\n        const ret = wasm.sas_canBePresented(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Is the SAS flow done?\n    * @returns {boolean}\n    */\n    isDone() {\n        const ret = wasm.sas_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Is the SAS flow cancelled?\n    * @returns {boolean}\n    */\n    isCancelled() {\n        const ret = wasm.sas_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get the emoji version of the short auth string.\n    *\n    * Returns `undefined` if we can't yet present the short auth string,\n    * otherwise an array of seven `Emoji` objects.\n    * @returns {(Emoji)[] | undefined}\n    */\n    emoji() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sas_emoji(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 4, 4);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the index of the emoji representing the short auth string\n    *\n    * Returns `undefined` if we can’t yet present the short auth\n    * string, otherwise seven `u8` numbers in the range from 0 to 63\n    * inclusive which can be converted to an emoji using [the\n    * relevant specification\n    * entry](https://spec.matrix.org/unstable/client-server-api/#sas-method-emoji).\n    * @returns {Uint8Array | undefined}\n    */\n    emojiIndex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sas_emojiIndex(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the decimal version of the short auth string.\n    *\n    * Returns None if we can’t yet present the short auth string,\n    * otherwise a tuple containing three 4-digit integers that\n    * represent the short auth string.\n    * @returns {Uint16Array | undefined}\n    */\n    decimals() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sas_decimals(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU16FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 2, 2);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Register a callback which will be called whenever there is an update to\n    * the request.\n    *\n    * The `callback` is called with no parameters.\n    * @param {Function} callback\n    */\n    registerChangesCallback(callback) {\n        wasm.sas_registerChangesCallback(this.__wbg_ptr, addHeapObject(callback));\n    }\n}\n\nconst SecretsBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_secretsbundle_free(ptr >>> 0, 1));\n/**\n* Struct containing the bundle of secrets to fully activate a new device for\n* end-to-end encryption.\n*/\nexport class SecretsBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SecretsBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        SecretsBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SecretsBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_secretsbundle_free(ptr, 0);\n    }\n    /**\n    * The seed of the master key encoded as unpadded base64.\n    * @returns {string}\n    */\n    get masterKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.secretsbundle_masterKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The seed of the self signing key encoded as unpadded base64.\n    * @returns {string}\n    */\n    get selfSigningKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.secretsbundle_selfSigningKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The seed of the user signing key encoded as unpadded base64.\n    * @returns {string}\n    */\n    get userSigningKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.secretsbundle_userSigningKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The bundle of the backup decryption key and backup version if any.\n    * @returns {BackupSecretsBundle | undefined}\n    */\n    get backupBundle() {\n        const ret = wasm.secretsbundle_backupBundle(this.__wbg_ptr);\n        return ret === 0 ? undefined : BackupSecretsBundle.__wrap(ret);\n    }\n    /**\n    * Serialize the [`SecretsBundle`] to a JSON object.\n    * @returns {any}\n    */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.secretsbundle_to_json(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserialize the [`SecretsBundle`] from a JSON object.\n    * @param {any} json\n    * @returns {SecretsBundle}\n    */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.secretsbundle_from_json(retptr, addHeapObject(json));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SecretsBundle.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ServerNameFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_servername_free(ptr >>> 0, 1));\n/**\n* A Matrix-spec compliant [server name].\n*\n* It consists of a host and an optional port (separated by a colon if\n* present).\n*\n* [server name]: https://spec.matrix.org/v1.2/appendices/#server-name\n*/\nexport class ServerName {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ServerName.prototype);\n        obj.__wbg_ptr = ptr;\n        ServerNameFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ServerNameFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_servername_free(ptr, 0);\n    }\n    /**\n    * Parse/validate and create a new `ServerName`.\n    * @param {string} name\n    */\n    constructor(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.servername_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            ServerNameFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the host of the server name.\n    *\n    * That is: Return the part of the server before `:<port>` or the\n    * full server name if there is no port.\n    * @returns {string}\n    */\n    get host() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.servername_host(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the port of the server name if any.\n    * @returns {number | undefined}\n    */\n    get port() {\n        const ret = wasm.servername_port(this.__wbg_ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n    * Returns true if and only if the server name is an IPv4 or IPv6\n    * address.\n    * @returns {boolean}\n    */\n    isIpLiteral() {\n        const ret = wasm.servername_isIpLiteral(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst ShieldStateFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_shieldstate_free(ptr >>> 0, 1));\n/**\n* Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]\n* for more info.\n*/\nexport class ShieldState {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ShieldState.prototype);\n        obj.__wbg_ptr = ptr;\n        ShieldStateFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ShieldStateFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_shieldstate_free(ptr, 0);\n    }\n    /**\n    * The shield color\n    * @returns {ShieldColor}\n    */\n    get color() {\n        const ret = wasm.__wbg_get_shieldstate_color(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * The shield color\n    * @param {ShieldColor} arg0\n    */\n    set color(arg0) {\n        wasm.__wbg_set_shieldstate_color(this.__wbg_ptr, arg0);\n    }\n    /**\n    * A machine-readable representation of the authenticity for a\n    * `ShieldState`.\n    * @returns {ShieldStateCode | undefined}\n    */\n    get code() {\n        const ret = wasm.__wbg_get_shieldstate_code(this.__wbg_ptr);\n        return ret === 6 ? undefined : ret;\n    }\n    /**\n    * A machine-readable representation of the authenticity for a\n    * `ShieldState`.\n    * @param {ShieldStateCode | undefined} [arg0]\n    */\n    set code(arg0) {\n        wasm.__wbg_set_shieldstate_code(this.__wbg_ptr, isLikeNone(arg0) ? 6 : arg0);\n    }\n    /**\n    * Error message that can be displayed as a tooltip\n    * @returns {string | undefined}\n    */\n    get message() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.shieldstate_message(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signature_free(ptr >>> 0, 1));\n/**\n* Represents a potentially decoded signature (but not a validated\n* one).\n*/\nexport class Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr, 0);\n    }\n    /**\n    * Get the Ed25519 signature, if this is one.\n    * @returns {Ed25519Signature | undefined}\n    */\n    get ed25519() {\n        const ret = wasm.signature_ed25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519Signature.__wrap(ret);\n    }\n    /**\n    * Convert the signature to a base64 encoded string.\n    * @returns {string}\n    */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_toBase64(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst SignatureUploadRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatureuploadrequest_free(ptr >>> 0, 1));\n/**\n* Data for a request to the `/keys/signatures/upload` API endpoint\n* ([specification]).\n*\n* Publishes cross-signing signatures for the user.\n*\n* [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keyssignaturesupload\n*/\nexport class SignatureUploadRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SignatureUploadRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureUploadRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureUploadRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatureuploadrequest_free(ptr, 0);\n    }\n    /**\n    * The request ID.\n    * Some signature upload will have to an `id` field, some won't.\n    * They have one when they are created automatically during an interactive\n    * verification, otherwise they don't.\n    * @returns {string | undefined}\n    */\n    get id() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_maybe_withheld(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A JSON-encoded string containing the payload of the request\n    *\n    * It represents the body of the HTTP request.\n    * @returns {string}\n    */\n    get body() {\n        const ret = wasm.__wbg_get_keysbackuprequest_version(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Create a new `SignatureUploadRequest`.\n    * @param {string} id\n    * @param {string} signed_keys\n    */\n    constructor(id, signed_keys) {\n        const ret = wasm.signatureuploadrequest_new(addHeapObject(id), addHeapObject(signed_keys));\n        this.__wbg_ptr = ret >>> 0;\n        SignatureUploadRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Get its request type.\n    * @returns {RequestType}\n    */\n    get type() {\n        const ret = wasm.signatureuploadrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst SignatureVerificationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatureverification_free(ptr >>> 0, 1));\n/**\n* The result of a signature verification of a signed JSON object.\n*/\nexport class SignatureVerification {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SignatureVerification.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureVerificationFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureVerificationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatureverification_free(ptr, 0);\n    }\n    /**\n    * Give the backup signature state from the current device.\n    * See SignatureState for values\n    * @returns {SignatureState}\n    */\n    get deviceState() {\n        const ret = wasm.signatureverification_deviceState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Give the backup signature state from the current user identity.\n    * See SignatureState for values\n    * @returns {SignatureState}\n    */\n    get userState() {\n        const ret = wasm.signatureverification_userState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Is the result considered to be trusted?\n    *\n    * This tells us if the result has a valid signature from any of the\n    * following:\n    *\n    * * Our own device\n    * * Our own user identity, provided the identity is trusted as well\n    * * Any of our own devices, provided the device is trusted as well\n    * @returns {boolean}\n    */\n    trusted() {\n        const ret = wasm.signatureverification_trusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst SignaturesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatures_free(ptr >>> 0, 1));\n/**\n* A collection of `Signature`.\n*/\nexport class Signatures {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signatures.prototype);\n        obj.__wbg_ptr = ptr;\n        SignaturesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignaturesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatures_free(ptr, 0);\n    }\n    /**\n    * Creates a new, empty, signatures collection.\n    */\n    constructor() {\n        const ret = wasm.signatures_new();\n        this.__wbg_ptr = ret >>> 0;\n        SignaturesFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Add the given signature from the given signer and the given key ID to\n    * the collection.\n    * @param {UserId} signer\n    * @param {DeviceKeyId} key_id\n    * @param {Ed25519Signature} signature\n    * @returns {MaybeSignature | undefined}\n    */\n    addSignature(signer, key_id, signature) {\n        _assertClass(signer, UserId);\n        _assertClass(key_id, DeviceKeyId);\n        _assertClass(signature, Ed25519Signature);\n        const ret = wasm.signatures_addSignature(this.__wbg_ptr, signer.__wbg_ptr, key_id.__wbg_ptr, signature.__wbg_ptr);\n        return ret === 0 ? undefined : MaybeSignature.__wrap(ret);\n    }\n    /**\n    * Try to find an Ed25519 signature from the given signer with\n    * the given key ID.\n    * @param {UserId} signer\n    * @param {DeviceKeyId} key_id\n    * @returns {Ed25519Signature | undefined}\n    */\n    getSignature(signer, key_id) {\n        _assertClass(signer, UserId);\n        _assertClass(key_id, DeviceKeyId);\n        const ret = wasm.signatures_getSignature(this.__wbg_ptr, signer.__wbg_ptr, key_id.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519Signature.__wrap(ret);\n    }\n    /**\n    * Get the map of signatures that belong to the given user.\n    * @param {UserId} signer\n    * @returns {Map<any, any> | undefined}\n    */\n    get(signer) {\n        _assertClass(signer, UserId);\n        const ret = wasm.signatures_get(this.__wbg_ptr, signer.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Remove all the signatures we currently hold.\n    */\n    clear() {\n        wasm.signatures_clear(this.__wbg_ptr);\n    }\n    /**\n    * Do we hold any signatures or is our collection completely\n    * empty.\n    * @returns {boolean}\n    */\n    isEmpty() {\n        const ret = wasm.signatures_isEmpty(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * How many signatures do we currently hold.\n    * @returns {number}\n    */\n    get count() {\n        const ret = wasm.signatures_count(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Get the json with all signatures\n    * @returns {string}\n    */\n    asJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signatures_asJSON(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst StoreHandleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_storehandle_free(ptr >>> 0, 1));\n/**\n* A struct containing an open connection to a CryptoStore.\n*\n* Opening the CryptoStore can take some time, due to the PBKDF calculation\n* involved, so if multiple operations are being done on the same store, it is\n* more efficient to open it once.\n*/\nexport class StoreHandle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(StoreHandle.prototype);\n        obj.__wbg_ptr = ptr;\n        StoreHandleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        StoreHandleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_storehandle_free(ptr, 0);\n    }\n    /**\n    * Open a crypto store.\n    *\n    * The created store will be based on IndexedDB if a `store_name` is\n    * provided; otherwise it will be based on a memory store and once the\n    * objects is dropped, the keys will be lost.\n    *\n    * # Arguments\n    *\n    * * `store_name` - The name that should be used to open the IndexedDB\n    *   based database. If this isn't provided, a memory-only store will be\n    *   used. *Note* the memory-only store will lose your E2EE keys when the\n    *   `StoreHandle` gets dropped.\n    *\n    * * `store_passphrase` - The passphrase that should be used to encrypt the\n    *   store, for IndexedDB-based stores\n    * @param {string | undefined} [store_name]\n    * @param {string | undefined} [store_passphrase]\n    * @returns {Promise<StoreHandle>}\n    */\n    static open(store_name, store_passphrase) {\n        var ptr0 = isLikeNone(store_name) ? 0 : passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(store_passphrase) ? 0 : passStringToWasm0(store_passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.storehandle_open(ptr0, len0, ptr1, len1);\n        return takeObject(ret);\n    }\n    /**\n    * Open a crypto store based on IndexedDB, using the given key for\n    * encryption.\n    *\n    * # Arguments\n    *\n    * * `store_name` - The name that should be used to open the IndexedDB\n    *   based database.\n    *\n    * * `store_key` - The key that should be used to encrypt the store, for\n    *   IndexedDB-based stores. Must be a 32-byte array.\n    * @param {string} store_name\n    * @param {Uint8Array} store_key\n    * @returns {Promise<StoreHandle>}\n    */\n    static openWithKey(store_name, store_key) {\n        const ptr0 = passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(store_key, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.storehandle_openWithKey(ptr0, len0, ptr1, len1);\n        return takeObject(ret);\n    }\n}\n\nconst ToDeviceRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_todevicerequest_free(ptr >>> 0, 1));\n/**\n* Data for a request to the `/sendToDevice` API endpoint\n* ([specification]).\n*\n* Send an event to a single device or to a group of devices.\n*\n* [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3sendtodeviceeventtypetxnid\n*/\nexport class ToDeviceRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ToDeviceRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        ToDeviceRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ToDeviceRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_todevicerequest_free(ptr, 0);\n    }\n    /**\n    * The request ID.\n    * For to-device request this would be the same value as `txn_id`. It is\n    * exposed also as `id` so that the js bindings are consistent with the\n    * other request types by using this field to mark as sent.\n    * @returns {string}\n    */\n    get id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_id(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A string representing the type of event being sent to each devices.\n    * @returns {string}\n    */\n    get event_type() {\n        const ret = wasm.__wbg_get_keysbackuprequest_body(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A string representing a request identifier unique to the access token\n    * used to send the request.\n    * @returns {string}\n    */\n    get txn_id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_version(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * A JSON-encoded string containing the rest of the payload: `messages`.\n    *\n    * It represents the body of the HTTP request.\n    * @returns {string}\n    */\n    get body() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadKeysRequest(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Create a new `ToDeviceRequest`.\n    * @param {string} id\n    * @param {string} event_type\n    * @param {string} txn_id\n    * @param {string} body\n    */\n    constructor(id, event_type, txn_id, body) {\n        const ret = wasm.todevicerequest_new(addHeapObject(id), addHeapObject(event_type), addHeapObject(txn_id), addHeapObject(body));\n        this.__wbg_ptr = ret >>> 0;\n        ToDeviceRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Get its request type.\n    * @returns {RequestType}\n    */\n    get type() {\n        const ret = wasm.todevicerequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst TracingFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_tracing_free(ptr >>> 0, 1));\n/**\n* Type to install and to manipulate the tracing layer.\n*/\nexport class Tracing {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TracingFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_tracing_free(ptr, 0);\n    }\n    /**\n    * Check whether the `tracing` feature has been enabled.\n    *\n    * @deprecated: `tracing` is now always enabled.\n    * @returns {boolean}\n    */\n    static isAvailable() {\n        const ret = wasm.tracing_isAvailable();\n        return ret !== 0;\n    }\n    /**\n    * Install the tracing layer.\n    * @param {LoggerLevel} min_level\n    */\n    constructor(min_level) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.tracing_new(retptr, min_level);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            TracingFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Re-define the minimum logger level.\n    * @param {LoggerLevel} min_level\n    */\n    set minLevel(min_level) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.tracing_set_minLevel(retptr, this.__wbg_ptr, min_level);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Turn the logger on, i.e. it emits logs again if it was turned\n    * off.\n    */\n    turnOn() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.tracing_turnOn(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Turn the logger off, i.e. it no longer emits logs.\n    */\n    turnOff() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.tracing_turnOff(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst UploadSigningKeysRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_uploadsigningkeysrequest_free(ptr >>> 0, 1));\n/**\n* Other Requests *\n* Request that will publish a cross signing identity.\n*\n* This uploads the public cross signing key triplet.\n*/\nexport class UploadSigningKeysRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UploadSigningKeysRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        UploadSigningKeysRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UploadSigningKeysRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_uploadsigningkeysrequest_free(ptr, 0);\n    }\n    /**\n    * A JSON-encoded string containing the rest of the payload: `master_key`,\n    * `self_signing_key`, `user_signing_key`.\n    *\n    * It represents the body of the HTTP request.\n    * @returns {string}\n    */\n    get body() {\n        const ret = wasm.__wbg_get_putdehydrateddevicerequest_body(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Create a new `UploadSigningKeysRequest`.\n    * @param {string} body\n    */\n    constructor(body) {\n        const ret = wasm.putdehydrateddevicerequest_new(addHeapObject(body));\n        this.__wbg_ptr = ret >>> 0;\n        UploadSigningKeysRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst UserDevicesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_userdevices_free(ptr >>> 0, 1));\n/**\n* A read only view over all devices belonging to a user.\n*/\nexport class UserDevices {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UserDevices.prototype);\n        obj.__wbg_ptr = ptr;\n        UserDevicesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UserDevicesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_userdevices_free(ptr, 0);\n    }\n    /**\n    * Get the specific device with the given device ID.\n    * @param {DeviceId} device_id\n    * @returns {Device | undefined}\n    */\n    get(device_id) {\n        _assertClass(device_id, DeviceId);\n        const ret = wasm.userdevices_get(this.__wbg_ptr, device_id.__wbg_ptr);\n        return ret === 0 ? undefined : Device.__wrap(ret);\n    }\n    /**\n    * Returns true if there is at least one devices of this user\n    * that is considered to be verified, false otherwise.\n    *\n    * This won't consider your own device as verified, as your own\n    * device is always implicitly verified.\n    * @returns {boolean}\n    */\n    isAnyVerified() {\n        const ret = wasm.userdevices_isAnyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Array over all the device IDs of the user devices.\n    * @returns {Array<any>}\n    */\n    keys() {\n        const ret = wasm.userdevices_keys(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Iterator over all the devices of the user devices.\n    * @returns {Array<any>}\n    */\n    devices() {\n        const ret = wasm.userdevices_devices(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst UserIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_userid_free(ptr >>> 0, 1));\n/**\n* A Matrix [user ID].\n*\n* [user ID]: https://spec.matrix.org/v1.2/appendices/#user-identifiers\n*/\nexport class UserId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UserId.prototype);\n        obj.__wbg_ptr = ptr;\n        UserIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof UserId)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UserIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_userid_free(ptr, 0);\n    }\n    /**\n    * Parse/validate and create a new `UserId`.\n    * @param {string} id\n    */\n    constructor(id) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.userid_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            UserIdFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the user's localpart.\n    * @returns {string}\n    */\n    get localpart() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.userid_localpart(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the server name of the user ID.\n    * @returns {ServerName}\n    */\n    get serverName() {\n        const ret = wasm.userid_serverName(this.__wbg_ptr);\n        return ServerName.__wrap(ret);\n    }\n    /**\n    * Whether this user ID is a historical one.\n    *\n    * A historical user ID is one that doesn't conform to the latest\n    * specification of the user ID grammar but is still accepted\n    * because it was previously allowed.\n    * @returns {boolean}\n    */\n    isHistorical() {\n        const ret = wasm.userid_isHistorical(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Return the user ID as a string.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.deviceid_toString(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create a clone of this `UserId`.\n    *\n    * This can be useful when passing a `UserId` instance to methods such as\n    * {@link OlmMachine.updateTrackedUsers} which destroy the instance.\n    * @returns {UserId}\n    */\n    clone() {\n        const ret = wasm.userid_clone(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n}\n\nconst VerificationRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_verificationrequest_free(ptr >>> 0, 1));\n/**\n* An object controlling key verification requests.\n*\n* Interactive verification flows usually start with a verification\n* request, this object lets you send and reply to such a\n* verification request.\n*\n* After the initial handshake the verification flow transitions into\n* one of the verification methods.\n*/\nexport class VerificationRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerificationRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        VerificationRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VerificationRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verificationrequest_free(ptr, 0);\n    }\n    /**\n    * Create an event content that can be sent as a room event to\n    * request verification from the other side. This should be used\n    * only for verifications of other users and it should be sent to\n    * a room we consider to be a DM with the other user.\n    * @param {UserId} own_user_id\n    * @param {DeviceId} own_device_id\n    * @param {UserId} other_user_id\n    * @param {any[] | undefined} [methods]\n    * @returns {string}\n    */\n    static request(own_user_id, own_device_id, other_user_id, methods) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(own_user_id, UserId);\n            _assertClass(own_device_id, DeviceId);\n            _assertClass(other_user_id, UserId);\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.verificationrequest_request(retptr, own_user_id.__wbg_ptr, own_device_id.__wbg_ptr, other_user_id.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n    * Our own user id.\n    * @returns {UserId}\n    */\n    get ownUserId() {\n        const ret = wasm.verificationrequest_ownUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n    * The ID of the other user that is participating in this\n    * verification request.\n    * @returns {UserId}\n    */\n    get otherUserId() {\n        const ret = wasm.verificationrequest_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n    * The ID of the other device that is participating in this\n    * verification.\n    * @returns {DeviceId | undefined}\n    */\n    get otherDeviceId() {\n        const ret = wasm.verificationrequest_otherDeviceId(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n    * Get the room ID if the verification is happening inside a\n    * room.\n    * @returns {RoomId | undefined}\n    */\n    get roomId() {\n        const ret = wasm.verificationrequest_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n    * Get info about the cancellation if the verification request\n    * has been cancelled.\n    * @returns {CancelInfo | undefined}\n    */\n    get cancelInfo() {\n        const ret = wasm.verificationrequest_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n    * Has the verification request been answered by another device?\n    * @returns {boolean}\n    */\n    isPassive() {\n        const ret = wasm.verificationrequest_isPassive(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Is the verification request ready to start a verification flow?\n    * @returns {boolean}\n    */\n    isReady() {\n        const ret = wasm.verificationrequest_isReady(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Has the verification flow timed out?\n    * @returns {boolean}\n    */\n    timedOut() {\n        const ret = wasm.verificationrequest_timedOut(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * The number of milliseconds remaining before this verification flow times\n    * out.\n    *\n    * Returns zero if the time has already passed.\n    * @returns {number}\n    */\n    timeRemainingMillis() {\n        const ret = wasm.verificationrequest_timeRemainingMillis(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Get the supported verification methods of the other side.\n    *\n    * Will be present only if the other side requested the\n    * verification or if we’re in the ready state.\n    *\n    * # Returns\n    *\n    * `undefined` if we do not yet know the supported methods; otherwise, an\n    * array of `VerificationMethod`s.\n    * @returns {any[] | undefined}\n    */\n    get theirSupportedMethods() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verificationrequest_theirSupportedMethods(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 4, 4);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get our own supported verification methods that we advertised.\n    *\n    * Will be present only we requested the verification or if we’re\n    * in the ready state.\n    * @returns {any[] | undefined}\n    */\n    get ourSupportedMethods() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verificationrequest_ourSupportedMethods(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 4, 4);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the unique ID of this verification request.\n    * @returns {string}\n    */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verificationrequest_flowId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Is this a verification that is verifying one of our own\n    * devices?\n    * @returns {boolean}\n    */\n    isSelfVerification() {\n        const ret = wasm.verificationrequest_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Did we initiate the verification request?\n    * @returns {boolean}\n    */\n    weStarted() {\n        const ret = wasm.verificationrequest_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Has the verification flow that was started with this request\n    * finished?\n    * @returns {boolean}\n    */\n    isDone() {\n        const ret = wasm.verificationrequest_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get the current phase of this request.\n    *\n    * Returns a `VerificationRequestPhase`.\n    * @returns {VerificationRequestPhase}\n    */\n    phase() {\n        const ret = wasm.verificationrequest_phase(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * If this request has transitioned into a concrete verification\n    * flow (and not yet been completed or cancelled), returns a `Verification`\n    * object.\n    *\n    * Returns: a `Sas`, a `Qr`, or `undefined`.\n    * @returns {any}\n    */\n    getVerification() {\n        const ret = wasm.verificationrequest_getVerification(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Register a callback which will be called whenever there is an update to\n    * the request.\n    *\n    * The `callback` is called with no parameters.\n    * @param {Function} callback\n    */\n    registerChangesCallback(callback) {\n        wasm.verificationrequest_registerChangesCallback(this.__wbg_ptr, addHeapObject(callback));\n    }\n    /**\n    * Has the verification flow that was started with this request\n    * been cancelled?\n    * @returns {boolean}\n    */\n    isCancelled() {\n        const ret = wasm.verificationrequest_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Accept the verification request signaling that our client\n    * supports the given verification methods.\n    *\n    * `methods` represents the methods that we should advertise as\n    * supported by us.\n    *\n    * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n    * or `undefined`.\n    * @param {any[]} methods\n    * @returns {any}\n    */\n    acceptWithMethods(methods) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verificationrequest_acceptWithMethods(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Accept the verification request.\n    *\n    * This method will accept the request and signal that it\n    * supports the `m.sas.v1`, the `m.qr_code.show.v1`, and\n    * `m.reciprocate.v1` method.\n    *\n    * `m.qr_code.show.v1` will only be signaled if the `qrcode`\n    * feature is enabled. This feature is disabled by default. If\n    * it's enabled and QR code scanning should be supported or QR\n    * code showing shouldn't be supported the `accept_with_methods`\n    * method should be used instead.\n    *\n    * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n    * or `undefined`.\n    * @returns {any}\n    */\n    accept() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verificationrequest_accept(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Cancel the verification request.\n    *\n    * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n    * or `undefined`.\n    * @returns {any}\n    */\n    cancel() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verificationrequest_cancel(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Transition from this verification request into a SAS verification flow.\n    *\n    * Returns `Promise<[Sas, RoomMessageRequest|ToDeviceRequest] | undefined>`\n    * @returns {Promise<any>}\n    */\n    startSas() {\n        const ret = wasm.verificationrequest_startSas(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Generate a QR code that can be used by another client to start\n    * a QR code based verification.\n    *\n    * Returns a `Qr` or `undefined`.\n    * @returns {Promise<any>}\n    */\n    generateQrCode() {\n        const ret = wasm.verificationrequest_generateQrCode(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Start a QR code verification by providing a scanned QR code\n    * for this verification flow.\n    * @param {QrCodeScan} data\n    * @returns {Promise<any>}\n    */\n    scanQrCode(data) {\n        _assertClass(data, QrCodeScan);\n        const ret = wasm.verificationrequest_scanQrCode(this.__wbg_ptr, data.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst VersionsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_versions_free(ptr >>> 0, 1));\n/**\n* Object containing the versions of the Rust libraries we are using.\n*/\nexport class Versions {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Versions.prototype);\n        obj.__wbg_ptr = ptr;\n        VersionsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VersionsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_versions_free(ptr, 0);\n    }\n    /**\n    * The version of the vodozemac crate.\n    * @returns {string}\n    */\n    get vodozemac() {\n        const ret = wasm.__wbg_get_keysbackuprequest_id(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * The version of the matrix-sdk-crypto crate.\n    * @returns {string}\n    */\n    get matrix_sdk_crypto() {\n        const ret = wasm.__wbg_get_keysbackuprequest_body(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * The Git commit hash of the crate's source tree at build time.\n    * @returns {string}\n    */\n    get git_sha() {\n        const ret = wasm.__wbg_get_keysbackuprequest_version(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * The build-time output of the `git describe` command of the source tree\n    * of crate.\n    * @returns {string}\n    */\n    get git_description() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadKeysRequest(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nexport function __wbindgen_error_new(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_length_ae22078168b726f5(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nexport function __wbg_iterator_888179a48810a9fe() {\n    const ret = Symbol.iterator;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_from_0791d740a9d37830(arg0) {\n    const ret = Array.from(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_at_5fa66069579ac579(arg0, arg1) {\n    const ret = getObject(arg0).at(arg1);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_is_undefined(arg0) {\n    const ret = getObject(arg0) === undefined;\n    return ret;\n};\n\nexport function __wbindgen_in(arg0, arg1) {\n    const ret = getObject(arg0) in getObject(arg1);\n    return ret;\n};\n\nexport function __wbindgen_number_get(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = typeof(obj) === 'number' ? obj : undefined;\n    getDataViewMemory0().setFloat64(arg0 + 8 * 1, isLikeNone(ret) ? 0 : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_boolean_get(arg0) {\n    const v = getObject(arg0);\n    const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n    return ret;\n};\n\nexport function __wbindgen_string_get(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbindgen_is_bigint(arg0) {\n    const ret = typeof(getObject(arg0)) === 'bigint';\n    return ret;\n};\n\nexport function __wbindgen_is_object(arg0) {\n    const val = getObject(arg0);\n    const ret = typeof(val) === 'object' && val !== null;\n    return ret;\n};\n\nexport function __wbindgen_number_new(arg0) {\n    const ret = arg0;\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_try_into_number(arg0) {\n    let result;\ntry { result = +getObject(arg0) } catch (e) { result = e }\nconst ret = result;\nreturn addHeapObject(ret);\n};\n\nexport function __wbg_userid_unwrap(arg0) {\n    const ret = UserId.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nexport function __wbindgen_bigint_from_i64(arg0) {\n    const ret = arg0;\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_bigint_from_u64(arg0) {\n    const ret = BigInt.asUintN(64, arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_setTimeout_7d81d052875b0f4f() { return handleError(function (arg0, arg1) {\n    const ret = setTimeout(getObject(arg0), arg1);\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_transaction_0549f2d854da77a6(arg0) {\n    const ret = getObject(arg0).transaction;\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n};\n\nexport function __wbg_createIndex_8420e89baab0736f() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = getObject(arg0).createIndex(getStringFromWasm0(arg1, arg2), getObject(arg3));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_objectStoreNames_2fc72464aff4baed(arg0) {\n    const ret = getObject(arg0).objectStoreNames;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_new_525245e2b9901204() {\n    const ret = new Object();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_setunique_6f46c3f803001492(arg0, arg1) {\n    getObject(arg0).unique = arg1 !== 0;\n};\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_add_4d2791d6295ba9ec() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).add(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_getwithrefkey_edc2c8960f0f1191(arg0, arg1) {\n    const ret = getObject(arg0)[getObject(arg1)];\n    return addHeapObject(ret);\n};\n\nexport function __wbg_set_f975102236d3c502(arg0, arg1, arg2) {\n    getObject(arg0)[takeObject(arg1)] = takeObject(arg2);\n};\n\nexport function __wbg_version_85aa50b42026873e(arg0) {\n    const ret = getObject(arg0).version;\n    return ret;\n};\n\nexport function __wbg_close_7bef29d1d5feecdb(arg0) {\n    getObject(arg0).close();\n};\n\nexport function __wbindgen_object_clone_ref(arg0) {\n    const ret = getObject(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_is_array(arg0) {\n    const ret = Array.isArray(getObject(arg0));\n    return ret;\n};\n\nexport function __wbg_parse_52202f117ec9ecfa() { return handleError(function (arg0, arg1) {\n    const ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_dehydrateddevice_new(arg0) {\n    const ret = DehydratedDevice.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_new_b85e72ed1bfd57f9(arg0, arg1) {\n    try {\n        var state0 = {a: arg0, b: arg1};\n        var cb0 = (arg0, arg1) => {\n            const a = state0.a;\n            state0.a = 0;\n            try {\n                return __wbg_adapter_748(a, state0.b, arg0, arg1);\n            } finally {\n                state0.a = a;\n            }\n        };\n        const ret = new Promise(cb0);\n        return addHeapObject(ret);\n    } finally {\n        state0.a = state0.b = 0;\n    }\n};\n\nexport function __wbg_new_0d215095f6a3600f(arg0) {\n    const ret = new Set(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_roomsettings_new(arg0) {\n    const ret = RoomSettings.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_putdehydrateddevicerequest_new(arg0) {\n    const ret = PutDehydratedDeviceRequest.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_pickledsession_unwrap(arg0) {\n    const ret = PickledSession.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nexport function __wbg_rehydrateddevice_new(arg0) {\n    const ret = RehydratedDevice.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_pickledinboundgroupsession_unwrap(arg0) {\n    const ret = PickledInboundGroupSession.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nexport function __wbg_secretsbundle_new(arg0) {\n    const ret = SecretsBundle.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_cb_drop(arg0) {\n    const obj = takeObject(arg0).original;\n    if (obj.cnt-- == 1) {\n        obj.a = 0;\n        return true;\n    }\n    const ret = false;\n    return ret;\n};\n\nexport function __wbg_setonblocked_554fa1541fe66a16(arg0, arg1) {\n    getObject(arg0).onblocked = getObject(arg1);\n};\n\nexport function __wbg_clearTimeout_541ac0980ffcef74(arg0) {\n    const ret = clearTimeout(takeObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nexport function __wbg_setonversionchange_b1a0928064e9b758(arg0, arg1) {\n    getObject(arg0).onversionchange = getObject(arg1);\n};\n\nexport function __wbg_new_a220cf903aa02ca2() {\n    const ret = new Array();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_roomkeyinfo_new(arg0) {\n    const ret = RoomKeyInfo.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_push_37c89022f34c01ca(arg0, arg1) {\n    const ret = getObject(arg0).push(getObject(arg1));\n    return ret;\n};\n\nexport function __wbg_roomkeyimportresult_new(arg0) {\n    const ret = RoomKeyImportResult.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_userid_new(arg0) {\n    const ret = UserId.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_crosssigningstatus_new(arg0) {\n    const ret = CrossSigningStatus.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_jsval_eq(arg0, arg1) {\n    const ret = getObject(arg0) === getObject(arg1);\n    return ret;\n};\n\nexport function __wbg_String_88810dfeb4021902(arg0, arg1) {\n    const ret = String(getObject(arg1));\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_storehandle_new(arg0) {\n    const ret = StoreHandle.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_encryptioninfo_new(arg0) {\n    const ret = EncryptionInfo.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_userdevices_new(arg0) {\n    const ret = UserDevices.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_crosssigningbootstraprequests_new(arg0) {\n    const ret = CrossSigningBootstrapRequests.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_ownuseridentity_new(arg0) {\n    const ret = OwnUserIdentity.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_otheruseridentity_new(arg0) {\n    const ret = OtherUserIdentity.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_signatureverification_new(arg0) {\n    const ret = SignatureVerification.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_keysbackuprequest_new(arg0) {\n    const ret = KeysBackupRequest.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_inboundgroupsession_new(arg0) {\n    const ret = InboundGroupSession.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_backupkeys_new(arg0) {\n    const ret = BackupKeys.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_signatures_new(arg0) {\n    const ret = Signatures.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_roomkeycounts_new(arg0) {\n    const ret = RoomKeyCounts.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_crosssigningkeyexport_new(arg0) {\n    const ret = CrossSigningKeyExport.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_set_673dda6c73d19609(arg0, arg1, arg2) {\n    getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n};\n\nexport function __wbg_call_7de908392845a9a5() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2), getObject(arg3), getObject(arg4));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_decryptedroomevent_new(arg0) {\n    const ret = DecryptedRoomEvent.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_megolmdecryptionerror_new(arg0) {\n    const ret = MegolmDecryptionError.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_getTime_91058879093a1589(arg0) {\n    const ret = getObject(arg0).getTime();\n    return ret;\n};\n\nexport function __wbg_roomkeywithheldinfo_new(arg0) {\n    const ret = RoomKeyWithheldInfo.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_then_876bb3c633745cc6(arg0, arg1, arg2) {\n    const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_keysuploadrequest_new(arg0) {\n    const ret = KeysUploadRequest.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_keysqueryrequest_new(arg0) {\n    const ret = KeysQueryRequest.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_device_new(arg0) {\n    const ret = Device.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_new_8608a2b51a5f6737() {\n    const ret = new Map();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_devicekeyid_new(arg0) {\n    const ret = DeviceKeyId.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_devicekey_new(arg0) {\n    const ret = DeviceKey.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_set_49185437f0ab06f8(arg0, arg1, arg2) {\n    const ret = getObject(arg0).set(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_deviceid_new(arg0) {\n    const ret = DeviceId.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_new_7982fb43cfca37ae(arg0) {\n    const ret = new Date(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_olmmachine_new(arg0) {\n    const ret = OlmMachine.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_entries_2f5ddf03b53c6730(arg0) {\n    const ret = getObject(arg0).entries();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_values_fb3a48a5a8c681f6(arg0) {\n    const ret = getObject(arg0).values();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_get_3baa728f9d58d3f6(arg0, arg1) {\n    const ret = getObject(arg0)[arg1 >>> 0];\n    return addHeapObject(ret);\n};\n\nexport function __wbg_roomid_unwrap(arg0) {\n    const ret = RoomId.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nexport function __wbindgen_is_string(arg0) {\n    const ret = typeof(getObject(arg0)) === 'string';\n    return ret;\n};\n\nexport function __wbg_getwithrefkey_5e6d9547403deab8(arg0, arg1) {\n    const ret = getObject(arg0)[getObject(arg1)];\n    return addHeapObject(ret);\n};\n\nexport function __wbg_keysclaimrequest_new(arg0) {\n    const ret = KeysClaimRequest.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_todevicerequest_new(arg0) {\n    const ret = ToDeviceRequest.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_signatureuploadrequest_new(arg0) {\n    const ret = SignatureUploadRequest.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_roommessagerequest_new(arg0) {\n    const ret = RoomMessageRequest.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_set_841ac57cff3d672b(arg0, arg1, arg2) {\n    getObject(arg0)[takeObject(arg1)] = takeObject(arg2);\n};\n\nexport function __wbg_maybesignature_new(arg0) {\n    const ret = MaybeSignature.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_sas_new(arg0) {\n    const ret = Sas.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_emoji_new(arg0) {\n    const ret = Emoji.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_qr_new(arg0) {\n    const ret = Qr.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_newwithlength_dfb862b757677cfc(arg0) {\n    const ret = new Uint8ClampedArray(arg0 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_length_701cb851fad911df(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nexport function __wbindgen_memory() {\n    const ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_buffer_b7b08af79b0b0974(arg0) {\n    const ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_new_e36b5ccdd852e18d(arg0) {\n    const ret = new Uint8ClampedArray(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_set_b68cc6ecd92a1101(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nexport function __wbg_verificationrequest_new(arg0) {\n    const ret = VerificationRequest.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_new_abda76e883ba8a5f() {\n    const ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_stack_658279fe44541cf6(arg0, arg1) {\n    const ret = getObject(arg1).stack;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_error_f851667af71bcfc6(arg0, arg1) {\n    let deferred0_0;\n    let deferred0_1;\n    try {\n        deferred0_0 = arg0;\n        deferred0_1 = arg1;\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n    }\n};\n\nexport function __wbg_subarray_7c2e3576afe181d1(arg0, arg1, arg2) {\n    const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_getRandomValues_3aa56aa6edec874c() { return handleError(function (arg0, arg1) {\n    getObject(arg0).getRandomValues(getObject(arg1));\n}, arguments) };\n\nexport function __wbg_newwithbyteoffsetandlength_8a2cb9ca96b27ec9(arg0, arg1, arg2) {\n    const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_randomFillSync_5c9c955aa56b6049() { return handleError(function (arg0, arg1) {\n    getObject(arg0).randomFillSync(takeObject(arg1));\n}, arguments) };\n\nexport function __wbg_crypto_1d1f22824a6a080c(arg0) {\n    const ret = getObject(arg0).crypto;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_process_4a72847cc503995b(arg0) {\n    const ret = getObject(arg0).process;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_versions_f686565e586dd935(arg0) {\n    const ret = getObject(arg0).versions;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_node_104a2ff8d6ea03a2(arg0) {\n    const ret = getObject(arg0).node;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_require_cca90b1a94a0255b() { return handleError(function () {\n    const ret = module.require;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_msCrypto_eb05e62b530a1508(arg0) {\n    const ret = getObject(arg0).msCrypto;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_newwithlength_ec548f448387c968(arg0) {\n    const ret = new Uint8Array(arg0 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_open_a89af1720976a433() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).open(getStringFromWasm0(arg1, arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_Window_6a2291ac118902bc(arg0) {\n    const ret = getObject(arg0).Window;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_indexedDB_1f9ee79bddf7d011() { return handleError(function (arg0) {\n    const ret = getObject(arg0).indexedDB;\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_WorkerGlobalScope_e82ddd4027f19bb8(arg0) {\n    const ret = getObject(arg0).WorkerGlobalScope;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_indexedDB_9d299adf9543d0c3() { return handleError(function (arg0) {\n    const ret = getObject(arg0).indexedDB;\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_global_12bfcc55465b53ad(arg0) {\n    const ret = getObject(arg0).global;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_indexedDB_59bf81be2abc635d() { return handleError(function (arg0) {\n    const ret = getObject(arg0).indexedDB;\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_open_e8f45f3526088828() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = getObject(arg0).open(getStringFromWasm0(arg1, arg2), arg3 >>> 0);\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_setoncomplete_a9e0ec1d6568a6d9(arg0, arg1) {\n    getObject(arg0).oncomplete = getObject(arg1);\n};\n\nexport function __wbg_setonerror_00500154a07e987d(arg0, arg1) {\n    getObject(arg0).onerror = getObject(arg1);\n};\n\nexport function __wbg_setonabort_aedc77f0151af20c(arg0, arg1) {\n    getObject(arg0).onabort = getObject(arg1);\n};\n\nexport function __wbg_transaction_5a1543682e4ad921() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = getObject(arg0).transaction(getStringFromWasm0(arg1, arg2), [\"readonly\",\"readwrite\",\"versionchange\",\"readwriteflush\",\"cleanup\",][arg3]);\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_createObjectStore_190c19a0bae3fedb() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).createObjectStore(getStringFromWasm0(arg1, arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_clear_324ffb9a7c18a41c() { return handleError(function (arg0) {\n    const ret = getObject(arg0).clear();\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_createIndex_6d4c3e20ee0f1066() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = getObject(arg0).createIndex(getStringFromWasm0(arg1, arg2), getObject(arg3), getObject(arg4));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_newwithmessage_7beb619ae81d7cb1() { return handleError(function (arg0, arg1) {\n    const ret = new DOMException(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_objectStore_80724f9f6d33ab5b() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).objectStore(getStringFromWasm0(arg1, arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_readyState_80e6a6c7d538fa33(arg0) {\n    const ret = getObject(arg0).readyState;\n    return {\"pending\":0,\"done\":1,}[ret] ?? 2;\n};\n\nexport function __wbindgen_is_null(arg0) {\n    const ret = getObject(arg0) === null;\n    return ret;\n};\n\nexport function __wbg_item_5a55aebc84c52f29(arg0, arg1, arg2) {\n    const ret = getObject(arg1).item(arg2 >>> 0);\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_openCursor_728ede41c2e2d7ec() { return handleError(function (arg0) {\n    const ret = getObject(arg0).openCursor();\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbindgen_is_function(arg0) {\n    const ret = typeof(getObject(arg0)) === 'function';\n    return ret;\n};\n\nexport function __wbg_call_1084a111329e68ce() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).call(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_next_f9cb570345655b9a() { return handleError(function (arg0) {\n    const ret = getObject(arg0).next();\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_done_bfda7aa8f252b39f(arg0) {\n    const ret = getObject(arg0).done;\n    return ret;\n};\n\nexport function __wbg_value_6d39332ab4788d86(arg0) {\n    const ret = getObject(arg0).value;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_get_224d16597dbbfd96() { return handleError(function (arg0, arg1) {\n    const ret = Reflect.get(getObject(arg0), getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_next_de3e9db4440638b2(arg0) {\n    const ret = getObject(arg0).next;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_self_3093d5d1f7bcb682() { return handleError(function () {\n    const ret = self.self;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_window_3bcfc4d31bc012f8() { return handleError(function () {\n    const ret = window.window;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_globalThis_86b222e13bdf32ed() { return handleError(function () {\n    const ret = globalThis.globalThis;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_global_e5a3fe56f8be9485() { return handleError(function () {\n    const ret = global.global;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_newnoargs_76313bd6ff35d0f2(arg0, arg1) {\n    const ret = new Function(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_isArray_8364a5371e9737d8(arg0) {\n    const ret = Array.isArray(getObject(arg0));\n    return ret;\n};\n\nexport function __wbg_instanceof_ArrayBuffer_61dfc3198373c902(arg0) {\n    let result;\n    try {\n        result = getObject(arg0) instanceof ArrayBuffer;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_call_89af060b4e1523f2() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_call_c6fe275aaa60da79() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2), getObject(arg3));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_instanceof_Map_763ce0e95960d55e(arg0) {\n    let result;\n    try {\n        result = getObject(arg0) instanceof Map;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_isSafeInteger_7f1ed56200d90674(arg0) {\n    const ret = Number.isSafeInteger(getObject(arg0));\n    return ret;\n};\n\nexport function __wbg_entries_7a0e06255456ebcd(arg0) {\n    const ret = Object.entries(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_add_653baf3821a15934(arg0, arg1) {\n    const ret = getObject(arg0).add(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_stringify_bbf45426c92a6bf5() { return handleError(function (arg0) {\n    const ret = JSON.stringify(getObject(arg0));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_instanceof_Promise_ae8c7ffdec83f2ae(arg0) {\n    let result;\n    try {\n        result = getObject(arg0) instanceof Promise;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_new_ea1883e1e5e86686(arg0) {\n    const ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_set_d1e79e2388520f18(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nexport function __wbg_length_8339fcf5d8ecd12e(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nexport function __wbg_newwithbyteoffsetandlength_94126d2ad22a595c(arg0, arg1, arg2) {\n    const ret = new Uint8ClampedArray(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_instanceof_Uint8Array_247a91427532499e(arg0) {\n    let result;\n    try {\n        result = getObject(arg0) instanceof Uint8Array;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_debug_5a33c41aeac15ee6(arg0) {\n    console.debug(getObject(arg0));\n};\n\nexport function __wbg_info_c261acb2deacd903(arg0) {\n    console.info(getObject(arg0));\n};\n\nexport function __wbg_warn_2b3adb99ce26c314(arg0) {\n    console.warn(getObject(arg0));\n};\n\nexport function __wbg_error_09480e4aadca50ad(arg0) {\n    console.error(getObject(arg0));\n};\n\nexport function __wbg_debug_7be7a5cabff29e7a(arg0, arg1) {\n    getObject(arg0).debug(getObject(arg1));\n};\n\nexport function __wbg_info_b9011639ae790fb7(arg0, arg1) {\n    getObject(arg0).info(getObject(arg1));\n};\n\nexport function __wbg_warn_8071ed4fdd3f9f0b(arg0, arg1) {\n    getObject(arg0).warn(getObject(arg1));\n};\n\nexport function __wbg_error_aa8b7900fa597371(arg0, arg1) {\n    getObject(arg0).error(getObject(arg1));\n};\n\nexport function __wbg_now_b7a162010a9e75b4() {\n    const ret = Date.now();\n    return ret;\n};\n\nexport function __wbg_String_b9412f8799faab3e(arg0, arg1) {\n    const ret = String(getObject(arg1));\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_key_37c613728ba0b769() { return handleError(function (arg0) {\n    const ret = getObject(arg0).key;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_transaction_66168ca19ab39a78() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).transaction(getObject(arg1), [\"readonly\",\"readwrite\",\"versionchange\",\"readwriteflush\",\"cleanup\",][arg2]);\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_name_fe926223443dc728(arg0, arg1) {\n    const ret = getObject(arg1).name;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_message_b477ea215924b777(arg0, arg1) {\n    const ret = getObject(arg1).message;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_code_4a4b2516783729c7(arg0) {\n    const ret = getObject(arg0).code;\n    return ret;\n};\n\nexport function __wbg_getAllKeys_404d5487a041555d() { return handleError(function (arg0) {\n    const ret = getObject(arg0).getAllKeys();\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_getAll_cf97564e37784cbe() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).getAll(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_lowerBound_94d1c4a44fcc36a9() { return handleError(function (arg0, arg1) {\n    const ret = IDBKeyRange.lowerBound(getObject(arg0), arg1 !== 0);\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_openCursor_8ca06744434102da() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).openCursor(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_bound_f24ae26594f11d12() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = IDBKeyRange.bound(getObject(arg0), getObject(arg1), arg2 !== 0, arg3 !== 0);\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_getAll_e51dc29fdf0c6915() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).getAll(getObject(arg1), arg2 >>> 0);\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_index_c90226e82bd94b45() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).index(getStringFromWasm0(arg1, arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_count_bb99b5211d93738d() { return handleError(function (arg0) {\n    const ret = getObject(arg0).count();\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_openCursor_3e5f2356f0515f34() { return handleError(function (arg0) {\n    const ret = getObject(arg0).openCursor();\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_update_375c91f2a290ec51() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).update(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_get_b51eae1c0542125a() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).get(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_getAll_789d8b6775c0f8de() { return handleError(function (arg0) {\n    const ret = getObject(arg0).getAll();\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbindgen_as_number(arg0) {\n    const ret = +getObject(arg0);\n    return ret;\n};\n\nexport function __wbindgen_jsval_loose_eq(arg0, arg1) {\n    const ret = getObject(arg0) == getObject(arg1);\n    return ret;\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_bigint_get_as_i64(arg0, arg1) {\n    const v = getObject(arg1);\n    const ret = typeof(v) === 'bigint' ? v : undefined;\n    getDataViewMemory0().setBigInt64(arg0 + 8 * 1, isLikeNone(ret) ? BigInt(0) : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_debug_string(arg0, arg1) {\n    const ret = debugString(getObject(arg1));\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_then_95e6edc0f89b73b1(arg0, arg1) {\n    const ret = getObject(arg0).then(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_queueMicrotask_12a30234db4045d3(arg0) {\n    queueMicrotask(getObject(arg0));\n};\n\nexport function __wbg_queueMicrotask_48421b3cc9052b68(arg0) {\n    const ret = getObject(arg0).queueMicrotask;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_resolve_570458cb99d56a43(arg0) {\n    const ret = Promise.resolve(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_target_b7cb1739bee70928(arg0) {\n    const ret = getObject(arg0).target;\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n};\n\nexport function __wbg_continue_a92b4c9f17458897() { return handleError(function (arg0) {\n    getObject(arg0).continue();\n}, arguments) };\n\nexport function __wbg_delete_fbab4d55ffb8712b() { return handleError(function (arg0) {\n    const ret = getObject(arg0).delete();\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_value_d4be628e515b251f() { return handleError(function (arg0) {\n    const ret = getObject(arg0).value;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_deleteObjectStore_745da9b507613eca() { return handleError(function (arg0, arg1, arg2) {\n    getObject(arg0).deleteObjectStore(getStringFromWasm0(arg1, arg2));\n}, arguments) };\n\nexport function __wbg_bound_8b7ae17c676052c7() { return handleError(function (arg0, arg1) {\n    const ret = IDBKeyRange.bound(getObject(arg0), getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_count_7b9a7e71c616b931() { return handleError(function (arg0) {\n    const ret = getObject(arg0).count();\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_delete_34764ece57bdc720() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).delete(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_get_88b5e79e9daccb9f() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).get(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_put_f83d95662936dee7() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).put(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_setonupgradeneeded_8f3f0ac5d7130a6f(arg0, arg1) {\n    getObject(arg0).onupgradeneeded = getObject(arg1);\n};\n\nexport function __wbg_result_fd2dae625828961d() { return handleError(function (arg0) {\n    const ret = getObject(arg0).result;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_error_1221bc1f1d0b14d3() { return handleError(function (arg0) {\n    const ret = getObject(arg0).error;\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_setonsuccess_962c293b6e38a5d5(arg0, arg1) {\n    getObject(arg0).onsuccess = getObject(arg1);\n};\n\nexport function __wbg_setonerror_bd61d0a61808ca40(arg0, arg1) {\n    getObject(arg0).onerror = getObject(arg1);\n};\n\nexport function __wbg_oldVersion_74205b5e4698efc3(arg0) {\n    const ret = getObject(arg0).oldVersion;\n    return ret;\n};\n\nexport function __wbg_now_abd80e969af37148(arg0) {\n    const ret = getObject(arg0).now();\n    return ret;\n};\n\nexport function __wbg_performance_a1b8bde2ee512264(arg0) {\n    const ret = getObject(arg0).performance;\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_closure_wrapper1049(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 30, __wbg_adapter_56);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_closure_wrapper2208(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 405, __wbg_adapter_59);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_closure_wrapper5361(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 405, __wbg_adapter_62);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_closure_wrapper6806(arg0, arg1, arg2) {\n    const ret = makeClosure(arg0, arg1, 411, __wbg_adapter_65);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_closure_wrapper6808(arg0, arg1, arg2) {\n    const ret = makeClosure(arg0, arg1, 411, __wbg_adapter_68);\n    return addHeapObject(ret);\n};\n\n","// Copyright 2024 The Matrix.org Foundation C.I.C.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// @ts-check\n\n/**\n * This is the entry point for ESM environments which support the ES Module Integration Proposal for WebAssembly [1].\n *\n * [1]: https://github.com/webassembly/esm-integration\n */\n\nimport * as bindings from \"./pkg/matrix_sdk_crypto_wasm_bg.js\";\n\n// Although we could simply instantiate the WASM at import time with a top-level `await`,\n// we avoid that, to make it easier for callers to delay loading the WASM (and instead\n// wait until `initAsync` is called). (Also, Safari 14 doesn't support top-level `await`.)\n//\n// However, having done so, there is no way to synchronously load the WASM if the user ends\n// up using the bindings before calling `initAsync` (unlike under Node.js), so we just throw\n// an error.\nbindings.__wbg_set_wasm(\n    new Proxy(\n        {},\n        {\n            get() {\n                throw new Error(\n                    \"@matrix-org/matrix-sdk-crypto-wasm was used before it was initialized. Call `initAsync` first.\",\n                );\n            },\n        },\n    ),\n);\n\n/**\n * Stores a promise of the `loadModuleAsync` call\n * @type {Promise<void> | null}\n */\nlet modPromise = null;\n\n/**\n * Loads and instantiates the WASM module asynchronously\n *\n * @returns {Promise<void>}\n */\nasync function loadModuleAsync() {\n    /** @type {typeof import(\"./pkg/matrix_sdk_crypto_wasm_bg.wasm.d.ts\")} */\n    // @ts-expect-error TSC can't find the definitions file, for some reason.\n    const wasm = await import(\"./pkg/matrix_sdk_crypto_wasm_bg.wasm\");\n    bindings.__wbg_set_wasm(wasm);\n    wasm.__wbindgen_start();\n}\n\n/**\n * Load the WebAssembly module in the background, if it has not already been loaded.\n *\n * Returns a promise which will resolve once the other methods are ready.\n *\n * @returns {Promise<void>}\n */\nexport async function initAsync() {\n    if (!modPromise) modPromise = loadModuleAsync();\n    await modPromise;\n}\n\n// Re-export everything from the generated javascript wrappers\nexport * from \"./pkg/matrix_sdk_crypto_wasm_bg.js\";\n"],"names":["wasm","__wbg_set_wasm","val","cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachedUint8ArrayMemory0","getUint8ArrayMemory0","byteLength","Uint8Array","memory","buffer","getStringFromWasm0","ptr","len","subarray","heap","Array","fill","undefined","push","heap_next","length","addHeapObject","obj","idx","getObject","isLikeNone","x","cachedDataViewMemory0","getDataViewMemory0","detached","DataView","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm0","malloc","realloc","mem","offset","code","charCodeAt","slice","takeObject","ret","dropObject","debugString","type","description","name","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","Error","message","stack","CLOSURE_DTORS","FinalizationRegistry","register","unregister","state","__wbindgen_export_2","get","dtor","a","b","makeMutClosure","arg0","arg1","f","cnt","real","args","original","__wbg_adapter_56","arg2","retptr","__wbindgen_add_to_stack_pointer","_dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h8b01e5822120501e","r0","getInt32","__wbg_adapter_59","_dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h421ff8a63e364c82","__wbg_adapter_62","_dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hf01ec3d0f56b9a66","makeClosure","__wbg_adapter_65","_dyn_core__ops__function__Fn_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h979574dda83929ee","__wbg_adapter_68","_dyn_core__ops__function__Fn__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h763dc4f7c27cfc89","passArray8ToWasm0","_assertClass","instance","klass","getArrayU8FromWasm0","passArrayJsValueToWasm0","array","setUint32","stack_pointer","addBorrowedObject","getArrayJsValueFromWasm0","result","getUint32","cachedUint16ArrayMemory0","getArrayU16FromWasm0","Uint16Array","getVersions","Versions","__wrap","handleError","apply","this","e","__wbindgen_exn_store","HistoryVisibility","Object","freeze","Invited","Joined","Shared","WorldReadable","LoggerLevel","Trace","Debug","Info","Warn","VerificationRequestPhase","Created","Requested","Ready","Transitioned","Done","Cancelled","VerificationMethod","SasV1","QrCodeScanV1","QrCodeShowV1","ReciprocateV1","QrState","Scanned","Confirmed","Reciprocated","EncryptionAlgorithm","Missing","Invalid","ValidButNotTrusted","ValidAndTrusted","OlmV1Curve25519AesSha2","MegolmV1AesSha2","Unknown","LocalTrust","Verified","BlackListed","Ignored","Unset","DecryptionErrorCode","Ed25519","Curve25519","MissingRoomKey","UnknownMessageIndex","MismatchedIdentityKeys","UnknownSenderDevice","UnsignedSenderDevice","SenderIdentityVerificationViolation","UnableToDecrypt","QrCodeMode","Login","Reciprocate","TrustRequirement","Untrusted","CrossSignedOrLegacy","CrossSigned","ShieldColor","Red","Grey","None","ShieldStateCode","KeysUpload","KeysQuery","KeysClaim","ToDevice","SignatureUpload","RoomMessage","KeysBackup","AuthenticityNotGuaranteed","UnknownDevice","UnsignedDevice","UnverifiedIdentity","SentInClear","VerificationViolation","__wbg_attachment_free","BackupDecryptionKeyFinalization","__wbg_backupdecryptionkey_free","BackupDecryptionKey","create","prototype","__wbg_ptr","__destroy_into_raw","free","createRandomKey","backupdecryptionkey_createRandomKey","fromBase64","key","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","backupdecryptionkey_fromBase64","r1","toBase64","backupdecryptionkey_toBase64","megolmV1PublicKey","backupdecryptionkey_megolmV1PublicKey","MegolmV1BackupKey","decryptV1","ephemeral_key","mac","ciphertext","deferred5_0","deferred5_1","ptr1","len1","ptr2","len2","backupdecryptionkey_decryptV1","r2","r3","ptr4","len4","__wbindgen_free","BackupKeysFinalization","__wbg_backupkeys_free","BackupKeys","decryptionKey","__wbg_get_backupkeys_decryptionKey","__wbg_set_backupkeys_decryptionKey","backupVersion","__wbg_get_backupkeys_backupVersion","v1","__wbg_set_backupkeys_backupVersion","decryptionKeyBase64","backupkeys_decryptionKeyBase64","BackupSecretsBundleFinalization","__wbg_backupsecretsbundle_free","BackupSecretsBundle","deferred1_0","deferred1_1","__wbg_get_backupsecretsbundle_key","__wbg_set_backupsecretsbundle_key","backup_version","__wbg_get_backupsecretsbundle_backup_version","__wbg_set_backupsecretsbundle_backup_version","BaseMigrationDataFinalization","__wbg_basemigrationdata_free","BaseMigrationData","userId","__wbg_get_basemigrationdata_userId","UserId","__wbg_set_basemigrationdata_userId","deviceId","__wbg_get_basemigrationdata_deviceId","DeviceId","__wbg_set_basemigrationdata_deviceId","pickledAccount","__wbg_get_basemigrationdata_backupVersion","__wbg_set_basemigrationdata_backupVersion","backupRecoveryKey","__wbg_get_basemigrationdata_backupRecoveryKey","__wbg_set_basemigrationdata_backupRecoveryKey","privateCrossSigningMasterKey","__wbg_get_basemigrationdata_privateCrossSigningMasterKey","__wbg_set_basemigrationdata_privateCrossSigningMasterKey","privateCrossSigningSelfSigningKey","__wbg_get_basemigrationdata_privateCrossSigningSelfSigningKey","__wbg_set_basemigrationdata_privateCrossSigningSelfSigningKey","privateCrossSigningUserSigningKey","__wbg_get_basemigrationdata_privateCrossSigningUserSigningKey","__wbg_set_basemigrationdata_privateCrossSigningUserSigningKey","constructor","basemigrationdata_new","CancelInfoFinalization","__wbg_cancelinfo_free","CancelInfo","reason","cancelinfo_reason","cancelCode","cancelinfo_cancelCode","cancelledbyUs","cancelinfo_cancelledbyUs","CheckCodeFinalization","__wbg_checkcode_free","CheckCode","as_bytes","checkcode_as_bytes","to_digit","checkcode_to_digit","CollectStrategyFinalization","__wbg_collectstrategy_free","CollectStrategy","eq","other","collectstrategy_eq","deviceBasedStrategy","only_allow_trusted_devices","error_on_verified_user_problem","collectstrategy_deviceBasedStrategy","identityBasedStrategy","collectstrategy_identityBasedStrategy","CrossSigningBootstrapRequestsFinalization","__wbg_crosssigningbootstraprequests_free","CrossSigningBootstrapRequests","uploadKeysRequest","__wbg_get_crosssigningbootstraprequests_uploadKeysRequest","uploadSigningKeysRequest","__wbg_get_crosssigningbootstraprequests_uploadSigningKeysRequest","UploadSigningKeysRequest","uploadSignaturesRequest","__wbg_get_crosssigningbootstraprequests_uploadSignaturesRequest","SignatureUploadRequest","CrossSigningKeyExportFinalization","__wbg_crosssigningkeyexport_free","CrossSigningKeyExport","masterKey","crosssigningkeyexport_masterKey","self_signing_key","crosssigningkeyexport_self_signing_key","userSigningKey","crosssigningkeyexport_userSigningKey","CrossSigningStatusFinalization","__wbg_crosssigningstatus_free","CrossSigningStatus","hasMaster","crosssigningstatus_hasMaster","hasSelfSigning","crosssigningstatus_hasSelfSigning","hasUserSigning","crosssigningstatus_hasUserSigning","Curve25519PublicKeyFinalization","__wbg_curve25519publickey_free","Curve25519PublicKey","curve25519publickey_new","curve25519publickey_length","curve25519publickey_toBase64","DecryptedRoomEventFinalization","__wbg_decryptedroomevent_free","DecryptedRoomEvent","event","__wbg_get_decryptedroomevent_event","sender","decryptedroomevent_sender","senderDevice","decryptedroomevent_senderDevice","senderCurve25519Key","decryptedroomevent_senderCurve25519Key","senderClaimedEd25519Key","decryptedroomevent_senderClaimedEd25519Key","forwardingCurve25519KeyChain","decryptedroomevent_forwardingCurve25519KeyChain","shieldState","strict","decryptedroomevent_shieldState","ShieldState","DecryptionSettingsFinalization","__wbg_decryptionsettings_free","DecryptionSettings","sender_device_trust_requirement","__wbg_get_decryptionsettings_sender_device_trust_requirement","__wbg_set_decryptionsettings_sender_device_trust_requirement","decryptionsettings_new","DehydratedDeviceFinalization","__wbg_dehydrateddevice_free","DehydratedDevice","keysForUpload","initial_device_display_name","pickle_key","dehydrateddevice_keysForUpload","DehydratedDevicesFinalization","__wbg_dehydrateddevices_free","DehydratedDevices","dehydrateddevices_create","rehydrate","device_id","device_data","dehydrateddevices_rehydrate","DeviceFinalization","__wbg_device_free","Device","requestVerification","methods","device_requestVerification","encryptToDeviceEvent","event_type","content","device_encryptToDeviceEvent","isVerified","device_isVerified","isCrossSigningTrusted","device_isCrossSigningTrusted","isCrossSignedByOwner","device_isCrossSignedByOwner","setLocalTrust","local_state","device_setLocalTrust","device_userId","device_deviceId","displayName","device_displayName","getKey","algorithm","device_getKey","DeviceKey","curve25519Key","device_curve25519Key","ed25519Key","device_ed25519Key","Ed25519PublicKey","keys","device_keys","algorithms","device_algorithms","signatures","device_signatures","Signatures","localTrustState","device_localTrustState","isLocallyTrusted","device_isLocallyTrusted","isBlacklisted","device_isBlacklisted","isDeleted","device_isDeleted","firstTimeSeen","device_firstTimeSeen","BigInt","asUintN","verify","device_verify","isDehydrated","device_isDehydrated","DeviceIdFinalization","__wbg_deviceid_free","id","deviceid_new","deviceid_toString","DeviceKeyFinalization","__wbg_devicekey_free","devicekey_name","curve25519","devicekey_curve25519","ed25519","devicekey_ed25519","unknown","devicekey_unknown","devicekey_toBase64","DeviceKeyAlgorithmFinalization","__wbg_devicekeyalgorithm_free","DeviceKeyAlgorithm","devicekeyalgorithm_name","devicekeyalgorithm_toString","DeviceKeyIdFinalization","__wbg_devicekeyid_free","DeviceKeyId","devicekeyid_new","devicekeyid_algorithm","devicekeyid_deviceId","devicekeyid_toString","DeviceListsFinalization","__wbg_devicelists_free","DeviceLists","changed","left","devicelists_new","isEmpty","devicelists_isEmpty","devicelists_changed","devicelists_left","EciesFinalization","__wbg_ecies_free","Ecies","ecies_new","public_key","ecies_public_key","establish_inbound_channel","initial_message","ecies_establish_inbound_channel","InboundCreationResult","establish_outbound_channel","ecies_establish_outbound_channel","OutboundCreationResult","Ed25519PublicKeyFinalization","__wbg_ed25519publickey_free","ed25519publickey_length","ed25519publickey_toBase64","Ed25519SignatureFinalization","__wbg_ed25519signature_free","Ed25519Signature","signature","ed25519signature_new","ed25519signature_toBase64","EmojiFinalization","__wbg_emoji_free","Emoji","symbol","emoji_symbol","emoji_description","__wbg_encryptedattachment_free","EncryptionInfoFinalization","__wbg_encryptioninfo_free","EncryptionInfo","encryptioninfo_sender","encryptioninfo_senderDevice","encryptioninfo_senderCurve25519Key","encryptioninfo_senderClaimedEd25519Key","encryptioninfo_shieldState","EncryptionSettingsFinalization","__wbg_encryptionsettings_free","EncryptionSettings","__wbg_get_encryptionsettings_algorithm","__wbg_set_encryptionsettings_algorithm","rotationPeriod","__wbg_get_encryptionsettings_rotationPeriod","__wbg_set_encryptionsettings_rotationPeriod","rotationPeriodMessages","__wbg_get_encryptionsettings_rotationPeriodMessages","__wbg_set_encryptionsettings_rotationPeriodMessages","historyVisibility","__wbg_get_encryptionsettings_historyVisibility","__wbg_set_encryptionsettings_historyVisibility","sharingStrategy","__wbg_get_encryptionsettings_sharingStrategy","__wbg_set_encryptionsettings_sharingStrategy","encryptionsettings_new","EstablishedEciesFinalization","__wbg_establishedecies_free","EstablishedEcies","establishedecies_public_key","encrypt","deferred2_0","deferred2_1","establishedecies_encrypt","decrypt","deferred3_0","deferred3_1","establishedecies_decrypt","check_code","establishedecies_check_code","EventIdFinalization","__wbg_eventid_free","EventId","eventid_new","localpart","eventid_localpart","serverName","eventid_serverName","ServerName","eventid_toString","IdentityKeysFinalization","__wbg_identitykeys_free","IdentityKeys","__wbg_get_identitykeys_ed25519","__wbg_set_identitykeys_ed25519","__wbg_get_identitykeys_curve25519","__wbg_set_identitykeys_curve25519","InboundCreationResultFinalization","__wbg_inboundcreationresult_free","channel","__wbg_get_inboundcreationresult_channel","__wbg_set_inboundcreationresult_channel","InboundGroupSessionFinalization","__wbg_inboundgroupsession_free","InboundGroupSession","roomId","inboundgroupsession_roomId","RoomId","senderKey","inboundgroupsession_senderKey","sessionId","inboundgroupsession_sessionId","hasBeenImported","inboundgroupsession_hasBeenImported","KeysBackupRequestFinalization","__wbg_keysbackuprequest_free","KeysBackupRequest","__wbg_get_keysbackuprequest_id","body","__wbg_get_keysbackuprequest_body","version","__wbg_get_keysbackuprequest_version","keysbackuprequest_new","keysbackuprequest_type","KeysClaimRequestFinalization","__wbg_keysclaimrequest_free","KeysClaimRequest","keysclaimrequest_new","keysclaimrequest_type","KeysQueryRequestFinalization","__wbg_keysqueryrequest_free","KeysQueryRequest","keysqueryrequest_type","KeysUploadRequestFinalization","__wbg_keysuploadrequest_free","KeysUploadRequest","keysuploadrequest_type","MaybeSignatureFinalization","__wbg_maybesignature_free","MaybeSignature","isValid","maybesignature_isValid","isInvalid","maybesignature_isInvalid","maybesignature_signature","Signature","invalidSignatureSource","maybesignature_invalidSignatureSource","MegolmDecryptionErrorFinalization","__wbg_megolmdecryptionerror_free","MegolmDecryptionError","__wbg_get_megolmdecryptionerror_code","maybe_withheld","__wbg_get_megolmdecryptionerror_maybe_withheld","MegolmV1BackupKeyFinalization","__wbg_megolmv1backupkey_free","publicKeyBase64","megolmv1backupkey_publicKeyBase64","megolmv1backupkey_algorithm","MigrationFinalization","__wbg_migration_free","Migration","migrateBaseData","data","store_handle","StoreHandle","migration_migrateBaseData","migrateOlmSessions","sessions","migration_migrateOlmSessions","migrateMegolmSessions","migration_migrateMegolmSessions","OlmMachineFinalization","__wbg_olmmachine_free","OlmMachine","olmmachine_new","initialize","user_id","store_name","store_passphrase","olmmachine_initialize","initFromStore","olmmachine_initFromStore","olmmachine_userId","olmmachine_deviceId","deviceCreationTimeMs","olmmachine_deviceCreationTimeMs","identityKeys","olmmachine_identityKeys","olmmachine_displayName","roomKeyRequestsEnabled","olmmachine_roomKeyRequestsEnabled","enabled","olmmachine_set_roomKeyRequestsEnabled","roomKeyForwardingEnabled","olmmachine_roomKeyForwardingEnabled","olmmachine_set_roomKeyForwardingEnabled","trackedUsers","olmmachine_trackedUsers","updateTrackedUsers","users","olmmachine_updateTrackedUsers","markAllTrackedUsersAsDirty","olmmachine_markAllTrackedUsersAsDirty","receiveSyncChanges","to_device_events","changed_devices","one_time_keys_counts","unused_fallback_keys","olmmachine_receiveSyncChanges","outgoingRequests","olmmachine_outgoingRequests","markRequestAsSent","request_id","request_type","response","olmmachine_markRequestAsSent","encryptRoomEvent","room_id","olmmachine_encryptRoomEvent","decryptRoomEvent","decryption_settings","olmmachine_decryptRoomEvent","getRoomEventEncryptionInfo","olmmachine_getRoomEventEncryptionInfo","crossSigningStatus","olmmachine_crossSigningStatus","exportSecretsBundle","olmmachine_exportSecretsBundle","importSecretsBundle","bundle","SecretsBundle","olmmachine_importSecretsBundle","exportCrossSigningKeys","olmmachine_exportCrossSigningKeys","importCrossSigningKeys","master_key","user_signing_key","olmmachine_importCrossSigningKeys","bootstrapCrossSigning","reset","olmmachine_bootstrapCrossSigning","getIdentity","olmmachine_getIdentity","sign","olmmachine_sign","invalidateGroupSession","olmmachine_invalidateGroupSession","shareRoomKey","encryption_settings","olmmachine_shareRoomKey","queryKeysForUsers","olmmachine_queryKeysForUsers","getMissingSessions","olmmachine_getMissingSessions","getUserDevices","timeout_secs","olmmachine_getUserDevices","getDevice","olmmachine_getDevice","getVerification","flow_id","olmmachine_getVerification","getVerificationRequest","olmmachine_getVerificationRequest","VerificationRequest","getVerificationRequests","olmmachine_getVerificationRequests","receiveVerificationEvent","olmmachine_receiveVerificationEvent","exportRoomKeys","predicate","olmmachine_exportRoomKeys","importRoomKeys","exported_room_keys","progress_listener","olmmachine_importRoomKeys","importExportedRoomKeys","olmmachine_importExportedRoomKeys","importBackedUpRoomKeys","backed_up_room_keys","olmmachine_importBackedUpRoomKeys","saveBackupDecryptionKey","decryption_key","olmmachine_saveBackupDecryptionKey","getBackupKeys","olmmachine_getBackupKeys","verifyBackup","backup_info","olmmachine_verifyBackup","enableBackupV1","public_key_base_64","olmmachine_enableBackupV1","isBackupEnabled","olmmachine_isBackupEnabled","disableBackup","olmmachine_disableBackup","backupRoomKeys","olmmachine_backupRoomKeys","roomKeyCounts","olmmachine_roomKeyCounts","encryptExportedRoomKeys","passphrase","rounds","deferred4_0","deferred4_1","olmmachine_encryptExportedRoomKeys","ptr3","len3","decryptExportedRoomKeys","encrypted_exported_room_keys","olmmachine_decryptExportedRoomKeys","registerRoomKeyUpdatedCallback","callback","olmmachine_registerRoomKeyUpdatedCallback","registerRoomKeysWithheldCallback","olmmachine_registerRoomKeysWithheldCallback","registerUserIdentityUpdatedCallback","olmmachine_registerUserIdentityUpdatedCallback","registerDevicesUpdatedCallback","olmmachine_registerDevicesUpdatedCallback","registerReceiveSecretCallback","olmmachine_registerReceiveSecretCallback","getSecretsFromInbox","secret_name","olmmachine_getSecretsFromInbox","deleteSecretsFromInbox","olmmachine_deleteSecretsFromInbox","requestMissingSecretsIfNeeded","olmmachine_requestMissingSecretsIfNeeded","getRoomSettings","olmmachine_getRoomSettings","setRoomSettings","room_settings","RoomSettings","olmmachine_setRoomSettings","dehydratedDevices","olmmachine_dehydratedDevices","close","olmmachine_close","OtherUserIdentityFinalization","__wbg_otheruseridentity_free","OtherUserIdentity","otheruseridentity_isVerified","otheruseridentity_verify","request_event_id","otheruseridentity_requestVerification","verificationRequestContent","otheruseridentity_verificationRequestContent","otheruseridentity_masterKey","selfSigningKey","otheruseridentity_selfSigningKey","pinCurrentMasterKey","otheruseridentity_pinCurrentMasterKey","identityNeedsUserApproval","otheruseridentity_identityNeedsUserApproval","wasPreviouslyVerified","otheruseridentity_wasPreviouslyVerified","withdrawVerification","otheruseridentity_withdrawVerification","hasVerificationViolation","otheruseridentity_hasVerificationViolation","OutboundCreationResultFinalization","__wbg_outboundcreationresult_free","OwnUserIdentityFinalization","__wbg_ownuseridentity_free","OwnUserIdentity","ownuseridentity_isVerified","ownuseridentity_verify","ownuseridentity_requestVerification","trustsOurOwnDevice","ownuseridentity_trustsOurOwnDevice","ownuseridentity_masterKey","ownuseridentity_selfSigningKey","ownuseridentity_userSigningKey","ownuseridentity_wasPreviouslyVerified","ownuseridentity_withdrawVerification","ownuseridentity_hasVerificationViolation","PickledInboundGroupSessionFinalization","__wbg_pickledinboundgroupsession_free","PickledInboundGroupSession","__unwrap","jsValue","pickle","senderSigningKey","__wbg_get_pickledinboundgroupsession_roomId","__wbg_set_pickledinboundgroupsession_roomId","imported","__wbg_get_pickledinboundgroupsession_imported","__wbg_set_pickledinboundgroupsession_imported","backedUp","__wbg_get_pickledinboundgroupsession_backedUp","__wbg_set_pickledinboundgroupsession_backedUp","pickledinboundgroupsession_new","PickledSessionFinalization","__wbg_pickledsession_free","PickledSession","createdUsingFallbackKey","__wbg_get_pickledsession_createdUsingFallbackKey","__wbg_set_pickledsession_createdUsingFallbackKey","creationTime","__wbg_get_pickledsession_creationTime","__wbg_set_pickledsession_creationTime","lastUseTime","__wbg_get_pickledsession_lastUseTime","__wbg_set_pickledsession_lastUseTime","pickledsession_new","PutDehydratedDeviceRequestFinalization","__wbg_putdehydrateddevicerequest_free","PutDehydratedDeviceRequest","__wbg_get_putdehydrateddevicerequest_body","putdehydrateddevicerequest_new","QrFinalization","__wbg_qr_free","Qr","qr_state","hasBeenScanned","qr_hasBeenScanned","hasBeenConfirmed","qr_hasBeenConfirmed","qr_userId","otherUserId","qr_otherUserId","otherDeviceId","qr_otherDeviceId","weStarted","qr_weStarted","cancelInfo","qr_cancelInfo","isDone","qr_isDone","isCancelled","qr_isCancelled","isSelfVerification","qr_isSelfVerification","reciprocated","qr_reciprocated","flowId","qr_flowId","qr_roomId","toQrCode","qr_toQrCode","QrCode","toBytes","qr_toBytes","reciprocate","qr_reciprocate","confirmScanning","qr_confirmScanning","cancel","qr_cancel","cancelWithCode","qr_cancelWithCode","registerChangesCallback","qr_registerChangesCallback","QrCodeFinalization","__wbg_qrcode_free","renderIntoBuffer","qrcode_renderIntoBuffer","QrCodeDataFinalization","__wbg_qrcodedata_free","QrCodeData","rendezvous_url","server_name","qrcodedata_new","fromBytes","bytes","qrcodedata_fromBytes","qrcodedata_toBytes","qrcodedata_fromBase64","qrcodedata_toBase64","publicKey","qrcodedata_publicKey","rendezvousUrl","qrcodedata_rendezvousUrl","qrcodedata_serverName","mode","qrcodedata_mode","QrCodeScanFinalization","__wbg_qrcodescan_free","QrCodeScan","qrcodescan_fromBytes","RehydratedDeviceFinalization","__wbg_rehydrateddevice_free","RehydratedDevice","receiveEvents","rehydrateddevice_receiveEvents","RoomIdFinalization","__wbg_roomid_free","roomid_new","RoomKeyCountsFinalization","__wbg_roomkeycounts_free","RoomKeyCounts","total","__wbg_get_roomkeycounts_total","__wbg_set_roomkeycounts_total","__wbg_get_roomkeycounts_backedUp","__wbg_set_roomkeycounts_backedUp","RoomKeyImportResultFinalization","__wbg_roomkeyimportresult_free","RoomKeyImportResult","importedCount","__wbg_get_roomkeyimportresult_importedCount","totalCount","__wbg_get_roomkeyimportresult_totalCount","roomkeyimportresult_keys","RoomKeyInfoFinalization","__wbg_roomkeyinfo_free","RoomKeyInfo","roomkeyinfo_algorithm","roomkeyinfo_roomId","roomkeyinfo_senderKey","roomkeyinfo_sessionId","RoomKeyWithheldInfoFinalization","__wbg_roomkeywithheldinfo_free","RoomKeyWithheldInfo","roomkeywithheldinfo_sender","roomkeywithheldinfo_algorithm","withheldCode","roomkeywithheldinfo_withheldCode","roomkeywithheldinfo_roomId","roomkeywithheldinfo_sessionId","RoomMessageRequestFinalization","__wbg_roommessagerequest_free","RoomMessageRequest","txn_id","__wbg_get_roommessagerequest_body","roommessagerequest_new","roommessagerequest_type","RoomSettingsFinalization","__wbg_roomsettings_free","__wbg_get_roomsettings_algorithm","__wbg_set_roomsettings_algorithm","onlyAllowTrustedDevices","__wbg_get_roomsettings_onlyAllowTrustedDevices","__wbg_set_roomsettings_onlyAllowTrustedDevices","sessionRotationPeriodMs","__wbg_get_roomsettings_sessionRotationPeriodMs","getFloat64","__wbg_set_roomsettings_sessionRotationPeriodMs","sessionRotationPeriodMessages","__wbg_get_roomsettings_sessionRotationPeriodMessages","__wbg_set_roomsettings_sessionRotationPeriodMessages","roomsettings_new","SasFinalization","__wbg_sas_free","Sas","sas_userId","sas_deviceId","sas_otherUserId","sas_otherDeviceId","sas_flowId","sas_roomId","supportsEmoji","sas_supportsEmoji","startedFromRequest","sas_startedFromRequest","sas_isSelfVerification","haveWeConfirmed","sas_haveWeConfirmed","hasBeenAccepted","sas_hasBeenAccepted","sas_cancelInfo","sas_weStarted","accept","sas_accept","confirm","sas_confirm","sas_cancel","sas_cancelWithCode","timedOut","sas_timedOut","canBePresented","sas_canBePresented","sas_isDone","sas_isCancelled","emoji","sas_emoji","emojiIndex","sas_emojiIndex","decimals","sas_decimals","sas_registerChangesCallback","SecretsBundleFinalization","__wbg_secretsbundle_free","secretsbundle_masterKey","secretsbundle_selfSigningKey","secretsbundle_userSigningKey","backupBundle","secretsbundle_backupBundle","to_json","secretsbundle_to_json","from_json","json","secretsbundle_from_json","ServerNameFinalization","__wbg_servername_free","servername_new","host","servername_host","port","servername_port","isIpLiteral","servername_isIpLiteral","ShieldStateFinalization","__wbg_shieldstate_free","color","__wbg_get_shieldstate_color","__wbg_set_shieldstate_color","__wbg_get_shieldstate_code","__wbg_set_shieldstate_code","shieldstate_message","SignatureFinalization","__wbg_signature_free","signature_ed25519","signature_toBase64","SignatureUploadRequestFinalization","__wbg_signatureuploadrequest_free","signed_keys","signatureuploadrequest_new","signatureuploadrequest_type","SignatureVerificationFinalization","__wbg_signatureverification_free","SignatureVerification","deviceState","signatureverification_deviceState","userState","signatureverification_userState","trusted","signatureverification_trusted","SignaturesFinalization","__wbg_signatures_free","signatures_new","addSignature","signer","key_id","signatures_addSignature","getSignature","signatures_getSignature","signatures_get","clear","signatures_clear","signatures_isEmpty","count","signatures_count","asJSON","signatures_asJSON","StoreHandleFinalization","__wbg_storehandle_free","open","storehandle_open","openWithKey","store_key","storehandle_openWithKey","ToDeviceRequestFinalization","__wbg_todevicerequest_free","ToDeviceRequest","todevicerequest_new","todevicerequest_type","TracingFinalization","__wbg_tracing_free","Tracing","isAvailable","tracing_isAvailable","min_level","tracing_new","minLevel","tracing_set_minLevel","turnOn","tracing_turnOn","turnOff","tracing_turnOff","UploadSigningKeysRequestFinalization","__wbg_uploadsigningkeysrequest_free","UserDevicesFinalization","__wbg_userdevices_free","UserDevices","userdevices_get","isAnyVerified","userdevices_isAnyVerified","userdevices_keys","devices","userdevices_devices","UserIdFinalization","__wbg_userid_free","userid_new","userid_localpart","userid_serverName","isHistorical","userid_isHistorical","clone","userid_clone","VerificationRequestFinalization","__wbg_verificationrequest_free","request","own_user_id","own_device_id","other_user_id","verificationrequest_request","ownUserId","verificationrequest_ownUserId","verificationrequest_otherUserId","verificationrequest_otherDeviceId","verificationrequest_roomId","verificationrequest_cancelInfo","isPassive","verificationrequest_isPassive","isReady","verificationrequest_isReady","verificationrequest_timedOut","timeRemainingMillis","verificationrequest_timeRemainingMillis","theirSupportedMethods","verificationrequest_theirSupportedMethods","ourSupportedMethods","verificationrequest_ourSupportedMethods","verificationrequest_flowId","verificationrequest_isSelfVerification","verificationrequest_weStarted","verificationrequest_isDone","phase","verificationrequest_phase","verificationrequest_getVerification","verificationrequest_registerChangesCallback","verificationrequest_isCancelled","acceptWithMethods","verificationrequest_acceptWithMethods","verificationrequest_accept","verificationrequest_cancel","startSas","verificationrequest_startSas","generateQrCode","verificationrequest_generateQrCode","scanQrCode","verificationrequest_scanQrCode","VersionsFinalization","__wbg_versions_free","vodozemac","matrix_sdk_crypto","git_sha","git_description","__wbindgen_error_new","__wbg_length_ae22078168b726f5","__wbg_iterator_888179a48810a9fe","Symbol","iterator","__wbg_from_0791d740a9d37830","from","__wbg_at_5fa66069579ac579","at","__wbindgen_is_undefined","__wbindgen_in","__wbindgen_number_get","setFloat64","setInt32","__wbindgen_boolean_get","v","__wbindgen_string_get","__wbindgen_is_bigint","__wbindgen_is_object","__wbindgen_number_new","__wbindgen_try_into_number","__wbg_userid_unwrap","__wbindgen_bigint_from_i64","__wbindgen_bigint_from_u64","__wbg_setTimeout_7d81d052875b0f4f","setTimeout","arguments","__wbg_transaction_0549f2d854da77a6","transaction","__wbg_createIndex_8420e89baab0736f","arg3","createIndex","__wbg_objectStoreNames_2fc72464aff4baed","objectStoreNames","__wbg_new_525245e2b9901204","__wbg_setunique_6f46c3f803001492","unique","__wbindgen_string_new","__wbg_add_4d2791d6295ba9ec","add","__wbg_getwithrefkey_edc2c8960f0f1191","__wbg_set_f975102236d3c502","__wbg_version_85aa50b42026873e","__wbg_close_7bef29d1d5feecdb","__wbindgen_object_clone_ref","__wbindgen_is_array","__wbg_parse_52202f117ec9ecfa","parse","__wbg_dehydrateddevice_new","__wbg_new_b85e72ed1bfd57f9","state0","Promise","wasm_bindgen__convert__closures__invoke2_mut__h1b141f68d4959757","__wbg_adapter_748","__wbg_new_0d215095f6a3600f","Set","__wbg_roomsettings_new","__wbg_putdehydrateddevicerequest_new","__wbg_pickledsession_unwrap","__wbg_rehydrateddevice_new","__wbg_pickledinboundgroupsession_unwrap","__wbg_secretsbundle_new","__wbindgen_cb_drop","__wbg_setonblocked_554fa1541fe66a16","onblocked","__wbg_clearTimeout_541ac0980ffcef74","clearTimeout","__wbindgen_object_drop_ref","__wbg_setonversionchange_b1a0928064e9b758","onversionchange","__wbg_new_a220cf903aa02ca2","__wbg_roomkeyinfo_new","__wbg_push_37c89022f34c01ca","__wbg_roomkeyimportresult_new","__wbg_userid_new","__wbg_crosssigningstatus_new","__wbindgen_jsval_eq","__wbg_String_88810dfeb4021902","String","__wbg_storehandle_new","__wbg_encryptioninfo_new","__wbg_userdevices_new","__wbg_crosssigningbootstraprequests_new","__wbg_ownuseridentity_new","__wbg_otheruseridentity_new","__wbg_signatureverification_new","__wbg_keysbackuprequest_new","__wbg_inboundgroupsession_new","__wbg_backupkeys_new","__wbg_signatures_new","__wbg_roomkeycounts_new","__wbg_crosssigningkeyexport_new","__wbg_set_673dda6c73d19609","__wbg_call_7de908392845a9a5","arg4","__wbg_decryptedroomevent_new","__wbg_megolmdecryptionerror_new","__wbg_getTime_91058879093a1589","getTime","__wbg_roomkeywithheldinfo_new","__wbg_then_876bb3c633745cc6","then","__wbg_keysuploadrequest_new","__wbg_keysqueryrequest_new","__wbg_device_new","__wbg_new_8608a2b51a5f6737","Map","__wbg_devicekeyid_new","__wbg_devicekey_new","__wbg_set_49185437f0ab06f8","__wbg_deviceid_new","__wbg_new_7982fb43cfca37ae","Date","__wbg_olmmachine_new","__wbg_entries_2f5ddf03b53c6730","entries","__wbg_values_fb3a48a5a8c681f6","values","__wbg_get_3baa728f9d58d3f6","__wbg_roomid_unwrap","__wbindgen_is_string","__wbg_getwithrefkey_5e6d9547403deab8","__wbg_keysclaimrequest_new","__wbg_todevicerequest_new","__wbg_signatureuploadrequest_new","__wbg_roommessagerequest_new","__wbg_set_841ac57cff3d672b","__wbg_maybesignature_new","__wbg_sas_new","__wbg_emoji_new","__wbg_qr_new","__wbg_newwithlength_dfb862b757677cfc","Uint8ClampedArray","__wbg_length_701cb851fad911df","__wbindgen_memory","__wbg_buffer_b7b08af79b0b0974","__wbg_new_e36b5ccdd852e18d","__wbg_set_b68cc6ecd92a1101","__wbg_verificationrequest_new","__wbg_new_abda76e883ba8a5f","__wbg_stack_658279fe44541cf6","__wbg_error_f851667af71bcfc6","deferred0_0","deferred0_1","console","error","__wbg_subarray_7c2e3576afe181d1","__wbg_getRandomValues_3aa56aa6edec874c","getRandomValues","__wbg_newwithbyteoffsetandlength_8a2cb9ca96b27ec9","__wbg_randomFillSync_5c9c955aa56b6049","randomFillSync","__wbg_crypto_1d1f22824a6a080c","crypto","__wbg_process_4a72847cc503995b","process","__wbg_versions_f686565e586dd935","versions","__wbg_node_104a2ff8d6ea03a2","node","__wbg_require_cca90b1a94a0255b","__wbg_msCrypto_eb05e62b530a1508","msCrypto","__wbg_newwithlength_ec548f448387c968","__wbg_open_a89af1720976a433","__wbg_Window_6a2291ac118902bc","Window","__wbg_indexedDB_1f9ee79bddf7d011","indexedDB","__wbg_WorkerGlobalScope_e82ddd4027f19bb8","WorkerGlobalScope","__wbg_indexedDB_9d299adf9543d0c3","__wbg_global_12bfcc55465b53ad","global","__wbg_indexedDB_59bf81be2abc635d","__wbg_open_e8f45f3526088828","__wbg_setoncomplete_a9e0ec1d6568a6d9","oncomplete","__wbg_setonerror_00500154a07e987d","onerror","__wbg_setonabort_aedc77f0151af20c","onabort","__wbg_transaction_5a1543682e4ad921","__wbg_createObjectStore_190c19a0bae3fedb","createObjectStore","__wbg_clear_324ffb9a7c18a41c","__wbg_createIndex_6d4c3e20ee0f1066","__wbg_newwithmessage_7beb619ae81d7cb1","DOMException","__wbg_objectStore_80724f9f6d33ab5b","objectStore","__wbg_readyState_80e6a6c7d538fa33","readyState","__wbindgen_is_null","__wbg_item_5a55aebc84c52f29","item","__wbg_openCursor_728ede41c2e2d7ec","openCursor","__wbindgen_is_function","__wbg_call_1084a111329e68ce","__wbg_next_f9cb570345655b9a","next","__wbg_done_bfda7aa8f252b39f","done","__wbg_value_6d39332ab4788d86","value","__wbg_get_224d16597dbbfd96","Reflect","__wbg_next_de3e9db4440638b2","__wbg_self_3093d5d1f7bcb682","self","__wbg_window_3bcfc4d31bc012f8","window","__wbg_globalThis_86b222e13bdf32ed","globalThis","__wbg_global_e5a3fe56f8be9485","g","__wbg_newnoargs_76313bd6ff35d0f2","Function","__wbg_isArray_8364a5371e9737d8","__wbg_instanceof_ArrayBuffer_61dfc3198373c902","ArrayBuffer","__wbg_call_89af060b4e1523f2","__wbg_call_c6fe275aaa60da79","__wbg_instanceof_Map_763ce0e95960d55e","__wbg_isSafeInteger_7f1ed56200d90674","Number","isSafeInteger","__wbg_entries_7a0e06255456ebcd","__wbg_add_653baf3821a15934","__wbg_stringify_bbf45426c92a6bf5","__wbg_instanceof_Promise_ae8c7ffdec83f2ae","__wbg_new_ea1883e1e5e86686","__wbg_set_d1e79e2388520f18","__wbg_length_8339fcf5d8ecd12e","__wbg_newwithbyteoffsetandlength_94126d2ad22a595c","__wbg_instanceof_Uint8Array_247a91427532499e","__wbg_debug_5a33c41aeac15ee6","__wbg_info_c261acb2deacd903","info","__wbg_warn_2b3adb99ce26c314","warn","__wbg_error_09480e4aadca50ad","__wbg_debug_7be7a5cabff29e7a","__wbg_info_b9011639ae790fb7","__wbg_warn_8071ed4fdd3f9f0b","__wbg_error_aa8b7900fa597371","__wbg_now_b7a162010a9e75b4","now","__wbg_String_b9412f8799faab3e","__wbg_key_37c613728ba0b769","__wbg_transaction_66168ca19ab39a78","__wbg_name_fe926223443dc728","__wbg_message_b477ea215924b777","__wbg_code_4a4b2516783729c7","__wbg_getAllKeys_404d5487a041555d","getAllKeys","__wbg_getAll_cf97564e37784cbe","getAll","__wbg_lowerBound_94d1c4a44fcc36a9","IDBKeyRange","lowerBound","__wbg_openCursor_8ca06744434102da","__wbg_bound_f24ae26594f11d12","bound","__wbg_getAll_e51dc29fdf0c6915","__wbg_index_c90226e82bd94b45","index","__wbg_count_bb99b5211d93738d","__wbg_openCursor_3e5f2356f0515f34","__wbg_update_375c91f2a290ec51","update","__wbg_get_b51eae1c0542125a","__wbg_getAll_789d8b6775c0f8de","__wbindgen_as_number","__wbindgen_jsval_loose_eq","__wbindgen_throw","__wbindgen_bigint_get_as_i64","setBigInt64","__wbindgen_debug_string","__wbg_then_95e6edc0f89b73b1","__wbg_queueMicrotask_12a30234db4045d3","queueMicrotask","__wbg_queueMicrotask_48421b3cc9052b68","__wbg_resolve_570458cb99d56a43","resolve","__wbg_target_b7cb1739bee70928","target","__wbg_continue_a92b4c9f17458897","continue","__wbg_delete_fbab4d55ffb8712b","delete","__wbg_value_d4be628e515b251f","__wbg_deleteObjectStore_745da9b507613eca","deleteObjectStore","__wbg_bound_8b7ae17c676052c7","__wbg_count_7b9a7e71c616b931","__wbg_delete_34764ece57bdc720","__wbg_get_88b5e79e9daccb9f","__wbg_put_f83d95662936dee7","put","__wbg_setonupgradeneeded_8f3f0ac5d7130a6f","onupgradeneeded","__wbg_result_fd2dae625828961d","__wbg_error_1221bc1f1d0b14d3","__wbg_setonsuccess_962c293b6e38a5d5","onsuccess","__wbg_setonerror_bd61d0a61808ca40","__wbg_oldVersion_74205b5e4698efc3","oldVersion","__wbg_now_abd80e969af37148","__wbg_performance_a1b8bde2ee512264","performance","__wbindgen_closure_wrapper1049","__wbindgen_closure_wrapper2208","__wbindgen_closure_wrapper5361","__wbindgen_closure_wrapper6806","__wbindgen_closure_wrapper6808","Proxy","modPromise","async","initAsync","__wbindgen_start","loadModuleAsync"],"sourceRoot":""}