{"version":3,"file":"bundles/b970cc80953f1c145ccb/blurhash.worker.js","mappings":"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","sources":["webpack://element-web/./node_modules/blurhash/src/base83.ts","webpack://element-web/./node_modules/blurhash/src/utils.ts","webpack://element-web/./node_modules/blurhash/src/error.ts","webpack://element-web/./node_modules/blurhash/src/encode.ts","webpack://element-web/./src/workers/blurhash.worker.ts"],"sourcesContent":["const digitCharacters = [\n  \"0\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"H\",\n  \"I\",\n  \"J\",\n  \"K\",\n  \"L\",\n  \"M\",\n  \"N\",\n  \"O\",\n  \"P\",\n  \"Q\",\n  \"R\",\n  \"S\",\n  \"T\",\n  \"U\",\n  \"V\",\n  \"W\",\n  \"X\",\n  \"Y\",\n  \"Z\",\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"f\",\n  \"g\",\n  \"h\",\n  \"i\",\n  \"j\",\n  \"k\",\n  \"l\",\n  \"m\",\n  \"n\",\n  \"o\",\n  \"p\",\n  \"q\",\n  \"r\",\n  \"s\",\n  \"t\",\n  \"u\",\n  \"v\",\n  \"w\",\n  \"x\",\n  \"y\",\n  \"z\",\n  \"#\",\n  \"$\",\n  \"%\",\n  \"*\",\n  \"+\",\n  \",\",\n  \"-\",\n  \".\",\n  \":\",\n  \";\",\n  \"=\",\n  \"?\",\n  \"@\",\n  \"[\",\n  \"]\",\n  \"^\",\n  \"_\",\n  \"{\",\n  \"|\",\n  \"}\",\n  \"~\",\n];\n\nexport const decode83 = (str: String) => {\n  let value = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str[i];\n    const digit = digitCharacters.indexOf(c);\n    value = value * 83 + digit;\n  }\n  return value;\n};\n\nexport const encode83 = (n: number, length: number): string => {\n  var result = \"\";\n  for (let i = 1; i <= length; i++) {\n    let digit = (Math.floor(n) / Math.pow(83, length - i)) % 83;\n    result += digitCharacters[Math.floor(digit)];\n  }\n  return result;\n};\n","export const sRGBToLinear = (value: number) => {\n  let v = value / 255;\n  if (v <= 0.04045) {\n    return v / 12.92;\n  } else {\n    return Math.pow((v + 0.055) / 1.055, 2.4);\n  }\n};\n\nexport const linearTosRGB = (value: number) => {\n  let v = Math.max(0, Math.min(1, value));\n  if (v <= 0.0031308) {\n    return Math.trunc(v * 12.92 * 255 + 0.5);\n  } else {\n    return Math.trunc((1.055 * Math.pow(v, 1 / 2.4) - 0.055) * 255 + 0.5);\n  }\n};\n\nexport const sign = (n: number) => (n < 0 ? -1 : 1);\n\nexport const signPow = (val: number, exp: number) =>\n  sign(val) * Math.pow(Math.abs(val), exp);\n","export class ValidationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"ValidationError\";\n    this.message = message;\n  }\n}\n","import { encode83 } from \"./base83\";\nimport { sRGBToLinear, signPow, linearTosRGB } from \"./utils\";\nimport { ValidationError } from \"./error\";\n\ntype NumberTriplet = [number, number, number];\n\nconst bytesPerPixel = 4;\n\nconst multiplyBasisFunction = (\n  pixels: Uint8ClampedArray,\n  width: number,\n  height: number,\n  basisFunction: (i: number, j: number) => number\n): NumberTriplet => {\n  let r = 0;\n  let g = 0;\n  let b = 0;\n  const bytesPerRow = width * bytesPerPixel;\n\n  for (let x = 0; x < width; x++) {\n    const bytesPerPixelX = bytesPerPixel * x;\n\n    for (let y = 0; y < height; y++) {\n      const basePixelIndex = bytesPerPixelX + y * bytesPerRow;\n      const basis = basisFunction(x, y);\n      r +=\n        basis * sRGBToLinear(pixels[basePixelIndex]);\n      g +=\n        basis * sRGBToLinear(pixels[basePixelIndex + 1]);\n      b +=\n        basis * sRGBToLinear(pixels[basePixelIndex + 2]);\n    }\n  }\n\n  let scale = 1 / (width * height);\n\n  return [r * scale, g * scale, b * scale];\n};\n\nconst encodeDC = (value: NumberTriplet): number => {\n  const roundedR = linearTosRGB(value[0]);\n  const roundedG = linearTosRGB(value[1]);\n  const roundedB = linearTosRGB(value[2]);\n  return (roundedR << 16) + (roundedG << 8) + roundedB;\n};\n\nconst encodeAC = (value: NumberTriplet, maximumValue: number): number => {\n  let quantR = Math.floor(\n    Math.max(\n      0,\n      Math.min(18, Math.floor(signPow(value[0] / maximumValue, 0.5) * 9 + 9.5))\n    )\n  );\n  let quantG = Math.floor(\n    Math.max(\n      0,\n      Math.min(18, Math.floor(signPow(value[1] / maximumValue, 0.5) * 9 + 9.5))\n    )\n  );\n  let quantB = Math.floor(\n    Math.max(\n      0,\n      Math.min(18, Math.floor(signPow(value[2] / maximumValue, 0.5) * 9 + 9.5))\n    )\n  );\n\n  return quantR * 19 * 19 + quantG * 19 + quantB;\n};\n\nconst encode = (\n  pixels: Uint8ClampedArray,\n  width: number,\n  height: number,\n  componentX: number,\n  componentY: number\n): string => {\n  if (componentX < 1 || componentX > 9 || componentY < 1 || componentY > 9) {\n    throw new ValidationError(\"BlurHash must have between 1 and 9 components\");\n  }\n  if (width * height * 4 !== pixels.length) {\n    throw new ValidationError(\"Width and height must match the pixels array\");\n  }\n\n  let factors: Array<[number, number, number]> = [];\n  for (let y = 0; y < componentY; y++) {\n    for (let x = 0; x < componentX; x++) {\n      const normalisation = x == 0 && y == 0 ? 1 : 2;\n      const factor = multiplyBasisFunction(\n        pixels,\n        width,\n        height,\n        (i: number, j: number) =>\n          normalisation *\n          Math.cos((Math.PI * x * i) / width) *\n          Math.cos((Math.PI * y * j) / height)\n      );\n      factors.push(factor);\n    }\n  }\n\n  const dc = factors[0];\n  const ac = factors.slice(1);\n\n  let hash = \"\";\n\n  let sizeFlag = componentX - 1 + (componentY - 1) * 9;\n  hash += encode83(sizeFlag, 1);\n\n  let maximumValue: number;\n  if (ac.length > 0) {\n    let actualMaximumValue = Math.max(...ac.map((val) => Math.max(...val)));\n    let quantisedMaximumValue = Math.floor(\n      Math.max(0, Math.min(82, Math.floor(actualMaximumValue * 166 - 0.5)))\n    );\n    maximumValue = (quantisedMaximumValue + 1) / 166;\n    hash += encode83(quantisedMaximumValue, 1);\n  } else {\n    maximumValue = 1;\n    hash += encode83(0, 1);\n  }\n\n  hash += encode83(encodeDC(dc), 4);\n\n  ac.forEach((factor) => {\n    hash += encode83(encodeAC(factor, maximumValue), 2);\n  });\n\n  return hash;\n};\n\nexport default encode;\n","/*\nCopyright 2024 New Vector Ltd.\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport { encode } from \"blurhash\";\n\nimport { WorkerPayload } from \"./worker\";\n\nconst ctx: Worker = self as any;\n\nexport interface Request {\n    imageData: ImageData;\n}\n\nexport interface Response {\n    blurhash: string;\n}\n\nctx.addEventListener(\"message\", (event: MessageEvent<Request & WorkerPayload>): void => {\n    const { seq, imageData } = event.data;\n    const blurhash = encode(\n        imageData.data,\n        imageData.width,\n        imageData.height,\n        // use 4 components on the longer dimension, if square then both\n        imageData.width >= imageData.height ? 4 : 3,\n        imageData.height >= imageData.width ? 4 : 3,\n    );\n\n    ctx.postMessage({ seq, blurhash });\n});\n"],"names":["r","Math","floor","pow","max","min","trunc","e","abs","Error","constructor","super","this","name","message","b","length","cos","PI","push","slice","map","forEach","ctx","self","addEventListener","event","seq","imageData","data","blurhash","encode","width","height","postMessage"],"sourceRoot":""}