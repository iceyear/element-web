{"version":3,"file":"bundles/e28839082a73b5e16930/1127.js","mappings":"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","sources":["webpack://element-web/./src/async-components/views/dialogs/security/CreateSecretStorageDialog.tsx","webpack://element-web/./src/components/views/auth/PassphraseConfirmField.tsx","webpack://element-web/./src/components/views/auth/PassphraseField.tsx","webpack://element-web/./node_modules/file-saver/src/FileSaver.js"],"sourcesContent":["/*\nCopyright 2024 New Vector Ltd.\nCopyright 2019, 2020 , 2023 The Matrix.org Foundation C.I.C.\nCopyright 2018, 2019 New Vector Ltd\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport React, { createRef } from \"react\";\nimport FileSaver from \"file-saver\";\nimport { logger } from \"matrix-js-sdk/src/logger\";\nimport { AuthDict, CrossSigningKeys, MatrixError, UIAFlow, UIAResponse } from \"matrix-js-sdk/src/matrix\";\nimport { GeneratedSecretStorageKey } from \"matrix-js-sdk/src/crypto-api\";\nimport classNames from \"classnames\";\nimport CheckmarkIcon from \"@vector-im/compound-design-tokens/assets/web/icons/check\";\n\nimport { MatrixClientPeg } from \"../../../../MatrixClientPeg\";\nimport { _t, _td } from \"../../../../languageHandler\";\nimport Modal from \"../../../../Modal\";\nimport { copyNode } from \"../../../../utils/strings\";\nimport { SSOAuthEntry } from \"../../../../components/views/auth/InteractiveAuthEntryComponents\";\nimport PassphraseField from \"../../../../components/views/auth/PassphraseField\";\nimport StyledRadioButton from \"../../../../components/views/elements/StyledRadioButton\";\nimport AccessibleButton from \"../../../../components/views/elements/AccessibleButton\";\nimport DialogButtons from \"../../../../components/views/elements/DialogButtons\";\nimport InlineSpinner from \"../../../../components/views/elements/InlineSpinner\";\nimport {\n    getSecureBackupSetupMethods,\n    isSecureBackupRequired,\n    SecureBackupSetupMethod,\n} from \"../../../../utils/WellKnownUtils\";\nimport { ModuleRunner } from \"../../../../modules/ModuleRunner\";\nimport Field from \"../../../../components/views/elements/Field\";\nimport BaseDialog from \"../../../../components/views/dialogs/BaseDialog\";\nimport Spinner from \"../../../../components/views/elements/Spinner\";\nimport InteractiveAuthDialog from \"../../../../components/views/dialogs/InteractiveAuthDialog\";\nimport { IValidationResult } from \"../../../../components/views/elements/Validation\";\nimport PassphraseConfirmField from \"../../../../components/views/auth/PassphraseConfirmField\";\nimport { initialiseDehydration } from \"../../../../utils/device/dehydration\";\n\n// I made a mistake while converting this and it has to be fixed!\nenum Phase {\n    Loading = \"loading\",\n    LoadError = \"load_error\",\n    ChooseKeyPassphrase = \"choose_key_passphrase\",\n    Passphrase = \"passphrase\",\n    PassphraseConfirm = \"passphrase_confirm\",\n    ShowKey = \"show_key\",\n    Storing = \"storing\",\n    Stored = \"stored\",\n    ConfirmSkip = \"confirm_skip\",\n}\n\nconst PASSWORD_MIN_SCORE = 4; // So secure, many characters, much complex, wow, etc, etc.\n\ninterface IProps {\n    hasCancel?: boolean;\n    accountPassword?: string;\n    forceReset?: boolean;\n    resetCrossSigning?: boolean;\n    onFinished(ok?: boolean): void;\n}\n\ninterface IState {\n    phase: Phase;\n    passPhrase: string;\n    passPhraseValid: boolean;\n    passPhraseConfirm: string;\n    copied: boolean;\n    downloaded: boolean;\n    setPassphrase: boolean;\n\n    // does the server offer a UI auth flow with just m.login.password\n    // for /keys/device_signing/upload?\n    canUploadKeysWithPasswordOnly: boolean | null;\n    accountPassword: string;\n    accountPasswordCorrect: boolean | null;\n    canSkip: boolean;\n    passPhraseKeySelected: string;\n    error?: boolean;\n}\n\n/**\n * Walks the user through the process of creating a 4S passphrase and bootstrapping secret storage.\n *\n * If the user already has a key backup, follows a \"migration\" flow (aka \"Upgrade your encryption\") which\n * prompts the user to enter their backup decryption password (a Curve25519 private key, possibly derived\n * from a passphrase), and uses that as the (AES) 4S encryption key.\n */\nexport default class CreateSecretStorageDialog extends React.PureComponent<IProps, IState> {\n    public static defaultProps: Partial<IProps> = {\n        hasCancel: true,\n        forceReset: false,\n        resetCrossSigning: false,\n    };\n    private recoveryKey?: GeneratedSecretStorageKey;\n    private recoveryKeyNode = createRef<HTMLElement>();\n    private passphraseField = createRef<Field>();\n\n    public constructor(props: IProps) {\n        super(props);\n\n        const cli = MatrixClientPeg.safeGet();\n\n        let passPhraseKeySelected: SecureBackupSetupMethod;\n        const setupMethods = getSecureBackupSetupMethods(cli);\n        if (setupMethods.includes(SecureBackupSetupMethod.Key)) {\n            passPhraseKeySelected = SecureBackupSetupMethod.Key;\n        } else {\n            passPhraseKeySelected = SecureBackupSetupMethod.Passphrase;\n        }\n\n        const accountPassword = props.accountPassword || \"\";\n        let canUploadKeysWithPasswordOnly: boolean | null = null;\n        if (accountPassword) {\n            // If we have an account password in memory, let's simplify and\n            // assume it means password auth is also supported for device\n            // signing key upload as well. This avoids hitting the server to\n            // test auth flows, which may be slow under high load.\n            canUploadKeysWithPasswordOnly = true;\n        }\n\n        const keyFromCustomisations = ModuleRunner.instance.extensions.cryptoSetup.createSecretStorageKey();\n        const phase = keyFromCustomisations ? Phase.Loading : Phase.ChooseKeyPassphrase;\n\n        this.state = {\n            phase,\n            passPhrase: \"\",\n            passPhraseValid: false,\n            passPhraseConfirm: \"\",\n            copied: false,\n            downloaded: false,\n            setPassphrase: false,\n            // does the server offer a UI auth flow with just m.login.password\n            // for /keys/device_signing/upload?\n            accountPasswordCorrect: null,\n            canSkip: !isSecureBackupRequired(cli),\n            canUploadKeysWithPasswordOnly,\n            passPhraseKeySelected,\n            accountPassword,\n        };\n    }\n\n    public componentDidMount(): void {\n        const keyFromCustomisations = ModuleRunner.instance.extensions.cryptoSetup.createSecretStorageKey();\n        if (keyFromCustomisations) this.initExtension(keyFromCustomisations);\n\n        if (this.state.canUploadKeysWithPasswordOnly === null) {\n            this.queryKeyUploadAuth();\n        }\n    }\n\n    private initExtension(keyFromCustomisations: Uint8Array): void {\n        logger.log(\"CryptoSetupExtension: Created key via extension, jumping to bootstrap step\");\n        this.recoveryKey = {\n            privateKey: keyFromCustomisations,\n        };\n        this.bootstrapSecretStorage();\n    }\n\n    private async queryKeyUploadAuth(): Promise<void> {\n        try {\n            await MatrixClientPeg.safeGet().uploadDeviceSigningKeys(undefined, {} as CrossSigningKeys);\n            // We should never get here: the server should always require\n            // UI auth to upload device signing keys. If we do, we upload\n            // no keys which would be a no-op.\n            logger.log(\"uploadDeviceSigningKeys unexpectedly succeeded without UI auth!\");\n        } catch (error) {\n            if (!(error instanceof MatrixError) || !error.data || !error.data.flows) {\n                logger.log(\"uploadDeviceSigningKeys advertised no flows!\");\n                return;\n            }\n            const canUploadKeysWithPasswordOnly = error.data.flows.some((f: UIAFlow) => {\n                return f.stages.length === 1 && f.stages[0] === \"m.login.password\";\n            });\n            this.setState({\n                canUploadKeysWithPasswordOnly,\n            });\n        }\n    }\n\n    private onKeyPassphraseChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            passPhraseKeySelected: e.target.value,\n        });\n    };\n\n    private onChooseKeyPassphraseFormSubmit = async (): Promise<void> => {\n        if (this.state.passPhraseKeySelected === SecureBackupSetupMethod.Key) {\n            this.recoveryKey = await MatrixClientPeg.safeGet().getCrypto()!.createRecoveryKeyFromPassphrase();\n            this.setState({\n                copied: false,\n                downloaded: false,\n                setPassphrase: false,\n                phase: Phase.ShowKey,\n            });\n        } else {\n            this.setState({\n                copied: false,\n                downloaded: false,\n                phase: Phase.Passphrase,\n            });\n        }\n    };\n\n    private onCopyClick = (): void => {\n        const successful = copyNode(this.recoveryKeyNode.current);\n        if (successful) {\n            this.setState({\n                copied: true,\n            });\n        }\n    };\n\n    private onDownloadClick = (): void => {\n        if (!this.recoveryKey) return;\n        const blob = new Blob([this.recoveryKey.encodedPrivateKey!], {\n            type: \"text/plain;charset=us-ascii\",\n        });\n        FileSaver.saveAs(blob, \"security-key.txt\");\n\n        this.setState({\n            downloaded: true,\n        });\n    };\n\n    private doBootstrapUIAuth = async (\n        makeRequest: (authData: AuthDict) => Promise<UIAResponse<void>>,\n    ): Promise<void> => {\n        if (this.state.canUploadKeysWithPasswordOnly && this.state.accountPassword) {\n            await makeRequest({\n                type: \"m.login.password\",\n                identifier: {\n                    type: \"m.id.user\",\n                    user: MatrixClientPeg.safeGet().getSafeUserId(),\n                },\n                password: this.state.accountPassword,\n            });\n        } else {\n            const dialogAesthetics = {\n                [SSOAuthEntry.PHASE_PREAUTH]: {\n                    title: _t(\"auth|uia|sso_title\"),\n                    body: _t(\"auth|uia|sso_preauth_body\"),\n                    continueText: _t(\"auth|sso\"),\n                    continueKind: \"primary\",\n                },\n                [SSOAuthEntry.PHASE_POSTAUTH]: {\n                    title: _t(\"encryption|confirm_encryption_setup_title\"),\n                    body: _t(\"encryption|confirm_encryption_setup_body\"),\n                    continueText: _t(\"action|confirm\"),\n                    continueKind: \"primary\",\n                },\n            };\n\n            const { finished } = Modal.createDialog(InteractiveAuthDialog, {\n                title: _t(\"encryption|bootstrap_title\"),\n                matrixClient: MatrixClientPeg.safeGet(),\n                makeRequest,\n                aestheticsForStagePhases: {\n                    [SSOAuthEntry.LOGIN_TYPE]: dialogAesthetics,\n                    [SSOAuthEntry.UNSTABLE_LOGIN_TYPE]: dialogAesthetics,\n                },\n            });\n            const [confirmed] = await finished;\n            if (!confirmed) {\n                throw new Error(\"Cross-signing key upload auth canceled\");\n            }\n        }\n    };\n\n    private bootstrapSecretStorage = async (): Promise<void> => {\n        const cli = MatrixClientPeg.safeGet();\n        const crypto = cli.getCrypto()!;\n        const { forceReset, resetCrossSigning } = this.props;\n\n        let backupInfo;\n        // First, unless we know we want to do a reset, we see if there is an existing key backup\n        if (!forceReset) {\n            try {\n                this.setState({ phase: Phase.Loading });\n                backupInfo = await crypto.getKeyBackupInfo();\n            } catch (e) {\n                logger.error(\"Error fetching backup data from server\", e);\n                this.setState({ phase: Phase.LoadError });\n                return;\n            }\n        }\n\n        this.setState({\n            phase: Phase.Storing,\n            error: undefined,\n        });\n\n        try {\n            if (forceReset) {\n                /* Resetting cross-signing requires secret storage to be reset\n                 * (otherwise it will try to store the cross-signing keys in the\n                 * old secret storage, and may prompt for the old key, which is\n                 * probably not available), and resetting key backup requires\n                 * cross-signing to be reset (so that the new backup can be\n                 * signed by the new cross-signing key).  So we reset secret\n                 * storage first, then cross-signing, then key backup.\n                 */\n                logger.log(\"Forcing secret storage reset\");\n                await crypto.bootstrapSecretStorage({\n                    createSecretStorageKey: async () => this.recoveryKey!,\n                    setupNewSecretStorage: true,\n                });\n                if (resetCrossSigning) {\n                    logger.log(\"Resetting cross signing\");\n                    await crypto.bootstrapCrossSigning({\n                        authUploadDeviceSigningKeys: this.doBootstrapUIAuth,\n                        setupNewCrossSigning: true,\n                    });\n                }\n                logger.log(\"Resetting key backup\");\n                await crypto.resetKeyBackup();\n            } else {\n                // For password authentication users after 2020-09, this cross-signing\n                // step will be a no-op since it is now setup during registration or login\n                // when needed. We should keep this here to cover other cases such as:\n                //   * Users with existing sessions prior to 2020-09 changes\n                //   * SSO authentication users which require interactive auth to upload\n                //     keys (and also happen to skip all post-authentication flows at the\n                //     moment via token login)\n                await crypto.bootstrapCrossSigning({\n                    authUploadDeviceSigningKeys: this.doBootstrapUIAuth,\n                });\n                await crypto.bootstrapSecretStorage({\n                    createSecretStorageKey: async () => this.recoveryKey!,\n                    setupNewKeyBackup: !backupInfo,\n                });\n            }\n            await initialiseDehydration({ createNewKey: true });\n\n            this.setState({\n                phase: Phase.Stored,\n            });\n        } catch (e) {\n            this.setState({ error: true });\n            logger.error(\"Error bootstrapping secret storage\", e);\n        }\n    };\n\n    private onCancel = (): void => {\n        this.props.onFinished(false);\n    };\n\n    private onLoadRetryClick = (): void => {\n        this.bootstrapSecretStorage();\n    };\n\n    private onShowKeyContinueClick = (): void => {\n        this.bootstrapSecretStorage();\n    };\n\n    private onCancelClick = (): void => {\n        this.setState({ phase: Phase.ConfirmSkip });\n    };\n\n    private onGoBackClick = (): void => {\n        this.setState({ phase: Phase.ChooseKeyPassphrase });\n    };\n\n    private onPassPhraseNextClick = async (e: React.FormEvent): Promise<void> => {\n        e.preventDefault();\n        if (!this.passphraseField.current) return; // unmounting\n\n        await this.passphraseField.current.validate({ allowEmpty: false });\n        if (!this.passphraseField.current.state.valid) {\n            this.passphraseField.current.focus();\n            this.passphraseField.current.validate({ allowEmpty: false, focused: true });\n            return;\n        }\n\n        this.setState({ phase: Phase.PassphraseConfirm });\n    };\n\n    private onPassPhraseConfirmNextClick = async (e: React.FormEvent): Promise<void> => {\n        e.preventDefault();\n\n        if (this.state.passPhrase !== this.state.passPhraseConfirm) return;\n\n        this.recoveryKey = await MatrixClientPeg.safeGet()\n            .getCrypto()!\n            .createRecoveryKeyFromPassphrase(this.state.passPhrase);\n        this.setState({\n            copied: false,\n            downloaded: false,\n            setPassphrase: true,\n            phase: Phase.ShowKey,\n        });\n    };\n\n    private onSetAgainClick = (): void => {\n        this.setState({\n            passPhrase: \"\",\n            passPhraseValid: false,\n            passPhraseConfirm: \"\",\n            phase: Phase.Passphrase,\n        });\n    };\n\n    private onPassPhraseValidate = (result: IValidationResult): void => {\n        this.setState({\n            passPhraseValid: !!result.valid,\n        });\n    };\n\n    private onPassPhraseChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            passPhrase: e.target.value,\n        });\n    };\n\n    private onPassPhraseConfirmChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            passPhraseConfirm: e.target.value,\n        });\n    };\n\n    private renderOptionKey(): JSX.Element {\n        return (\n            <StyledRadioButton\n                key={SecureBackupSetupMethod.Key}\n                value={SecureBackupSetupMethod.Key}\n                name=\"keyPassphrase\"\n                checked={this.state.passPhraseKeySelected === SecureBackupSetupMethod.Key}\n                onChange={this.onKeyPassphraseChange}\n                outlined\n            >\n                <div className=\"mx_CreateSecretStorageDialog_optionTitle\">\n                    <span className=\"mx_CreateSecretStorageDialog_optionIcon mx_CreateSecretStorageDialog_optionIcon_secureBackup\" />\n                    {_t(\"settings|key_backup|setup_secure_backup|generate_security_key_title\")}\n                </div>\n                <div>{_t(\"settings|key_backup|setup_secure_backup|generate_security_key_description\")}</div>\n            </StyledRadioButton>\n        );\n    }\n\n    private renderOptionPassphrase(): JSX.Element {\n        return (\n            <StyledRadioButton\n                key={SecureBackupSetupMethod.Passphrase}\n                value={SecureBackupSetupMethod.Passphrase}\n                name=\"keyPassphrase\"\n                checked={this.state.passPhraseKeySelected === SecureBackupSetupMethod.Passphrase}\n                onChange={this.onKeyPassphraseChange}\n                outlined\n            >\n                <div className=\"mx_CreateSecretStorageDialog_optionTitle\">\n                    <span className=\"mx_CreateSecretStorageDialog_optionIcon mx_CreateSecretStorageDialog_optionIcon_securePhrase\" />\n                    {_t(\"settings|key_backup|setup_secure_backup|enter_phrase_title\")}\n                </div>\n                <div>{_t(\"settings|key_backup|setup_secure_backup|use_phrase_only_you_know\")}</div>\n            </StyledRadioButton>\n        );\n    }\n\n    private renderPhaseChooseKeyPassphrase(): JSX.Element {\n        const setupMethods = getSecureBackupSetupMethods(MatrixClientPeg.safeGet());\n        const optionKey = setupMethods.includes(SecureBackupSetupMethod.Key) ? this.renderOptionKey() : null;\n        const optionPassphrase = setupMethods.includes(SecureBackupSetupMethod.Passphrase)\n            ? this.renderOptionPassphrase()\n            : null;\n\n        return (\n            <form onSubmit={this.onChooseKeyPassphraseFormSubmit}>\n                <p className=\"mx_CreateSecretStorageDialog_centeredBody\">\n                    {_t(\"settings|key_backup|setup_secure_backup|description\")}\n                </p>\n                <div className=\"mx_CreateSecretStorageDialog_primaryContainer\" role=\"radiogroup\">\n                    {optionKey}\n                    {optionPassphrase}\n                </div>\n                <DialogButtons\n                    primaryButton={_t(\"action|continue\")}\n                    onPrimaryButtonClick={this.onChooseKeyPassphraseFormSubmit}\n                    onCancel={this.onCancelClick}\n                    hasCancel={this.state.canSkip}\n                />\n            </form>\n        );\n    }\n\n    private renderPhasePassPhrase(): JSX.Element {\n        return (\n            <form onSubmit={this.onPassPhraseNextClick}>\n                <p>{_t(\"settings|key_backup|setup_secure_backup|enter_phrase_description\")}</p>\n\n                <div className=\"mx_CreateSecretStorageDialog_passPhraseContainer\">\n                    <PassphraseField\n                        id=\"mx_passPhraseInput\"\n                        className=\"mx_CreateSecretStorageDialog_passPhraseField\"\n                        onChange={this.onPassPhraseChange}\n                        minScore={PASSWORD_MIN_SCORE}\n                        value={this.state.passPhrase}\n                        onValidate={this.onPassPhraseValidate}\n                        fieldRef={this.passphraseField}\n                        autoFocus={true}\n                        label={_td(\"settings|key_backup|setup_secure_backup|enter_phrase_title\")}\n                        labelEnterPassword={_td(\"settings|key_backup|setup_secure_backup|enter_phrase_title\")}\n                        labelStrongPassword={_td(\"settings|key_backup|setup_secure_backup|phrase_strong_enough\")}\n                        labelAllowedButUnsafe={_td(\"settings|key_backup|setup_secure_backup|phrase_strong_enough\")}\n                    />\n                </div>\n\n                <DialogButtons\n                    primaryButton={_t(\"action|continue\")}\n                    onPrimaryButtonClick={this.onPassPhraseNextClick}\n                    hasCancel={false}\n                    disabled={!this.state.passPhraseValid}\n                >\n                    <button type=\"button\" onClick={this.onCancelClick} className=\"danger\">\n                        {_t(\"action|cancel\")}\n                    </button>\n                </DialogButtons>\n            </form>\n        );\n    }\n\n    private renderPhasePassPhraseConfirm(): JSX.Element {\n        let matchText;\n        let changeText;\n        if (this.state.passPhraseConfirm === this.state.passPhrase) {\n            matchText = _t(\"settings|key_backup|setup_secure_backup|pass_phrase_match_success\");\n            changeText = _t(\"settings|key_backup|setup_secure_backup|use_different_passphrase\");\n        } else if (!this.state.passPhrase.startsWith(this.state.passPhraseConfirm)) {\n            // only tell them they're wrong if they've actually gone wrong.\n            // Security conscious readers will note that if you left element-web unattended\n            // on this screen, this would make it easy for a malicious person to guess\n            // your passphrase one letter at a time, but they could get this faster by\n            // just opening the browser's developer tools and reading it.\n            // Note that not having typed anything at all will not hit this clause and\n            // fall through so empty box === no hint.\n            matchText = _t(\"settings|key_backup|setup_secure_backup|pass_phrase_match_failed\");\n            changeText = _t(\"settings|key_backup|setup_secure_backup|set_phrase_again\");\n        }\n\n        let passPhraseMatch: JSX.Element | undefined;\n        if (matchText) {\n            passPhraseMatch = (\n                <div>\n                    <div>{matchText}</div>\n                    <AccessibleButton kind=\"link\" onClick={this.onSetAgainClick}>\n                        {changeText}\n                    </AccessibleButton>\n                </div>\n            );\n        }\n        return (\n            <form onSubmit={this.onPassPhraseConfirmNextClick}>\n                <p>{_t(\"settings|key_backup|setup_secure_backup|enter_phrase_to_confirm\")}</p>\n                <div className=\"mx_CreateSecretStorageDialog_passPhraseContainer\">\n                    <PassphraseConfirmField\n                        id=\"mx_passPhraseInput\"\n                        onChange={this.onPassPhraseConfirmChange}\n                        value={this.state.passPhraseConfirm}\n                        className=\"mx_CreateSecretStorageDialog_passPhraseField\"\n                        label={_td(\"settings|key_backup|setup_secure_backup|confirm_security_phrase\")}\n                        labelRequired={_td(\"settings|key_backup|setup_secure_backup|confirm_security_phrase\")}\n                        labelInvalid={_td(\"settings|key_backup|setup_secure_backup|pass_phrase_match_failed\")}\n                        autoFocus={true}\n                        password={this.state.passPhrase}\n                    />\n                    <div className=\"mx_CreateSecretStorageDialog_passPhraseMatch\">{passPhraseMatch}</div>\n                </div>\n                <DialogButtons\n                    primaryButton={_t(\"action|continue\")}\n                    onPrimaryButtonClick={this.onPassPhraseConfirmNextClick}\n                    hasCancel={false}\n                    disabled={this.state.passPhrase !== this.state.passPhraseConfirm}\n                >\n                    <button type=\"button\" onClick={this.onCancelClick} className=\"danger\">\n                        {_t(\"action|skip\")}\n                    </button>\n                </DialogButtons>\n            </form>\n        );\n    }\n\n    private renderPhaseShowKey(): JSX.Element {\n        let continueButton: JSX.Element;\n        if (this.state.phase === Phase.ShowKey) {\n            continueButton = (\n                <DialogButtons\n                    primaryButton={_t(\"action|continue\")}\n                    disabled={!this.state.downloaded && !this.state.copied && !this.state.setPassphrase}\n                    onPrimaryButtonClick={this.onShowKeyContinueClick}\n                    hasCancel={false}\n                />\n            );\n        } else {\n            continueButton = (\n                <div className=\"mx_CreateSecretStorageDialog_continueSpinner\">\n                    <InlineSpinner />\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <p>{_t(\"settings|key_backup|setup_secure_backup|security_key_safety_reminder\")}</p>\n                <div className=\"mx_CreateSecretStorageDialog_primaryContainer mx_CreateSecretStorageDialog_recoveryKeyPrimarycontainer\">\n                    <div className=\"mx_CreateSecretStorageDialog_recoveryKeyContainer\">\n                        <div className=\"mx_CreateSecretStorageDialog_recoveryKey\">\n                            <code ref={this.recoveryKeyNode}>{this.recoveryKey?.encodedPrivateKey}</code>\n                        </div>\n                        <div className=\"mx_CreateSecretStorageDialog_recoveryKeyButtons\">\n                            <AccessibleButton\n                                kind=\"primary\"\n                                className=\"mx_Dialog_primary\"\n                                onClick={this.onDownloadClick}\n                                disabled={this.state.phase === Phase.Storing}\n                            >\n                                {_t(\"action|download\")}\n                            </AccessibleButton>\n                            <span>\n                                {_t(\"settings|key_backup|setup_secure_backup|download_or_copy\", {\n                                    downloadButton: \"\",\n                                    copyButton: \"\",\n                                })}\n                            </span>\n                            <AccessibleButton\n                                kind=\"primary\"\n                                className=\"mx_Dialog_primary mx_CreateSecretStorageDialog_recoveryKeyButtons_copyBtn\"\n                                onClick={this.onCopyClick}\n                                disabled={this.state.phase === Phase.Storing}\n                            >\n                                {this.state.copied ? _t(\"common|copied\") : _t(\"action|copy\")}\n                            </AccessibleButton>\n                        </div>\n                    </div>\n                </div>\n                {continueButton}\n            </div>\n        );\n    }\n\n    private renderBusyPhase(): JSX.Element {\n        return (\n            <div>\n                <Spinner />\n            </div>\n        );\n    }\n\n    private renderStoredPhase(): JSX.Element {\n        return (\n            <>\n                <p className=\"mx_Dialog_content\">\n                    {_t(\"settings|key_backup|setup_secure_backup|backup_setup_success_description\")}\n                </p>\n                <DialogButtons\n                    primaryButton={_t(\"action|done\")}\n                    onPrimaryButtonClick={() => this.props.onFinished(true)}\n                    hasCancel={false}\n                />\n            </>\n        );\n    }\n\n    private renderPhaseLoadError(): JSX.Element {\n        return (\n            <div>\n                <p>{_t(\"settings|key_backup|setup_secure_backup|secret_storage_query_failure\")}</p>\n                <div className=\"mx_Dialog_buttons\">\n                    <DialogButtons\n                        primaryButton={_t(\"action|retry\")}\n                        onPrimaryButtonClick={this.onLoadRetryClick}\n                        hasCancel={this.state.canSkip}\n                        onCancel={this.onCancel}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    private renderPhaseSkipConfirm(): JSX.Element {\n        return (\n            <div>\n                <p>{_t(\"settings|key_backup|setup_secure_backup|cancel_warning\")}</p>\n                <p>{_t(\"settings|key_backup|setup_secure_backup|settings_reminder\")}</p>\n                <DialogButtons\n                    primaryButton={_t(\"action|go_back\")}\n                    onPrimaryButtonClick={this.onGoBackClick}\n                    hasCancel={false}\n                >\n                    <button type=\"button\" className=\"danger\" onClick={this.onCancel}>\n                        {_t(\"action|cancel\")}\n                    </button>\n                </DialogButtons>\n            </div>\n        );\n    }\n\n    private titleForPhase(phase: Phase): string {\n        switch (phase) {\n            case Phase.ChooseKeyPassphrase:\n                return _t(\"encryption|set_up_toast_title\");\n            case Phase.Passphrase:\n                return _t(\"settings|key_backup|setup_secure_backup|title_set_phrase\");\n            case Phase.PassphraseConfirm:\n                return _t(\"settings|key_backup|setup_secure_backup|title_confirm_phrase\");\n            case Phase.ConfirmSkip:\n                return _t(\"common|are_you_sure\");\n            case Phase.ShowKey:\n                return _t(\"settings|key_backup|setup_secure_backup|title_save_key\");\n            case Phase.Storing:\n                return _t(\"encryption|bootstrap_title\");\n            case Phase.Stored:\n                return _t(\"settings|key_backup|setup_secure_backup|backup_setup_success_title\");\n            default:\n                return \"\";\n        }\n    }\n\n    private get topComponent(): React.ReactNode | null {\n        if (this.state.phase === Phase.Stored) {\n            return <CheckmarkIcon className=\"mx_Icon mx_Icon_circle-40 mx_Icon_accent mx_Icon_bg-accent-light\" />;\n        }\n\n        return null;\n    }\n\n    private get classNames(): string {\n        return classNames(\"mx_CreateSecretStorageDialog\", {\n            mx_SuccessDialog: this.state.phase === Phase.Stored,\n        });\n    }\n\n    public render(): React.ReactNode {\n        let content;\n        if (this.state.error) {\n            content = (\n                <div>\n                    <p>{_t(\"settings|key_backup|setup_secure_backup|unable_to_setup\")}</p>\n                    <div className=\"mx_Dialog_buttons\">\n                        <DialogButtons\n                            primaryButton={_t(\"action|retry\")}\n                            onPrimaryButtonClick={this.bootstrapSecretStorage}\n                            hasCancel={this.state.canSkip}\n                            onCancel={this.onCancel}\n                        />\n                    </div>\n                </div>\n            );\n        } else {\n            switch (this.state.phase) {\n                case Phase.Loading:\n                    content = this.renderBusyPhase();\n                    break;\n                case Phase.LoadError:\n                    content = this.renderPhaseLoadError();\n                    break;\n                case Phase.ChooseKeyPassphrase:\n                    content = this.renderPhaseChooseKeyPassphrase();\n                    break;\n                case Phase.Passphrase:\n                    content = this.renderPhasePassPhrase();\n                    break;\n                case Phase.PassphraseConfirm:\n                    content = this.renderPhasePassPhraseConfirm();\n                    break;\n                case Phase.ShowKey:\n                    content = this.renderPhaseShowKey();\n                    break;\n                case Phase.Storing:\n                    content = this.renderBusyPhase();\n                    break;\n                case Phase.Stored:\n                    content = this.renderStoredPhase();\n                    break;\n                case Phase.ConfirmSkip:\n                    content = this.renderPhaseSkipConfirm();\n                    break;\n            }\n        }\n\n        let titleClass: string | string[] | undefined;\n        switch (this.state.phase) {\n            case Phase.Passphrase:\n            case Phase.PassphraseConfirm:\n                titleClass = [\n                    \"mx_CreateSecretStorageDialog_titleWithIcon\",\n                    \"mx_CreateSecretStorageDialog_securePhraseTitle\",\n                ];\n                break;\n            case Phase.ShowKey:\n                titleClass = [\n                    \"mx_CreateSecretStorageDialog_titleWithIcon\",\n                    \"mx_CreateSecretStorageDialog_secureBackupTitle\",\n                ];\n                break;\n            case Phase.ChooseKeyPassphrase:\n                titleClass = \"mx_CreateSecretStorageDialog_centeredTitle\";\n                break;\n        }\n\n        return (\n            <BaseDialog\n                className={this.classNames}\n                onFinished={this.props.onFinished}\n                top={this.topComponent}\n                title={this.titleForPhase(this.state.phase)}\n                titleClass={titleClass}\n                hasCancel={this.props.hasCancel && [Phase.Passphrase].includes(this.state.phase)}\n                fixedWidth={false}\n            >\n                <div>{content}</div>\n            </BaseDialog>\n        );\n    }\n}\n","/*\nCopyright 2024 New Vector Ltd.\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport React, { ComponentProps, PureComponent, RefCallback, RefObject } from \"react\";\n\nimport Field, { IInputProps } from \"../elements/Field\";\nimport withValidation, { IFieldState, IValidationResult } from \"../elements/Validation\";\nimport { _t, _td, TranslationKey } from \"../../../languageHandler\";\n\ninterface IProps extends Omit<IInputProps, \"onValidate\" | \"label\" | \"element\"> {\n    id?: string;\n    fieldRef?: RefCallback<Field> | RefObject<Field>;\n    autoComplete?: string;\n    value: string;\n    password: string; // The password we're confirming\n\n    label: TranslationKey;\n    labelRequired: TranslationKey;\n    labelInvalid: TranslationKey;\n    tooltipAlignment?: ComponentProps<typeof Field>[\"tooltipAlignment\"];\n    onChange(ev: React.FormEvent<HTMLElement>): void;\n    onValidate?(result: IValidationResult): void;\n}\n\nclass PassphraseConfirmField extends PureComponent<IProps> {\n    public static defaultProps = {\n        label: _td(\"auth|change_password_confirm_label\"),\n        labelRequired: _td(\"auth|change_password_confirm_label\"),\n        labelInvalid: _td(\"auth|change_password_confirm_invalid\"),\n    };\n\n    private validate = withValidation({\n        rules: [\n            {\n                key: \"required\",\n                test: ({ value, allowEmpty }) => allowEmpty || !!value,\n                invalid: () => _t(this.props.labelRequired),\n            },\n            {\n                key: \"match\",\n                test: ({ value }) => !value || value === this.props.password,\n                invalid: () => _t(this.props.labelInvalid),\n            },\n        ],\n    });\n\n    private onValidate = async (fieldState: IFieldState): Promise<IValidationResult> => {\n        const result = await this.validate(fieldState);\n        if (this.props.onValidate) {\n            this.props.onValidate(result);\n        }\n\n        return result;\n    };\n\n    public render(): React.ReactNode {\n        return (\n            <Field\n                id={this.props.id}\n                ref={this.props.fieldRef}\n                type=\"password\"\n                label={_t(this.props.label)}\n                autoComplete={this.props.autoComplete}\n                value={this.props.value}\n                onChange={this.props.onChange}\n                onValidate={this.onValidate}\n                autoFocus={this.props.autoFocus}\n                tooltipAlignment={this.props.tooltipAlignment}\n            />\n        );\n    }\n}\n\nexport default PassphraseConfirmField;\n","/*\nCopyright 2024 New Vector Ltd.\nCopyright 2020 The Matrix.org Foundation C.I.C.\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport React, { ComponentProps, PureComponent, RefCallback, RefObject } from \"react\";\nimport classNames from \"classnames\";\n\nimport type { ZxcvbnResult } from \"@zxcvbn-ts/core\";\nimport SdkConfig from \"../../../SdkConfig\";\nimport withValidation, { IFieldState, IValidationResult } from \"../elements/Validation\";\nimport { _t, _td, TranslationKey } from \"../../../languageHandler\";\nimport Field, { IInputProps } from \"../elements/Field\";\nimport { MatrixClientPeg } from \"../../../MatrixClientPeg\";\n\ninterface IProps extends Omit<IInputProps, \"onValidate\" | \"element\"> {\n    autoFocus?: boolean;\n    id?: string;\n    className?: string;\n    minScore: 0 | 1 | 2 | 3 | 4;\n    value: string;\n    fieldRef?: RefCallback<Field> | RefObject<Field>;\n    // Additional strings such as a username used to catch bad passwords\n    userInputs?: string[];\n\n    label: TranslationKey;\n    labelEnterPassword: TranslationKey;\n    labelStrongPassword: TranslationKey;\n    labelAllowedButUnsafe: TranslationKey;\n    tooltipAlignment?: ComponentProps<typeof Field>[\"tooltipAlignment\"];\n\n    onChange(ev: React.FormEvent<HTMLElement>): void;\n    onValidate?(result: IValidationResult): void;\n}\n\nclass PassphraseField extends PureComponent<IProps> {\n    public static defaultProps = {\n        label: _td(\"common|password\"),\n        labelEnterPassword: _td(\"auth|password_field_label\"),\n        labelStrongPassword: _td(\"auth|password_field_strong_label\"),\n        labelAllowedButUnsafe: _td(\"auth|password_field_weak_label\"),\n    };\n\n    public readonly validate = withValidation<this, ZxcvbnResult | null>({\n        description: function (complexity) {\n            const score = complexity ? complexity.score : 0;\n            return <progress className=\"mx_PassphraseField_progress\" max={4} value={score} />;\n        },\n        deriveData: async ({ value }): Promise<ZxcvbnResult | null> => {\n            if (!value) return null;\n            const { scorePassword } = await import(\"../../../utils/PasswordScorer\");\n            return scorePassword(MatrixClientPeg.get(), value, this.props.userInputs);\n        },\n        rules: [\n            {\n                key: \"required\",\n                test: ({ value, allowEmpty }) => allowEmpty || !!value,\n                invalid: () => _t(this.props.labelEnterPassword),\n            },\n            {\n                key: \"complexity\",\n                test: async function ({ value }, complexity): Promise<boolean> {\n                    if (!value || !complexity) {\n                        return false;\n                    }\n                    const safe = complexity.score >= this.props.minScore;\n                    const allowUnsafe = SdkConfig.get(\"dangerously_allow_unsafe_and_insecure_passwords\");\n                    return allowUnsafe || safe;\n                },\n                valid: function (complexity) {\n                    // Unsafe passwords that are valid are only possible through a\n                    // configuration flag. We'll print some helper text to signal\n                    // to the user that their password is allowed, but unsafe.\n                    if (complexity && complexity.score >= this.props.minScore) {\n                        return _t(this.props.labelStrongPassword);\n                    }\n                    return _t(this.props.labelAllowedButUnsafe);\n                },\n                invalid: function (complexity) {\n                    if (!complexity) {\n                        return null;\n                    }\n                    const { feedback } = complexity;\n                    return feedback.warning || feedback.suggestions[0] || _t(\"auth|password_field_keep_going_prompt\");\n                },\n            },\n        ],\n        memoize: true,\n    });\n\n    public onValidate = async (fieldState: IFieldState): Promise<IValidationResult> => {\n        const result = await this.validate(fieldState);\n        if (this.props.onValidate) {\n            this.props.onValidate(result);\n        }\n        return result;\n    };\n\n    public render(): React.ReactNode {\n        return (\n            <Field\n                id={this.props.id}\n                autoFocus={this.props.autoFocus}\n                className={classNames(\"mx_PassphraseField\", this.props.className)}\n                ref={this.props.fieldRef}\n                type=\"password\"\n                autoComplete=\"new-password\"\n                label={_t(this.props.label)}\n                value={this.props.value}\n                onChange={this.props.onChange}\n                onValidate={this.onValidate}\n                tooltipAlignment={this.props.tooltipAlignment}\n            />\n        );\n    }\n}\n\nexport default PassphraseField;\n","/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = typeof window === 'object' && window.window === window\n  ? window : typeof self === 'object' && self.self === self\n  ? self : typeof global === 'object' && global.global === global\n  ? global\n  : this\n\nfunction bom (blob, opts) {\n  if (typeof opts === 'undefined') opts = { autoBom: false }\n  else if (typeof opts !== 'object') {\n    console.warn('Deprecated: Expected third argument to be a object')\n    opts = { autoBom: !opts }\n  }\n\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })\n  }\n  return blob\n}\n\nfunction download (url, name, opts) {\n  var xhr = new XMLHttpRequest()\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts)\n  }\n  xhr.onerror = function () {\n    console.error('could not download file')\n  }\n  xhr.send()\n}\n\nfunction corsEnabled (url) {\n  var xhr = new XMLHttpRequest()\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false)\n  try {\n    xhr.send()\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299\n}\n\n// `a.click()` doesn't work for all browsers (#465)\nfunction click (node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'))\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents')\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,\n                          20, false, false, false, false, 0, null)\n    node.dispatchEvent(evt)\n  }\n}\n\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nvar isMacOSWebView = _global.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent)\n\nvar saveAs = _global.saveAs || (\n  // probably in some web worker\n  (typeof window !== 'object' || window !== _global)\n    ? function saveAs () { /* noop */ }\n\n  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView\n  : ('download' in HTMLAnchorElement.prototype && !isMacOSWebView)\n  ? function saveAs (blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL\n    var a = document.createElement('a')\n    name = name || blob.name || 'download'\n\n    a.download = name\n    a.rel = 'noopener' // tabnabbing\n\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href)\n          ? download(blob, name, opts)\n          : click(a, a.target = '_blank')\n      } else {\n        click(a)\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob)\n      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s\n      setTimeout(function () { click(a) }, 0)\n    }\n  }\n\n  // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator\n  ? function saveAs (blob, name, opts) {\n    name = name || blob.name || 'download'\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts)\n      } else {\n        var a = document.createElement('a')\n        a.href = blob\n        a.target = '_blank'\n        setTimeout(function () { click(a) })\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name)\n    }\n  }\n\n  // Fallback to using FileReader and a popup\n  : function saveAs (blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank')\n    if (popup) {\n      popup.document.title =\n      popup.document.body.innerText = 'downloading...'\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts)\n\n    var force = blob.type === 'application/octet-stream'\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\n\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) && typeof FileReader !== 'undefined') {\n      // Safari doesn't allow downloading of blob URLs\n      var reader = new FileReader()\n      reader.onloadend = function () {\n        var url = reader.result\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n        if (popup) popup.location.href = url\n        else location = url\n        popup = null // reverse-tabnabbing #460\n      }\n      reader.readAsDataURL(blob)\n    } else {\n      var URL = _global.URL || _global.webkitURL\n      var url = URL.createObjectURL(blob)\n      if (popup) popup.location = url\n      else location.href = url\n      popup = null // reverse-tabnabbing #460\n      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s\n    }\n  }\n)\n\n_global.saveAs = saveAs.saveAs = saveAs\n\nif (typeof module !== 'undefined') {\n  module.exports = saveAs;\n}\n"],"names":["Phase","CreateSecretStorageDialog","React","constructor","props","super","_defineProperty","createRef","e","this","setState","passPhraseKeySelected","target","value","async","state","SecureBackupSetupMethod","Key","recoveryKey","MatrixClientPeg","safeGet","getCrypto","createRecoveryKeyFromPassphrase","copied","downloaded","setPassphrase","phase","ShowKey","Passphrase","copyNode","recoveryKeyNode","current","blob","Blob","encodedPrivateKey","type","FileSaver","canUploadKeysWithPasswordOnly","accountPassword","makeRequest","identifier","user","getSafeUserId","password","dialogAesthetics","SSOAuthEntry","PHASE_PREAUTH","title","_t","body","continueText","continueKind","PHASE_POSTAUTH","finished","Modal","createDialog","InteractiveAuthDialog","matrixClient","aestheticsForStagePhases","LOGIN_TYPE","UNSTABLE_LOGIN_TYPE","confirmed","Error","crypto","forceReset","resetCrossSigning","backupInfo","Loading","getKeyBackupInfo","logger","error","LoadError","Storing","undefined","log","bootstrapSecretStorage","createSecretStorageKey","setupNewSecretStorage","bootstrapCrossSigning","authUploadDeviceSigningKeys","doBootstrapUIAuth","setupNewCrossSigning","resetKeyBackup","setupNewKeyBackup","initialiseDehydration","createNewKey","Stored","onFinished","ConfirmSkip","ChooseKeyPassphrase","preventDefault","passphraseField","validate","allowEmpty","valid","focus","focused","PassphraseConfirm","passPhrase","passPhraseConfirm","passPhraseValid","result","cli","getSecureBackupSetupMethods","includes","ModuleRunner","instance","extensions","cryptoSetup","accountPasswordCorrect","canSkip","isSecureBackupRequired","componentDidMount","keyFromCustomisations","initExtension","queryKeyUploadAuth","privateKey","uploadDeviceSigningKeys","MatrixError","data","flows","some","f","stages","length","renderOptionKey","StyledRadioButton","key","name","checked","onChange","onKeyPassphraseChange","outlined","className","renderOptionPassphrase","renderPhaseChooseKeyPassphrase","setupMethods","optionKey","optionPassphrase","onSubmit","onChooseKeyPassphraseFormSubmit","role","DialogButtons","primaryButton","onPrimaryButtonClick","onCancel","onCancelClick","hasCancel","renderPhasePassPhrase","onPassPhraseNextClick","PassphraseField","id","onPassPhraseChange","minScore","onValidate","onPassPhraseValidate","fieldRef","autoFocus","label","_td","labelEnterPassword","labelStrongPassword","labelAllowedButUnsafe","disabled","onClick","renderPhasePassPhraseConfirm","matchText","changeText","passPhraseMatch","startsWith","AccessibleButton","kind","onSetAgainClick","onPassPhraseConfirmNextClick","PassphraseConfirmField","onPassPhraseConfirmChange","labelRequired","labelInvalid","renderPhaseShowKey","_this$recoveryKey","continueButton","onShowKeyContinueClick","InlineSpinner","ref","onDownloadClick","downloadButton","copyButton","onCopyClick","renderBusyPhase","Spinner","renderStoredPhase","renderPhaseLoadError","onLoadRetryClick","renderPhaseSkipConfirm","onGoBackClick","titleForPhase","topComponent","CheckmarkIcon","classNames","mx_SuccessDialog","render","content","titleClass","BaseDialog","top","fixedWidth","PureComponent","args","withValidation","rules","test","invalid","fieldState","Field","autoComplete","tooltipAlignment","description","complexity","score","max","deriveData","scorePassword","get","userInputs","safe","SdkConfig","feedback","warning","suggestions","memoize","b","autoBom","console","warn","XMLHttpRequest","open","responseType","onload","response","onerror","send","status","dispatchEvent","MouseEvent","document","createEvent","initMouseEvent","window","self","g","global","navigator","userAgent","saveAs","HTMLAnchorElement","prototype","URL","webkitURL","createElement","download","rel","href","origin","location","createObjectURL","setTimeout","revokeObjectURL","msSaveOrOpenBlob","innerText","i","HTMLElement","safari","FileReader","onloadend","replace","readAsDataURL","module","exports"],"sourceRoot":""}